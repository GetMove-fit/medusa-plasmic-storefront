// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: o7C61dL2AAD7uCRtgHRJ1p
// Component: 5DzFHhVugCR8

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import Header from "../../Header"; // plasmic-import: flZbWZPtlB4m/component
import { SliderWrapper } from "@plasmicpkgs/react-slick";
import { sliderHelpers as SliderWrapper_Helpers } from "@plasmicpkgs/react-slick";
import PfeilButton from "../../PfeilButton"; // plasmic-import: T11kSpSq58ua/component
import { GraphqlFetcher } from "@plasmicpkgs/plasmic-query";
import KategorieKarte from "../../KategorieKarte"; // plasmic-import: Koc5L53D7S3j/component
import ProduktKarte from "../../ProduktKarte"; // plasmic-import: kLfmrXKYIGkV/component
import RaumKarte from "../../RaumKarte"; // plasmic-import: MlgArckP-xFn/component
import Footer from "../../Footer"; // plasmic-import: xGg6X7hlsmRZ/component

import { useScreenVariants as useScreenVariantse5MBeV68Gh1Q } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: e5mBeV68GH1Q/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: o7C61dL2AAD7uCRtgHRJ1p/projectcss
import sty from "./PlasmicHomepage.module.css"; // plasmic-import: 5DzFHhVugCR8/css

import Icon3Icon from "./icons/PlasmicIcon__Icon3"; // plasmic-import: Pq4VtAYHboqo/icon
import Icon4Icon from "./icons/PlasmicIcon__Icon4"; // plasmic-import: I1dwRkGuQgXc/icon
import Icon5Icon from "./icons/PlasmicIcon__Icon5"; // plasmic-import: 49kfIt_HUzOR/icon
import RatingIcon from "./icons/PlasmicIcon__Rating"; // plasmic-import: 7QQR5csl6Mwl/icon
import PfeilIcon from "./icons/PlasmicIcon__Pfeil"; // plasmic-import: QKSFoWVnjtFs/icon
import _01AlignCenter10Icon from "./icons/PlasmicIcon___01AlignCenter10"; // plasmic-import: -2Yg_dJXJt-U/icon
import _01AlignCenter11Icon from "./icons/PlasmicIcon___01AlignCenter11"; // plasmic-import: RcKb2ulGPlbz/icon
import _01AlignCenter12Icon from "./icons/PlasmicIcon___01AlignCenter12"; // plasmic-import: 2IoNue-HF4cl/icon
import _01AlignCenter13Icon from "./icons/PlasmicIcon___01AlignCenter13"; // plasmic-import: gAoTBksUFqhL/icon

createPlasmicElementProxy;

export type PlasmicHomepage__VariantMembers = {};
export type PlasmicHomepage__VariantsArgs = {};
type VariantPropType = keyof PlasmicHomepage__VariantsArgs;
export const PlasmicHomepage__VariantProps = new Array<VariantPropType>();

export type PlasmicHomepage__ArgsType = {};
type ArgPropType = keyof PlasmicHomepage__ArgsType;
export const PlasmicHomepage__ArgProps = new Array<ArgPropType>();

export type PlasmicHomepage__OverridesType = {
  root?: Flex__<"div">;
  header?: Flex__<typeof Header>;
  sliderCarousel?: Flex__<typeof SliderWrapper>;
  service?: Flex__<"div">;
  serviceHome1?: Flex__<"div">;
  freeShipping6?: Flex__<"div">;
  shopOnline?: Flex__<"div">;
  everytimeEverywhere?: Flex__<"div">;
  serviceHome2?: Flex__<"div">;
  icon4?: Flex__<"div">;
  freeShipping7?: Flex__<"div">;
  freeShipping3?: Flex__<"div">;
  cappedAt59PerOrder?: Flex__<"div">;
  serviceHome3?: Flex__<"div">;
  freeShipping4?: Flex__<"div">;
  returnPolicy?: Flex__<"div">;
  shopWithConfidence?: Flex__<"div">;
  serviceHome4?: Flex__<"div">;
  icon5?: Flex__<"div">;
  freeShipping5?: Flex__<"div">;
  paymentMethods?: Flex__<"div">;
  convenientSafeFast?: Flex__<"div">;
  kategorienSlider?: Flex__<typeof SliderWrapper>;
  beliebteProdukteSlider?: Flex__<typeof SliderWrapper>;
  raumeSlider?: Flex__<typeof SliderWrapper>;
  angeboteSlider?: Flex__<typeof SliderWrapper>;
  banner?: Flex__<"div">;
  paketangebot?: Flex__<"div">;
  content43?: Flex__<"div">;
  content46?: Flex__<"div">;
  button3?: Flex__<"div">;
  buttonText?: Flex__<"div">;
  paketangebot2?: Flex__<"div">;
  content48?: Flex__<"div">;
  content49?: Flex__<"div">;
  button4?: Flex__<"div">;
  buttonText2?: Flex__<"div">;
  categories3?: Flex__<"div">;
  content40?: Flex__<"div">;
  content41?: Flex__<"div">;
  content42?: Flex__<"div">;
  content44?: Flex__<"div">;
  avatar4?: Flex__<"div">;
  avatar5?: Flex__<"div">;
  img10?: Flex__<"div">;
  avatar6?: Flex__<"div">;
  img11?: Flex__<"div">;
  avatar7?: Flex__<"div">;
  img12?: Flex__<"div">;
  content45?: Flex__<"div">;
  content47?: Flex__<"div">;
  content50?: Flex__<"div">;
  content57?: Flex__<"div">;
  content51?: Flex__<"div">;
  content52?: Flex__<"div">;
  content53?: Flex__<"div">;
  content54?: Flex__<"div">;
  content55?: Flex__<"div">;
  content56?: Flex__<"div">;
  img13?: Flex__<"div">;
  backgroundColor?: Flex__<"div">;
  content14?: Flex__<"div">;
  categories?: Flex__<"div">;
  content15?: Flex__<"div">;
  content16?: Flex__<"div">;
  cardFeedback?: Flex__<"div">;
  avatar?: Flex__<"div">;
  img?: Flex__<"div">;
  content17?: Flex__<"div">;
  content18?: Flex__<"div">;
  cardFeedback2?: Flex__<"div">;
  loremIpsumDolorSitAmetConsecteturSedLacusConvallisNuncSedNequeTinciduntInTemporNullaUtCommodoFaucibusConsecteturMaurisLoremIpsumDolorSitAmetConsecteturSedLacusConvallisNuncSedNeque?: Flex__<"div">;
  content19?: Flex__<"div">;
  cardFeedback3?: Flex__<"div">;
  loremIpsumDolorSitAmetConsecteturSedLacusConvallisNuncSedNequeTinciduntInTemporNullaUtCommodoFaucibusConsecteturMaurisLoremIpsumDolorSitAmetConsecteturSedLacusConvallisNuncSedNeque2?: Flex__<"div">;
  cardFeedback4?: Flex__<"div">;
  avatar2?: Flex__<"div">;
  img2?: Flex__<"div">;
  content20?: Flex__<"div">;
  content21?: Flex__<"div">;
  annaJean?: Flex__<"div">;
  graphicDesigner?: Flex__<"div">;
  content22?: Flex__<"div">;
  cardFeedback5?: Flex__<"div">;
  avatar3?: Flex__<"div">;
  img3?: Flex__<"div">;
  content23?: Flex__<"div">;
  content24?: Flex__<"div">;
  annaJean2?: Flex__<"div">;
  graphicDesigner2?: Flex__<"div">;
  cardFeedback6?: Flex__<"div">;
  loremIpsumDolorSitAmetConsecteturSedLacusConvallisNuncSedNequeTinciduntInTemporNullaUtCommodoFaucibusConsecteturMaurisLoremIpsumDolorSitAmetConsecteturSedLacusConvallisNuncSedNeque3?: Flex__<"div">;
  blog?: Flex__<"div">;
  content25?: Flex__<"div">;
  sections2?: Flex__<"div">;
  categories2?: Flex__<"div">;
  icon9?: Flex__<"div">;
  angleSmall3?: Flex__<"div">;
  angleSmall4?: Flex__<"div">;
  cardBlog?: Flex__<"div">;
  cardBlogLargeHome1?: Flex__<"div">;
  img4?: Flex__<"div">;
  content26?: Flex__<"div">;
  content27?: Flex__<"div">;
  date?: Flex__<"div">;
  calendar?: Flex__<"div">;
  content28?: Flex__<"div">;
  name2?: Flex__<"div">;
  user4?: Flex__<"div">;
  content29?: Flex__<"div">;
  content30?: Flex__<"div">;
  like?: Flex__<"div">;
  like2?: Flex__<"div">;
  content31?: Flex__<"div">;
  view?: Flex__<"div">;
  eye?: Flex__<"div">;
  button2?: Flex__<"div">;
  readMore?: Flex__<"div">;
  line?: Flex__<"div">;
  content32?: Flex__<"div">;
  refreshYourInteriorArrangementStyleWith3BasicSteps?: Flex__<"div">;
  img6?: Flex__<"div">;
  img7?: Flex__<"div">;
  content33?: Flex__<"div">;
  like3?: Flex__<"div">;
  like4?: Flex__<"div">;
  view2?: Flex__<"div">;
  frame10029?: Flex__<"div">;
  eye2?: Flex__<"div">;
  content34?: Flex__<"div">;
  date2?: Flex__<"div">;
  date3?: Flex__<"div">;
  calendar2?: Flex__<"div">;
  name3?: Flex__<"div">;
  name4?: Flex__<"div">;
  user2?: Flex__<"div">;
  content35?: Flex__<"div">;
  isMinimalistFurnitureReallyCostlyAndMonotonous?: Flex__<"div">;
  frame10031?: Flex__<"div">;
  img8?: Flex__<"div">;
  img9?: Flex__<"div">;
  content36?: Flex__<"div">;
  like5?: Flex__<"div">;
  like6?: Flex__<"div">;
  view3?: Flex__<"div">;
  frame10030?: Flex__<"div">;
  eye3?: Flex__<"div">;
  content37?: Flex__<"div">;
  date4?: Flex__<"div">;
  date5?: Flex__<"div">;
  calendar3?: Flex__<"div">;
  name5?: Flex__<"div">;
  name6?: Flex__<"div">;
  user3?: Flex__<"div">;
  content38?: Flex__<"div">;
  isMinimalistFurnitureReallyCostlyAndMonotonous2?: Flex__<"div">;
  footer?: Flex__<typeof Footer>;
};

export interface DefaultHomepageProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicHomepage__RenderFunc(props: {
  variants: PlasmicHomepage__VariantsArgs;
  args: PlasmicHomepage__ArgsType;
  overrides: PlasmicHomepage__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "sliderCarousel.currentSlide",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 0,

        refName: "sliderCarousel",
        onMutate: generateOnMutateForSpec("currentSlide", SliderWrapper_Helpers)
      },
      {
        path: "kategorienSlider.currentSlide",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 0,

        refName: "kategorienSlider",
        onMutate: generateOnMutateForSpec("currentSlide", SliderWrapper_Helpers)
      },
      {
        path: "beliebteProdukteSlider.currentSlide",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 0,

        refName: "beliebteProdukteSlider",
        onMutate: generateOnMutateForSpec("currentSlide", SliderWrapper_Helpers)
      },
      {
        path: "raumeSlider.currentSlide",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 0,

        refName: "raumeSlider",
        onMutate: generateOnMutateForSpec("currentSlide", SliderWrapper_Helpers)
      },
      {
        path: "angeboteSlider.currentSlide",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 0,

        refName: "angeboteSlider",
        onMutate: generateOnMutateForSpec("currentSlide", SliderWrapper_Helpers)
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantse5MBeV68Gh1Q()
  });

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        {(() => {
          try {
            return true;
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return true;
            }
            throw e;
          }
        })() ? (
          <Stack__
            as={"div"}
            data-plasmic-name={"root"}
            data-plasmic-override={overrides.root}
            data-plasmic-root={true}
            data-plasmic-for-node={forNode}
            hasGap={true}
            className={classNames(
              projectcss.all,
              projectcss.root_reset,
              projectcss.plasmic_default_styles,
              projectcss.plasmic_mixins,
              projectcss.plasmic_tokens,
              sty.root
            )}
          >
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__sdd2O)}
            >
              <Header
                data-plasmic-name={"header"}
                data-plasmic-override={overrides.header}
                className={classNames("__wab_instance", sty.header)}
              />

              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__cSpGt)}
              >
                {(() => {
                  const child$Props = {
                    adaptiveHeight: true,
                    autoplay: true,
                    beforeChange: generateStateOnChangePropForCodeComponents(
                      $state,
                      "currentSlide",
                      ["sliderCarousel", "currentSlide"],
                      SliderWrapper_Helpers
                    ),
                    className: classNames("__wab_instance", sty.sliderCarousel),
                    dots: true,
                    initialSlide: generateStateValueProp($state, [
                      "sliderCarousel",
                      "currentSlide"
                    ]),
                    ref: ref => {
                      $refs["sliderCarousel"] = ref;
                    },
                    sliderScopeClassName: sty["sliderCarousel__slider"]
                  };
                  initializeCodeComponentStates(
                    $state,
                    [
                      {
                        name: "currentSlide",
                        plasmicStateName: "sliderCarousel.currentSlide"
                      }
                    ],
                    [],
                    SliderWrapper_Helpers ?? {},
                    child$Props
                  );

                  return (
                    <SliderWrapper
                      data-plasmic-name={"sliderCarousel"}
                      data-plasmic-override={overrides.sliderCarousel}
                      {...child$Props}
                    >
                      <PlasmicImg__
                        alt={""}
                        className={classNames(sty.img__sgtTx)}
                        displayHeight={"100%"}
                        displayMaxHeight={"none"}
                        displayMaxWidth={"none"}
                        displayMinHeight={"0"}
                        displayMinWidth={"0"}
                        displayWidth={"100%"}
                        loading={"eager"}
                        src={{
                          src: "/plasmic/ewl/images/image.png",
                          fullWidth: 1656,
                          fullHeight: 1160,
                          aspectRatio: undefined
                        }}
                      />

                      <PlasmicImg__
                        alt={""}
                        className={classNames(sty.img__pljo8)}
                        displayHeight={"100%"}
                        displayMaxHeight={"none"}
                        displayMaxWidth={"none"}
                        displayMinHeight={"0"}
                        displayMinWidth={"0"}
                        displayWidth={"100%"}
                        loading={"eager"}
                        src={{
                          src: "/plasmic/ewl/images/image.png",
                          fullWidth: 1656,
                          fullHeight: 1160,
                          aspectRatio: undefined
                        }}
                      />
                    </SliderWrapper>
                  );
                })()}
                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__yNhw9)}
                >
                  <PlasmicImg__
                    alt={""}
                    className={classNames(sty.img___4KSj)}
                    displayHeight={"auto"}
                    displayMaxHeight={"none"}
                    displayMaxWidth={"none"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={"100%"}
                    loading={"eager"}
                    src={{
                      src: "/plasmic/ewl/images/image2.png",
                      fullWidth: 1164,
                      fullHeight: 550,
                      aspectRatio: undefined
                    }}
                  />

                  <PlasmicImg__
                    alt={""}
                    className={classNames(sty.img___2Dbuo)}
                    displayHeight={"auto"}
                    displayMaxHeight={"none"}
                    displayMaxWidth={"none"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={"100%"}
                    loading={"eager"}
                    src={{
                      src: "/plasmic/ewl/images/image3.png",
                      fullWidth: 1164,
                      fullHeight: 550,
                      aspectRatio: undefined
                    }}
                  />
                </Stack__>
              </Stack__>
            </Stack__>
            <Stack__
              as={"div"}
              data-plasmic-name={"service"}
              data-plasmic-override={overrides.service}
              hasGap={true}
              className={classNames(projectcss.all, sty.service)}
            >
              <Stack__
                as={"div"}
                data-plasmic-name={"serviceHome1"}
                data-plasmic-override={overrides.serviceHome1}
                hasGap={true}
                className={classNames(projectcss.all, sty.serviceHome1)}
              >
                <PlasmicImg__
                  alt={""}
                  className={classNames(sty.img__wWnQj)}
                  displayHeight={"60px"}
                  displayMaxHeight={"none"}
                  displayMaxWidth={"100%"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={"60px"}
                  loading={"lazy"}
                  src={{
                    src: "/plasmic/ewl/images/icon2.svg",
                    fullWidth: 60,
                    fullHeight: 60,
                    aspectRatio: 1
                  }}
                />

                <div
                  data-plasmic-name={"freeShipping6"}
                  data-plasmic-override={overrides.freeShipping6}
                  className={classNames(projectcss.all, sty.freeShipping6)}
                >
                  <div
                    data-plasmic-name={"shopOnline"}
                    data-plasmic-override={overrides.shopOnline}
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.shopOnline
                    )}
                  >
                    {"Shoppe Online"}
                  </div>
                  <div
                    data-plasmic-name={"everytimeEverywhere"}
                    data-plasmic-override={overrides.everytimeEverywhere}
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.everytimeEverywhere
                    )}
                  >
                    {"Jederzeit \u00fcberall"}
                  </div>
                </div>
              </Stack__>
              <Stack__
                as={"div"}
                data-plasmic-name={"serviceHome2"}
                data-plasmic-override={overrides.serviceHome2}
                hasGap={true}
                className={classNames(projectcss.all, sty.serviceHome2)}
              >
                <div
                  data-plasmic-name={"icon4"}
                  data-plasmic-override={overrides.icon4}
                  className={classNames(projectcss.all, sty.icon4)}
                >
                  <Icon3Icon
                    className={classNames(projectcss.all, sty.svg__f3RXb)}
                    role={"img"}
                  />
                </div>
                <div
                  data-plasmic-name={"freeShipping7"}
                  data-plasmic-override={overrides.freeShipping7}
                  className={classNames(projectcss.all, sty.freeShipping7)}
                >
                  <div
                    data-plasmic-name={"freeShipping3"}
                    data-plasmic-override={overrides.freeShipping3}
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.freeShipping3
                    )}
                  >
                    {"Kostenloser Versand"}
                  </div>
                  <div
                    data-plasmic-name={"cappedAt59PerOrder"}
                    data-plasmic-override={overrides.cappedAt59PerOrder}
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.cappedAt59PerOrder
                    )}
                  >
                    {"Ab einem Bestellwert von 60 \u20ac"}
                  </div>
                </div>
              </Stack__>
              <Stack__
                as={"div"}
                data-plasmic-name={"serviceHome3"}
                data-plasmic-override={overrides.serviceHome3}
                hasGap={true}
                className={classNames(projectcss.all, sty.serviceHome3)}
              >
                <Icon4Icon
                  className={classNames(projectcss.all, sty.svg___7Mtfb)}
                  role={"img"}
                />

                <div
                  data-plasmic-name={"freeShipping4"}
                  data-plasmic-override={overrides.freeShipping4}
                  className={classNames(projectcss.all, sty.freeShipping4)}
                >
                  <div
                    data-plasmic-name={"returnPolicy"}
                    data-plasmic-override={overrides.returnPolicy}
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.returnPolicy
                    )}
                  >
                    {"R\u00fcckgabem\u00f6glichkeit"}
                  </div>
                  <div
                    data-plasmic-name={"shopWithConfidence"}
                    data-plasmic-override={overrides.shopWithConfidence}
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.shopWithConfidence
                    )}
                  >
                    {"Mit gutem Gewissen einkaufen"}
                  </div>
                </div>
              </Stack__>
              <Stack__
                as={"div"}
                data-plasmic-name={"serviceHome4"}
                data-plasmic-override={overrides.serviceHome4}
                hasGap={true}
                className={classNames(projectcss.all, sty.serviceHome4)}
              >
                <div
                  data-plasmic-name={"icon5"}
                  data-plasmic-override={overrides.icon5}
                  className={classNames(projectcss.all, sty.icon5)}
                >
                  <Icon5Icon
                    className={classNames(projectcss.all, sty.svg__puJfg)}
                    role={"img"}
                  />
                </div>
                <div
                  data-plasmic-name={"freeShipping5"}
                  data-plasmic-override={overrides.freeShipping5}
                  className={classNames(projectcss.all, sty.freeShipping5)}
                >
                  <div
                    data-plasmic-name={"paymentMethods"}
                    data-plasmic-override={overrides.paymentMethods}
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.paymentMethods
                    )}
                  >
                    {"Zahlungsm\u00f6glichkeiten"}
                  </div>
                  <div
                    data-plasmic-name={"convenientSafeFast"}
                    data-plasmic-override={overrides.convenientSafeFast}
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.convenientSafeFast
                    )}
                  >
                    {"Bequem, Sicher und Schnell"}
                  </div>
                </div>
              </Stack__>
            </Stack__>
            <Stack__
              as={"section"}
              hasGap={true}
              className={classNames(projectcss.all, sty.section___7ACxK)}
            >
              <div className={classNames(projectcss.all, sty.freeBox__vcGoC)}>
                <h2
                  className={classNames(
                    projectcss.all,
                    projectcss.h2,
                    projectcss.__wab_text,
                    sty.h2__nw2Cg
                  )}
                >
                  {"Kategorien"}
                </h2>
                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__engm6)}
                >
                  <PfeilButton
                    changeSlide={async () => {
                      const $steps = {};

                      $steps["runActionOnKategorienSlider"] = true
                        ? (() => {
                            const actionArgs = {
                              tplRef: "kategorienSlider",
                              action: "slickPrev"
                            };
                            return (({ tplRef, action, args }) => {
                              return $refs?.[tplRef]?.[action]?.(
                                ...(args ?? [])
                              );
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["runActionOnKategorienSlider"] != null &&
                        typeof $steps["runActionOnKategorienSlider"] ===
                          "object" &&
                        typeof $steps["runActionOnKategorienSlider"].then ===
                          "function"
                      ) {
                        $steps["runActionOnKategorienSlider"] = await $steps[
                          "runActionOnKategorienSlider"
                        ];
                      }
                    }}
                    className={classNames(
                      "__wab_instance",
                      sty.pfeilButton__xMpof
                    )}
                    disabled={(() => {
                      try {
                        return $state.kategorienSlider.currentSlide === 0;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return false;
                        }
                        throw e;
                      }
                    })()}
                    zuruck={true}
                  />

                  <PfeilButton
                    changeSlide={async () => {
                      const $steps = {};

                      $steps["runActionOnKategorienSlider"] = true
                        ? (() => {
                            const actionArgs = {
                              tplRef: "kategorienSlider",
                              action: "slickNext"
                            };
                            return (({ tplRef, action, args }) => {
                              return $refs?.[tplRef]?.[action]?.(
                                ...(args ?? [])
                              );
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["runActionOnKategorienSlider"] != null &&
                        typeof $steps["runActionOnKategorienSlider"] ===
                          "object" &&
                        typeof $steps["runActionOnKategorienSlider"].then ===
                          "function"
                      ) {
                        $steps["runActionOnKategorienSlider"] = await $steps[
                          "runActionOnKategorienSlider"
                        ];
                      }
                    }}
                    className={classNames(
                      "__wab_instance",
                      sty.pfeilButton__ze0U7
                    )}
                    disabled={(() => {
                      try {
                        return $state.kategorienSlider.currentSlide === 4;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return false;
                        }
                        throw e;
                      }
                    })()}
                  />
                </Stack__>
              </div>
              <GraphqlFetcher
                className={classNames(
                  "__wab_instance",
                  sty.graphQlFetcher___18JfF
                )}
                dataName={"kategorien"}
                errorDisplay={
                  <DataCtxReader__>
                    {$ctx => "Error fetching data"}
                  </DataCtxReader__>
                }
                errorName={"fetchError"}
                loadingDisplay={null}
                method={"POST"}
                noLayout={false}
                query={{
                  query:
                    'query {\n  categories(first: 100) {\n    edges {\n      node {\n        id\n        name\n        products(channel: "default-channel") {\n          totalCount\n        }\n      }\n    }\n  }\n}',
                  variables: {}
                }}
                url={"https://api.ewl.ryze-media.at/graphql/"}
              >
                <DataCtxReader__>
                  {$ctx =>
                    (() => {
                      const child$Props = {
                        adaptiveHeight: true,
                        arrows: false,
                        beforeChange:
                          generateStateOnChangePropForCodeComponents(
                            $state,
                            "currentSlide",
                            ["kategorienSlider", "currentSlide"],
                            SliderWrapper_Helpers
                          ),
                        className: classNames(
                          "__wab_instance",
                          sty.kategorienSlider
                        ),
                        infinite: false,
                        initialSlide: generateStateValueProp($state, [
                          "kategorienSlider",
                          "currentSlide"
                        ]),
                        ref: ref => {
                          $refs["kategorienSlider"] = ref;
                        },
                        sliderScopeClassName: sty["kategorienSlider__slider"]
                      };
                      initializeCodeComponentStates(
                        $state,
                        [
                          {
                            name: "currentSlide",
                            plasmicStateName: "kategorienSlider.currentSlide"
                          }
                        ],
                        [],
                        SliderWrapper_Helpers ?? {},
                        child$Props
                      );

                      return (
                        <SliderWrapper
                          data-plasmic-name={"kategorienSlider"}
                          data-plasmic-override={overrides.kategorienSlider}
                          {...child$Props}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__iZ1VU
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__m24V7
                              )}
                            >
                              <KategorieKarte
                                bild={{
                                  src: "/plasmic/ewl/images/image4.png",
                                  fullWidth: 392,
                                  fullHeight: 264,
                                  aspectRatio: undefined
                                }}
                                className={classNames(
                                  "__wab_instance",
                                  sty.kategorieKarte__idEph
                                )}
                                name={"Heizung"}
                              />

                              <KategorieKarte
                                bild={{
                                  src: "/plasmic/ewl/images/img3.png",
                                  fullWidth: 1000,
                                  fullHeight: 1000,
                                  aspectRatio: undefined
                                }}
                                className={classNames(
                                  "__wab_instance",
                                  sty.kategorieKarte__qJc9
                                )}
                                name={"Solaranlagen"}
                              />

                              <KategorieKarte
                                bild={{
                                  src: "/plasmic/ewl/images/img4.png",
                                  fullWidth: 485,
                                  fullHeight: 432,
                                  aspectRatio: undefined
                                }}
                                className={classNames(
                                  "__wab_instance",
                                  sty.kategorieKarte___9WnJb
                                )}
                                name={"Klimaanlagen"}
                              />

                              <KategorieKarte
                                bild={{
                                  src: "/plasmic/ewl/images/img5.png",
                                  fullWidth: 1340,
                                  fullHeight: 1340,
                                  aspectRatio: undefined
                                }}
                                className={classNames(
                                  "__wab_instance",
                                  sty.kategorieKarte__rXs79
                                )}
                                name={"Sanit\u00e4reinrichtung"}
                              />

                              <KategorieKarte
                                bild={{
                                  src: "/plasmic/ewl/images/img6.png",
                                  fullWidth: 1662,
                                  fullHeight: 1092,
                                  aspectRatio: undefined
                                }}
                                className={classNames(
                                  "__wab_instance",
                                  sty.kategorieKarte___7AyP
                                )}
                                name={"Badewannen"}
                              />

                              <KategorieKarte
                                bild={{
                                  src: "/plasmic/ewl/images/img7.png",
                                  fullWidth: 430,
                                  fullHeight: 359,
                                  aspectRatio: undefined
                                }}
                                className={classNames(
                                  "__wab_instance",
                                  sty.kategorieKarte__zOe11
                                )}
                                name={"L\u00fcftungstechnik"}
                              />
                            </div>
                          </div>
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__lDvnI
                            )}
                          >
                            <PlasmicImg__
                              alt={""}
                              className={classNames(sty.img__xzTr4)}
                              displayHeight={"auto"}
                              displayMaxHeight={"none"}
                              displayMaxWidth={"100%"}
                              displayMinHeight={"0"}
                              displayMinWidth={"0"}
                              displayWidth={"auto"}
                              src={
                                "https://static1.plasmic.app/components/react-slick/slide2.png"
                              }
                            />
                          </div>
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__iFhEp
                            )}
                          >
                            <PlasmicImg__
                              alt={""}
                              className={classNames(sty.img__rnL)}
                              displayHeight={"auto"}
                              displayMaxHeight={"none"}
                              displayMaxWidth={"100%"}
                              displayMinHeight={"0"}
                              displayMinWidth={"0"}
                              displayWidth={"auto"}
                              src={
                                "https://static1.plasmic.app/components/react-slick/slide3.png"
                              }
                            />
                          </div>
                        </SliderWrapper>
                      );
                    })()
                  }
                </DataCtxReader__>
              </GraphqlFetcher>
            </Stack__>
            <Stack__
              as={"section"}
              hasGap={true}
              className={classNames(projectcss.all, sty.section__fog0)}
            >
              <div className={classNames(projectcss.all, sty.freeBox__raGPm)}>
                <h2
                  className={classNames(
                    projectcss.all,
                    projectcss.h2,
                    projectcss.__wab_text,
                    sty.h2__m2MZ
                  )}
                >
                  {"Beliebte Produkte"}
                </h2>
                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__mGgaQ)}
                >
                  <PfeilButton
                    changeSlide={async () => {
                      const $steps = {};

                      $steps["runActionOnBeliebteProdukteSlider"] = true
                        ? (() => {
                            const actionArgs = {
                              tplRef: "beliebteProdukteSlider",
                              action: "slickPrev"
                            };
                            return (({ tplRef, action, args }) => {
                              return $refs?.[tplRef]?.[action]?.(
                                ...(args ?? [])
                              );
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["runActionOnBeliebteProdukteSlider"] != null &&
                        typeof $steps["runActionOnBeliebteProdukteSlider"] ===
                          "object" &&
                        typeof $steps["runActionOnBeliebteProdukteSlider"]
                          .then === "function"
                      ) {
                        $steps["runActionOnBeliebteProdukteSlider"] =
                          await $steps["runActionOnBeliebteProdukteSlider"];
                      }
                    }}
                    className={classNames(
                      "__wab_instance",
                      sty.pfeilButton__nvO9O
                    )}
                    disabled={(() => {
                      try {
                        return $state.beliebteProdukteSlider.currentSlide === 0;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return true;
                        }
                        throw e;
                      }
                    })()}
                    zuruck={true}
                  />

                  <PfeilButton
                    changeSlide={async () => {
                      const $steps = {};

                      $steps["runActionOnBeliebteProdukteSlider"] = true
                        ? (() => {
                            const actionArgs = {
                              tplRef: "beliebteProdukteSlider",
                              action: "slickNext"
                            };
                            return (({ tplRef, action, args }) => {
                              return $refs?.[tplRef]?.[action]?.(
                                ...(args ?? [])
                              );
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["runActionOnBeliebteProdukteSlider"] != null &&
                        typeof $steps["runActionOnBeliebteProdukteSlider"] ===
                          "object" &&
                        typeof $steps["runActionOnBeliebteProdukteSlider"]
                          .then === "function"
                      ) {
                        $steps["runActionOnBeliebteProdukteSlider"] =
                          await $steps["runActionOnBeliebteProdukteSlider"];
                      }
                    }}
                    className={classNames(
                      "__wab_instance",
                      sty.pfeilButton__xnjjJ
                    )}
                    disabled={(() => {
                      try {
                        return $state.beliebteProdukteSlider.currentSlide === 4;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return true;
                        }
                        throw e;
                      }
                    })()}
                  />
                </Stack__>
              </div>
              <GraphqlFetcher
                className={classNames(
                  "__wab_instance",
                  sty.graphQlFetcher__isWkr
                )}
                dataName={"produkte"}
                errorDisplay={
                  <DataCtxReader__>
                    {$ctx => "Error fetching data"}
                  </DataCtxReader__>
                }
                errorName={"fetchError"}
                loadingDisplay={null}
                method={"POST"}
                noLayout={false}
                query={{
                  query:
                    '{\n  products(first: 8, channel: "default-channel") {\n    edges {\n      node {\n        id\n        name\n        created\n        thumbnail(size: 346) {\n          url\n        }\n        rating\n        pricing {\n          onSale\n          discount {\n            gross {\n              amount\n            }\n          }\n          priceRange {\n            start {\n              gross {\n                amount\n              }\n            }\n            stop {\n              gross {\n                amount\n              }\n            }\n          }\n          priceRangeUndiscounted {\n            start {\n              gross {\n                amount\n              }\n            }\n            stop {\n              gross {\n                amount\n              }\n            }\n          }\n        }\n        variants {\n          attributes {\n            attribute {\n              slug\n            }\n            values {\n            \tname\n              value\n            }\n          }\n        }\n      }\n    }\n  }\n}\n',
                  variables: {}
                }}
                url={"https://api.ewl.ryze-media.at/graphql/"}
              >
                <DataCtxReader__>
                  {$ctx =>
                    (() => {
                      const child$Props = {
                        adaptiveHeight: true,
                        arrows: false,
                        beforeChange:
                          generateStateOnChangePropForCodeComponents(
                            $state,
                            "currentSlide",
                            ["beliebteProdukteSlider", "currentSlide"],
                            SliderWrapper_Helpers
                          ),
                        className: classNames(
                          "__wab_instance",
                          sty.beliebteProdukteSlider
                        ),
                        infinite: false,
                        initialSlide: generateStateValueProp($state, [
                          "beliebteProdukteSlider",
                          "currentSlide"
                        ]),
                        ref: ref => {
                          $refs["beliebteProdukteSlider"] = ref;
                        },
                        sliderScopeClassName:
                          sty["beliebteProdukteSlider__slider"],
                        slidesToShow: 4
                      };
                      initializeCodeComponentStates(
                        $state,
                        [
                          {
                            name: "currentSlide",
                            plasmicStateName:
                              "beliebteProdukteSlider.currentSlide"
                          }
                        ],
                        [],
                        SliderWrapper_Helpers ?? {},
                        child$Props
                      );

                      return (
                        <SliderWrapper
                          data-plasmic-name={"beliebteProdukteSlider"}
                          data-plasmic-override={
                            overrides.beliebteProdukteSlider
                          }
                          {...child$Props}
                        >
                          {(_par =>
                            !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                            (() => {
                              try {
                                return $ctx.produkte.data.products.edges;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return [];
                                }
                                throw e;
                              }
                            })()
                          ).map((__plasmic_item_0, __plasmic_idx_0) => {
                            const currentItem = __plasmic_item_0;
                            const currentIndex = __plasmic_idx_0;
                            return (
                              <ProduktKarte
                                key={currentIndex}
                                produkt={(() => {
                                  try {
                                    return currentItem.node;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return undefined;
                                    }
                                    throw e;
                                  }
                                })()}
                              />
                            );
                          })}
                        </SliderWrapper>
                      );
                    })()
                  }
                </DataCtxReader__>
              </GraphqlFetcher>
            </Stack__>
            <Stack__
              as={"section"}
              hasGap={true}
              className={classNames(projectcss.all, sty.section__cbC0)}
            >
              <div className={classNames(projectcss.all, sty.freeBox__nKzk4)}>
                <h2
                  className={classNames(
                    projectcss.all,
                    projectcss.h2,
                    projectcss.__wab_text,
                    sty.h2__w675
                  )}
                >
                  {"Einkaufen nach R\u00e4umen"}
                </h2>
                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__xuhdg)}
                >
                  <PfeilButton
                    changeSlide={async () => {
                      const $steps = {};

                      $steps["runActionOnRaumeSlider"] = true
                        ? (() => {
                            const actionArgs = {
                              tplRef: "raumeSlider",
                              action: "slickPrev"
                            };
                            return (({ tplRef, action, args }) => {
                              return $refs?.[tplRef]?.[action]?.(
                                ...(args ?? [])
                              );
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["runActionOnRaumeSlider"] != null &&
                        typeof $steps["runActionOnRaumeSlider"] === "object" &&
                        typeof $steps["runActionOnRaumeSlider"].then ===
                          "function"
                      ) {
                        $steps["runActionOnRaumeSlider"] = await $steps[
                          "runActionOnRaumeSlider"
                        ];
                      }
                    }}
                    className={classNames(
                      "__wab_instance",
                      sty.pfeilButton__xGGuF
                    )}
                    disabled={(() => {
                      try {
                        return $state.raumeSlider.currentSlide === 0;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return true;
                        }
                        throw e;
                      }
                    })()}
                    light={true}
                    zuruck={true}
                  />

                  <PfeilButton
                    changeSlide={async () => {
                      const $steps = {};

                      $steps["runActionOnRaumeSlider"] = true
                        ? (() => {
                            const actionArgs = {
                              tplRef: "raumeSlider",
                              action: "slickNext"
                            };
                            return (({ tplRef, action, args }) => {
                              return $refs?.[tplRef]?.[action]?.(
                                ...(args ?? [])
                              );
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["runActionOnRaumeSlider"] != null &&
                        typeof $steps["runActionOnRaumeSlider"] === "object" &&
                        typeof $steps["runActionOnRaumeSlider"].then ===
                          "function"
                      ) {
                        $steps["runActionOnRaumeSlider"] = await $steps[
                          "runActionOnRaumeSlider"
                        ];
                      }
                    }}
                    className={classNames(
                      "__wab_instance",
                      sty.pfeilButton__zPfDg
                    )}
                    disabled={(() => {
                      try {
                        return $state.raumeSlider.currentSlide === 4;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return true;
                        }
                        throw e;
                      }
                    })()}
                    light={true}
                  />
                </Stack__>
              </div>
              <GraphqlFetcher
                className={classNames(
                  "__wab_instance",
                  sty.graphQlFetcher__l0Lu
                )}
                dataName={"produkte"}
                errorDisplay={
                  <DataCtxReader__>
                    {$ctx => "Error fetching data"}
                  </DataCtxReader__>
                }
                errorName={"fetchError"}
                loadingDisplay={null}
                method={"POST"}
                noLayout={false}
                query={{
                  query:
                    '{\n  products(first: 8, channel: "default-channel") {\n    edges {\n      node {\n        id\n        name\n        created\n        thumbnail(size: 346) {\n          url\n        }\n        rating\n        pricing {\n          onSale\n          discount {\n            gross {\n              amount\n            }\n          }\n          priceRange {\n            start {\n              gross {\n                amount\n              }\n            }\n            stop {\n              gross {\n                amount\n              }\n            }\n          }\n          priceRangeUndiscounted {\n            start {\n              gross {\n                amount\n              }\n            }\n            stop {\n              gross {\n                amount\n              }\n            }\n          }\n        }\n        variants {\n          attributes {\n            attribute {\n              slug\n            }\n            values {\n            \tname\n              value\n            }\n          }\n        }\n      }\n    }\n  }\n}\n',
                  variables: {}
                }}
                url={"https://api.ewl.ryze-media.at/graphql/"}
              >
                <DataCtxReader__>
                  {$ctx =>
                    (() => {
                      const child$Props = {
                        adaptiveHeight: true,
                        arrows: false,
                        beforeChange:
                          generateStateOnChangePropForCodeComponents(
                            $state,
                            "currentSlide",
                            ["raumeSlider", "currentSlide"],
                            SliderWrapper_Helpers
                          ),
                        className: classNames(
                          "__wab_instance",
                          sty.raumeSlider
                        ),
                        infinite: false,
                        initialSlide: generateStateValueProp($state, [
                          "raumeSlider",
                          "currentSlide"
                        ]),
                        ref: ref => {
                          $refs["raumeSlider"] = ref;
                        },
                        sliderScopeClassName: sty["raumeSlider__slider"]
                      };
                      initializeCodeComponentStates(
                        $state,
                        [
                          {
                            name: "currentSlide",
                            plasmicStateName: "raumeSlider.currentSlide"
                          }
                        ],
                        [],
                        SliderWrapper_Helpers ?? {},
                        child$Props
                      );

                      return (
                        <SliderWrapper
                          data-plasmic-name={"raumeSlider"}
                          data-plasmic-override={overrides.raumeSlider}
                          {...child$Props}
                        >
                          <Stack__
                            as={"div"}
                            hasGap={true}
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__uImrF
                            )}
                          >
                            <RaumKarte
                              bild={{
                                src: "/plasmic/ewl/images/image5.png",
                                fullWidth: 676,
                                fullHeight: 500,
                                aspectRatio: undefined
                              }}
                              name={"K\u00fcche"}
                              primary={true}
                            />

                            <RaumKarte
                              bild={{
                                src: "/plasmic/ewl/images/image9.png",
                                fullWidth: 676,
                                fullHeight: 500,
                                aspectRatio: undefined
                              }}
                              className={classNames(
                                "__wab_instance",
                                sty.raumKarte__kfsgW
                              )}
                              name={"Badezimmer"}
                              primary={true}
                              top={true}
                            />

                            <RaumKarte
                              bild={{
                                src: "/plasmic/ewl/images/image7.png",
                                fullWidth: 676,
                                fullHeight: 500,
                                aspectRatio: undefined
                              }}
                              className={classNames(
                                "__wab_instance",
                                sty.raumKarte__rawdO
                              )}
                              name={"Wohnzimmer"}
                            />

                            <RaumKarte
                              bild={{
                                src: "/plasmic/ewl/images/image8.png",
                                fullWidth: 676,
                                fullHeight: 500,
                                aspectRatio: undefined
                              }}
                              className={classNames(
                                "__wab_instance",
                                sty.raumKarte__mtRyy
                              )}
                              name={"Keller"}
                              top={true}
                            />
                          </Stack__>
                          <Stack__
                            as={"div"}
                            hasGap={true}
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__tV00Z
                            )}
                          >
                            <RaumKarte
                              bild={{
                                src: "/plasmic/ewl/images/image10.png",
                                fullWidth: 676,
                                fullHeight: 500,
                                aspectRatio: undefined
                              }}
                              primary={true}
                            />

                            <RaumKarte
                              bild={{
                                src: "/plasmic/ewl/images/image11.png",
                                fullWidth: 676,
                                fullHeight: 500,
                                aspectRatio: undefined
                              }}
                              className={classNames(
                                "__wab_instance",
                                sty.raumKarte___81CYx
                              )}
                              primary={true}
                              top={true}
                            />
                          </Stack__>
                        </SliderWrapper>
                      );
                    })()
                  }
                </DataCtxReader__>
              </GraphqlFetcher>
            </Stack__>
            <Stack__
              as={"section"}
              hasGap={true}
              className={classNames(projectcss.all, sty.section__rYtsL)}
            >
              <div className={classNames(projectcss.all, sty.freeBox__xUvCv)}>
                <h2
                  className={classNames(
                    projectcss.all,
                    projectcss.h2,
                    projectcss.__wab_text,
                    sty.h2__owztn
                  )}
                >
                  {"Aktuelle Angebote"}
                </h2>
                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__mw3Qq)}
                >
                  <PfeilButton
                    changeSlide={async () => {
                      const $steps = {};

                      $steps["runActionOnBeliebteProdukteSlider"] = true
                        ? (() => {
                            const actionArgs = {
                              tplRef: "beliebteProdukteSlider",
                              action: "slickPrev"
                            };
                            return (({ tplRef, action, args }) => {
                              return $refs?.[tplRef]?.[action]?.(
                                ...(args ?? [])
                              );
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["runActionOnBeliebteProdukteSlider"] != null &&
                        typeof $steps["runActionOnBeliebteProdukteSlider"] ===
                          "object" &&
                        typeof $steps["runActionOnBeliebteProdukteSlider"]
                          .then === "function"
                      ) {
                        $steps["runActionOnBeliebteProdukteSlider"] =
                          await $steps["runActionOnBeliebteProdukteSlider"];
                      }
                    }}
                    className={classNames(
                      "__wab_instance",
                      sty.pfeilButton__m5J5F
                    )}
                    disabled={(() => {
                      try {
                        return $state.angeboteSlider.currentSlide === 0;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return false;
                        }
                        throw e;
                      }
                    })()}
                    zuruck={true}
                  />

                  <PfeilButton
                    changeSlide={async () => {
                      const $steps = {};

                      $steps["runActionOnBeliebteProdukteSlider"] = true
                        ? (() => {
                            const actionArgs = {
                              tplRef: "beliebteProdukteSlider",
                              action: "slickNext"
                            };
                            return (({ tplRef, action, args }) => {
                              return $refs?.[tplRef]?.[action]?.(
                                ...(args ?? [])
                              );
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["runActionOnBeliebteProdukteSlider"] != null &&
                        typeof $steps["runActionOnBeliebteProdukteSlider"] ===
                          "object" &&
                        typeof $steps["runActionOnBeliebteProdukteSlider"]
                          .then === "function"
                      ) {
                        $steps["runActionOnBeliebteProdukteSlider"] =
                          await $steps["runActionOnBeliebteProdukteSlider"];
                      }
                    }}
                    className={classNames(
                      "__wab_instance",
                      sty.pfeilButton__ltAni
                    )}
                    disabled={(() => {
                      try {
                        return $state.angeboteSlider.currentSlide === 4;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return false;
                        }
                        throw e;
                      }
                    })()}
                  />
                </Stack__>
              </div>
              <GraphqlFetcher
                className={classNames(
                  "__wab_instance",
                  sty.graphQlFetcher__hmRjM
                )}
                dataName={"produkte"}
                errorDisplay={
                  <DataCtxReader__>
                    {$ctx => "Error fetching data"}
                  </DataCtxReader__>
                }
                errorName={"fetchError"}
                loadingDisplay={null}
                method={"POST"}
                noLayout={false}
                query={{
                  query:
                    '{\n  products(first: 8, channel: "default-channel") {\n    edges {\n      node {\n        id\n        name\n        created\n        thumbnail(size: 346) {\n          url\n        }\n        rating\n        pricing {\n          onSale\n          discount {\n            gross {\n              amount\n            }\n          }\n          priceRange {\n            start {\n              gross {\n                amount\n              }\n            }\n            stop {\n              gross {\n                amount\n              }\n            }\n          }\n          priceRangeUndiscounted {\n            start {\n              gross {\n                amount\n              }\n            }\n            stop {\n              gross {\n                amount\n              }\n            }\n          }\n        }\n        variants {\n          attributes {\n            attribute {\n              slug\n            }\n            values {\n            \tname\n              value\n            }\n          }\n        }\n      }\n    }\n  }\n}\n',
                  variables: {}
                }}
                url={"https://api.ewl.ryze-media.at/graphql/"}
              >
                <DataCtxReader__>
                  {$ctx =>
                    (() => {
                      const child$Props = {
                        adaptiveHeight: true,
                        arrows: false,
                        beforeChange:
                          generateStateOnChangePropForCodeComponents(
                            $state,
                            "currentSlide",
                            ["angeboteSlider", "currentSlide"],
                            SliderWrapper_Helpers
                          ),
                        className: classNames(
                          "__wab_instance",
                          sty.angeboteSlider
                        ),
                        infinite: false,
                        initialSlide: generateStateValueProp($state, [
                          "angeboteSlider",
                          "currentSlide"
                        ]),
                        ref: ref => {
                          $refs["angeboteSlider"] = ref;
                        },
                        sliderScopeClassName: sty["angeboteSlider__slider"],
                        slidesToShow: 4
                      };
                      initializeCodeComponentStates(
                        $state,
                        [
                          {
                            name: "currentSlide",
                            plasmicStateName: "angeboteSlider.currentSlide"
                          }
                        ],
                        [],
                        SliderWrapper_Helpers ?? {},
                        child$Props
                      );

                      return (
                        <SliderWrapper
                          data-plasmic-name={"angeboteSlider"}
                          data-plasmic-override={overrides.angeboteSlider}
                          {...child$Props}
                        >
                          {(_par =>
                            !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                            (() => {
                              try {
                                return $ctx.produkte.data.products.edges;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return [];
                                }
                                throw e;
                              }
                            })()
                          ).map((__plasmic_item_0, __plasmic_idx_0) => {
                            const currentItem = __plasmic_item_0;
                            const currentIndex = __plasmic_idx_0;
                            return (
                              <ProduktKarte
                                className={classNames(
                                  "__wab_instance",
                                  sty.produktKarte___5VLnv
                                )}
                                key={currentIndex}
                                produkt={(() => {
                                  try {
                                    return currentItem.node;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return undefined;
                                    }
                                    throw e;
                                  }
                                })()}
                              />
                            );
                          })}
                        </SliderWrapper>
                      );
                    })()
                  }
                </DataCtxReader__>
              </GraphqlFetcher>
            </Stack__>
            <Stack__
              as={"section"}
              hasGap={true}
              className={classNames(projectcss.all, sty.section__xv7S)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__d05Ms
                )}
              >
                {"Sparen mit Paketangeboten"}
              </div>
              <Stack__
                as={"div"}
                data-plasmic-name={"banner"}
                data-plasmic-override={overrides.banner}
                hasGap={true}
                className={classNames(projectcss.all, sty.banner)}
              >
                <div
                  data-plasmic-name={"paketangebot"}
                  data-plasmic-override={overrides.paketangebot}
                  className={classNames(projectcss.all, sty.paketangebot)}
                >
                  <Stack__
                    as={"div"}
                    data-plasmic-name={"content43"}
                    data-plasmic-override={overrides.content43}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.content43)}
                  >
                    {false ? (
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__d7AtF
                        )}
                      >
                        {"Convenient & Save \nLiving Space"}
                      </div>
                    ) : null}
                    <Stack__
                      as={"div"}
                      data-plasmic-name={"content46"}
                      data-plasmic-override={overrides.content46}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.content46)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__i4794
                        )}
                      >
                        {"Smart-Home-Klima"}
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__ye3S9
                        )}
                      >
                        {"Zusammenpassende Komponente\nmit Montagesystem"}
                      </div>
                    </Stack__>
                  </Stack__>
                  <PlasmicImg__
                    alt={""}
                    className={classNames(sty.img__fsvsp)}
                    displayHeight={"auto"}
                    displayMaxHeight={"none"}
                    displayMaxWidth={"100%"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={"auto"}
                    loading={"lazy"}
                    src={{
                      src: "/plasmic/ewl/images/img10.jpg",
                      fullWidth: 4095,
                      fullHeight: 2731,
                      aspectRatio: undefined
                    }}
                  />

                  <Stack__
                    as={"div"}
                    data-plasmic-name={"button3"}
                    data-plasmic-override={overrides.button3}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.button3)}
                  >
                    <div
                      data-plasmic-name={"buttonText"}
                      data-plasmic-override={overrides.buttonText}
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.buttonText
                      )}
                    >
                      {"JETZT SHOPPEN"}
                    </div>
                  </Stack__>
                </div>
                <div
                  data-plasmic-name={"paketangebot2"}
                  data-plasmic-override={overrides.paketangebot2}
                  className={classNames(projectcss.all, sty.paketangebot2)}
                >
                  <Stack__
                    as={"div"}
                    data-plasmic-name={"content48"}
                    data-plasmic-override={overrides.content48}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.content48)}
                  >
                    {false ? (
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__dfhNq
                        )}
                      >
                        {"Convenient & Save \nLiving Space"}
                      </div>
                    ) : null}
                    <Stack__
                      as={"div"}
                      data-plasmic-name={"content49"}
                      data-plasmic-override={overrides.content49}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.content49)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__yBRiD
                        )}
                      >
                        {"Smart-Home-Klima"}
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__q8Aif
                        )}
                      >
                        {"Zusammenpassende Komponente\nmit Montagesystem"}
                      </div>
                    </Stack__>
                  </Stack__>
                  <PlasmicImg__
                    alt={""}
                    className={classNames(sty.img__om58G)}
                    displayHeight={"auto"}
                    displayMaxHeight={"none"}
                    displayMaxWidth={"100%"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={"auto"}
                    loading={"lazy"}
                    src={{
                      src: "/plasmic/ewl/images/img11.png",
                      fullWidth: 4096,
                      fullHeight: 2266,
                      aspectRatio: undefined
                    }}
                  />

                  <Stack__
                    as={"div"}
                    data-plasmic-name={"button4"}
                    data-plasmic-override={overrides.button4}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.button4)}
                  >
                    <div
                      data-plasmic-name={"buttonText2"}
                      data-plasmic-override={overrides.buttonText2}
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.buttonText2
                      )}
                    >
                      {"JETZT SHOPPEN"}
                    </div>
                  </Stack__>
                </div>
              </Stack__>
            </Stack__>
            <Stack__
              as={"section"}
              hasGap={true}
              className={classNames(projectcss.all, sty.section__xD8Dt)}
            >
              <div
                data-plasmic-name={"categories3"}
                data-plasmic-override={overrides.categories3}
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.categories3
                )}
              >
                {"\u00dcber uns"}
              </div>
              <div
                data-plasmic-name={"content40"}
                data-plasmic-override={overrides.content40}
                className={classNames(projectcss.all, sty.content40)}
              >
                <div
                  data-plasmic-name={"content41"}
                  data-plasmic-override={overrides.content41}
                  className={classNames(projectcss.all, sty.content41)}
                >
                  <Stack__
                    as={"div"}
                    data-plasmic-name={"content42"}
                    data-plasmic-override={overrides.content42}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.content42)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___3SuGx
                      )}
                    >
                      {"Machen Sie Ihr Zuhause smarter und komfortabler"}
                    </div>
                    <Stack__
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__euDcK)}
                    >
                      <Stack__
                        as={"div"}
                        data-plasmic-name={"content44"}
                        data-plasmic-override={overrides.content44}
                        hasGap={true}
                        className={classNames(projectcss.all, sty.content44)}
                      >
                        <div
                          data-plasmic-name={"avatar4"}
                          data-plasmic-override={overrides.avatar4}
                          className={classNames(projectcss.all, sty.avatar4)}
                        >
                          <div
                            data-plasmic-name={"avatar5"}
                            data-plasmic-override={overrides.avatar5}
                            className={classNames(projectcss.all, sty.avatar5)}
                          >
                            <div
                              data-plasmic-name={"img10"}
                              data-plasmic-override={overrides.img10}
                              className={classNames(projectcss.all, sty.img10)}
                            />
                          </div>
                          <div
                            data-plasmic-name={"avatar6"}
                            data-plasmic-override={overrides.avatar6}
                            className={classNames(projectcss.all, sty.avatar6)}
                          >
                            <div
                              data-plasmic-name={"img11"}
                              data-plasmic-override={overrides.img11}
                              className={classNames(projectcss.all, sty.img11)}
                            />
                          </div>
                          <div
                            data-plasmic-name={"avatar7"}
                            data-plasmic-override={overrides.avatar7}
                            className={classNames(projectcss.all, sty.avatar7)}
                          >
                            <div
                              data-plasmic-name={"img12"}
                              data-plasmic-override={overrides.img12}
                              className={classNames(projectcss.all, sty.img12)}
                            />
                          </div>
                        </div>
                        <Stack__
                          as={"div"}
                          data-plasmic-name={"content45"}
                          data-plasmic-override={overrides.content45}
                          hasGap={true}
                          className={classNames(projectcss.all, sty.content45)}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__fZnPu
                            )}
                          >
                            {"Vertraut von"}
                          </div>
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__xuX40
                            )}
                          >
                            {"1.000+ Kunden"}
                          </div>
                        </Stack__>
                      </Stack__>
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__hnDyD
                        )}
                      >
                        <Stack__
                          as={"div"}
                          data-plasmic-name={"content47"}
                          data-plasmic-override={overrides.content47}
                          hasGap={true}
                          className={classNames(projectcss.all, sty.content47)}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__tvlTm
                            )}
                          >
                            {"100+"}
                          </div>
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__gx7Xz
                            )}
                          >
                            {"Gl\u00fcckliche\nKunden"}
                          </div>
                        </Stack__>
                        <Stack__
                          as={"div"}
                          data-plasmic-name={"content50"}
                          data-plasmic-override={overrides.content50}
                          hasGap={true}
                          className={classNames(projectcss.all, sty.content50)}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__wVh8T
                            )}
                          >
                            {"250+"}
                          </div>
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__cwijf
                            )}
                          >
                            {"Hochwertige\nPodukte"}
                          </div>
                        </Stack__>
                        <Stack__
                          as={"div"}
                          data-plasmic-name={"content57"}
                          data-plasmic-override={overrides.content57}
                          hasGap={true}
                          className={classNames(projectcss.all, sty.content57)}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__uiF9H
                            )}
                          >
                            {"5"}
                          </div>
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__xa315
                            )}
                          >
                            {"Verkaufte\nPodukte"}
                          </div>
                        </Stack__>
                      </div>
                    </Stack__>
                  </Stack__>
                  <Stack__
                    as={"div"}
                    data-plasmic-name={"content51"}
                    data-plasmic-override={overrides.content51}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.content51)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__lAatp
                      )}
                    >
                      {"Wir bieten Ihnen\ndie beste Erfahrung"}
                    </div>
                    <Stack__
                      as={"div"}
                      data-plasmic-name={"content52"}
                      data-plasmic-override={overrides.content52}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.content52)}
                    >
                      <Stack__
                        as={"div"}
                        data-plasmic-name={"content53"}
                        data-plasmic-override={overrides.content53}
                        hasGap={true}
                        className={classNames(projectcss.all, sty.content53)}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__dY8PW
                          )}
                        >
                          {"Lore ipsum dolor sit"}
                        </div>
                      </Stack__>
                      <Stack__
                        as={"div"}
                        data-plasmic-name={"content54"}
                        data-plasmic-override={overrides.content54}
                        hasGap={true}
                        className={classNames(projectcss.all, sty.content54)}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__yHw3H
                          )}
                        >
                          {"Amet consectetur"}
                        </div>
                      </Stack__>
                      <Stack__
                        as={"div"}
                        data-plasmic-name={"content55"}
                        data-plasmic-override={overrides.content55}
                        hasGap={true}
                        className={classNames(projectcss.all, sty.content55)}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text___4EKkI
                          )}
                        >
                          {"Sed lacus convallis"}
                        </div>
                      </Stack__>
                      <Stack__
                        as={"div"}
                        data-plasmic-name={"content56"}
                        data-plasmic-override={overrides.content56}
                        hasGap={true}
                        className={classNames(projectcss.all, sty.content56)}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__tpbw1
                          )}
                        >
                          {"Tincidunt in tempor"}
                        </div>
                      </Stack__>
                    </Stack__>
                  </Stack__>
                </div>
                <div
                  data-plasmic-name={"img13"}
                  data-plasmic-override={overrides.img13}
                  className={classNames(projectcss.all, sty.img13)}
                />
              </div>
            </Stack__>
            <section className={classNames(projectcss.all, sty.section__a4Egy)}>
              <div
                data-plasmic-name={"backgroundColor"}
                data-plasmic-override={overrides.backgroundColor}
                className={classNames(projectcss.all, sty.backgroundColor)}
              />

              <Stack__
                as={"div"}
                data-plasmic-name={"content14"}
                data-plasmic-override={overrides.content14}
                hasGap={true}
                className={classNames(projectcss.all, sty.content14)}
              >
                <div
                  data-plasmic-name={"categories"}
                  data-plasmic-override={overrides.categories}
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.categories
                  )}
                >
                  {"Was unsere Kunden sagen"}
                </div>
                <Stack__
                  as={"div"}
                  data-plasmic-name={"content15"}
                  data-plasmic-override={overrides.content15}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.content15)}
                >
                  <Stack__
                    as={"div"}
                    data-plasmic-name={"content16"}
                    data-plasmic-override={overrides.content16}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.content16)}
                  >
                    <Stack__
                      as={"div"}
                      data-plasmic-name={"cardFeedback"}
                      data-plasmic-override={overrides.cardFeedback}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.cardFeedback)}
                    >
                      <div
                        data-plasmic-name={"avatar"}
                        data-plasmic-override={overrides.avatar}
                        className={classNames(projectcss.all, sty.avatar)}
                      >
                        <div
                          data-plasmic-name={"img"}
                          data-plasmic-override={overrides.img}
                          className={classNames(projectcss.all, sty.img)}
                        />
                      </div>
                      <Stack__
                        as={"div"}
                        data-plasmic-name={"content17"}
                        data-plasmic-override={overrides.content17}
                        hasGap={true}
                        className={classNames(projectcss.all, sty.content17)}
                      >
                        <div
                          data-plasmic-name={"content18"}
                          data-plasmic-override={overrides.content18}
                          className={classNames(projectcss.all, sty.content18)}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text___3Ur
                            )}
                          >
                            {"Anna Jean"}
                          </div>
                          {false ? (
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__rmRMw
                              )}
                            >
                              {"Graphic Designer"}
                            </div>
                          ) : null}
                        </div>
                        <Stack__
                          as={RatingIcon}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.svg___62Gbk
                          )}
                          role={"img"}
                        />
                      </Stack__>
                    </Stack__>
                    <Stack__
                      as={"div"}
                      data-plasmic-name={"cardFeedback2"}
                      data-plasmic-override={overrides.cardFeedback2}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.cardFeedback2)}
                    >
                      <div
                        data-plasmic-name={
                          "loremIpsumDolorSitAmetConsecteturSedLacusConvallisNuncSedNequeTinciduntInTemporNullaUtCommodoFaucibusConsecteturMaurisLoremIpsumDolorSitAmetConsecteturSedLacusConvallisNuncSedNeque"
                        }
                        data-plasmic-override={
                          overrides.loremIpsumDolorSitAmetConsecteturSedLacusConvallisNuncSedNequeTinciduntInTemporNullaUtCommodoFaucibusConsecteturMaurisLoremIpsumDolorSitAmetConsecteturSedLacusConvallisNuncSedNeque
                        }
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.loremIpsumDolorSitAmetConsecteturSedLacusConvallisNuncSedNequeTinciduntInTemporNullaUtCommodoFaucibusConsecteturMaurisLoremIpsumDolorSitAmetConsecteturSedLacusConvallisNuncSedNeque
                        )}
                      >
                        {
                          "Lorem ipsum dolor sit amet consectetur. Sed lacus convallis nunc sed neque. Tincidunt in tempor nulla ut commodo faucibus consectetur mauris. Lorem ipsum dolor sit amet consectetur. Sed lacus convallis nunc sed neque. "
                        }
                      </div>
                    </Stack__>
                  </Stack__>
                  <Stack__
                    as={"div"}
                    data-plasmic-name={"content19"}
                    data-plasmic-override={overrides.content19}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.content19)}
                  >
                    <Stack__
                      as={"div"}
                      data-plasmic-name={"cardFeedback3"}
                      data-plasmic-override={overrides.cardFeedback3}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.cardFeedback3)}
                    >
                      <div
                        data-plasmic-name={
                          "loremIpsumDolorSitAmetConsecteturSedLacusConvallisNuncSedNequeTinciduntInTemporNullaUtCommodoFaucibusConsecteturMaurisLoremIpsumDolorSitAmetConsecteturSedLacusConvallisNuncSedNeque2"
                        }
                        data-plasmic-override={
                          overrides.loremIpsumDolorSitAmetConsecteturSedLacusConvallisNuncSedNequeTinciduntInTemporNullaUtCommodoFaucibusConsecteturMaurisLoremIpsumDolorSitAmetConsecteturSedLacusConvallisNuncSedNeque2
                        }
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.loremIpsumDolorSitAmetConsecteturSedLacusConvallisNuncSedNequeTinciduntInTemporNullaUtCommodoFaucibusConsecteturMaurisLoremIpsumDolorSitAmetConsecteturSedLacusConvallisNuncSedNeque2
                        )}
                      >
                        {
                          "Lorem ipsum dolor sit amet consectetur. Sed lacus convallis nunc sed neque. Tincidunt in tempor nulla ut commodo faucibus consectetur mauris. Lorem ipsum dolor sit amet consectetur. Sed lacus convallis nunc sed neque. "
                        }
                      </div>
                    </Stack__>
                    <Stack__
                      as={"div"}
                      data-plasmic-name={"cardFeedback4"}
                      data-plasmic-override={overrides.cardFeedback4}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.cardFeedback4)}
                    >
                      <div
                        data-plasmic-name={"avatar2"}
                        data-plasmic-override={overrides.avatar2}
                        className={classNames(projectcss.all, sty.avatar2)}
                      >
                        <div
                          data-plasmic-name={"img2"}
                          data-plasmic-override={overrides.img2}
                          className={classNames(projectcss.all, sty.img2)}
                        />
                      </div>
                      <Stack__
                        as={"div"}
                        data-plasmic-name={"content20"}
                        data-plasmic-override={overrides.content20}
                        hasGap={true}
                        className={classNames(projectcss.all, sty.content20)}
                      >
                        <div
                          data-plasmic-name={"content21"}
                          data-plasmic-override={overrides.content21}
                          className={classNames(projectcss.all, sty.content21)}
                        >
                          <div
                            data-plasmic-name={"annaJean"}
                            data-plasmic-override={overrides.annaJean}
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.annaJean
                            )}
                          >
                            {"Theresa Webb"}
                          </div>
                          {false ? (
                            <div
                              data-plasmic-name={"graphicDesigner"}
                              data-plasmic-override={overrides.graphicDesigner}
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.graphicDesigner
                              )}
                            >
                              {"Teacher"}
                            </div>
                          ) : null}
                        </div>
                        <Stack__
                          as={RatingIcon}
                          hasGap={true}
                          className={classNames(projectcss.all, sty.svg__t5Ub)}
                          role={"img"}
                        />
                      </Stack__>
                    </Stack__>
                  </Stack__>
                  <Stack__
                    as={"div"}
                    data-plasmic-name={"content22"}
                    data-plasmic-override={overrides.content22}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.content22)}
                  >
                    <Stack__
                      as={"div"}
                      data-plasmic-name={"cardFeedback5"}
                      data-plasmic-override={overrides.cardFeedback5}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.cardFeedback5)}
                    >
                      <div
                        data-plasmic-name={"avatar3"}
                        data-plasmic-override={overrides.avatar3}
                        className={classNames(projectcss.all, sty.avatar3)}
                      >
                        <div
                          data-plasmic-name={"img3"}
                          data-plasmic-override={overrides.img3}
                          className={classNames(projectcss.all, sty.img3)}
                        />
                      </div>
                      <Stack__
                        as={"div"}
                        data-plasmic-name={"content23"}
                        data-plasmic-override={overrides.content23}
                        hasGap={true}
                        className={classNames(projectcss.all, sty.content23)}
                      >
                        <div
                          data-plasmic-name={"content24"}
                          data-plasmic-override={overrides.content24}
                          className={classNames(projectcss.all, sty.content24)}
                        >
                          <div
                            data-plasmic-name={"annaJean2"}
                            data-plasmic-override={overrides.annaJean2}
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.annaJean2
                            )}
                          >
                            {"Annette Black"}
                          </div>
                          {false ? (
                            <div
                              data-plasmic-name={"graphicDesigner2"}
                              data-plasmic-override={overrides.graphicDesigner2}
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.graphicDesigner2
                              )}
                            >
                              {"Doctor"}
                            </div>
                          ) : null}
                        </div>
                        <Stack__
                          as={RatingIcon}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.svg___5WfIk
                          )}
                          role={"img"}
                        />
                      </Stack__>
                    </Stack__>
                    <Stack__
                      as={"div"}
                      data-plasmic-name={"cardFeedback6"}
                      data-plasmic-override={overrides.cardFeedback6}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.cardFeedback6)}
                    >
                      <div
                        data-plasmic-name={
                          "loremIpsumDolorSitAmetConsecteturSedLacusConvallisNuncSedNequeTinciduntInTemporNullaUtCommodoFaucibusConsecteturMaurisLoremIpsumDolorSitAmetConsecteturSedLacusConvallisNuncSedNeque3"
                        }
                        data-plasmic-override={
                          overrides.loremIpsumDolorSitAmetConsecteturSedLacusConvallisNuncSedNequeTinciduntInTemporNullaUtCommodoFaucibusConsecteturMaurisLoremIpsumDolorSitAmetConsecteturSedLacusConvallisNuncSedNeque3
                        }
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.loremIpsumDolorSitAmetConsecteturSedLacusConvallisNuncSedNequeTinciduntInTemporNullaUtCommodoFaucibusConsecteturMaurisLoremIpsumDolorSitAmetConsecteturSedLacusConvallisNuncSedNeque3
                        )}
                      >
                        {
                          "Lorem ipsum dolor sit amet consectetur. Sed lacus convallis nunc sed neque. Tincidunt in tempor nulla ut commodo faucibus consectetur mauris. Lorem ipsum dolor sit amet consectetur. Sed lacus convallis nunc sed neque. "
                        }
                      </div>
                    </Stack__>
                  </Stack__>
                </Stack__>
              </Stack__>
            </section>
            <div
              data-plasmic-name={"blog"}
              data-plasmic-override={overrides.blog}
              className={classNames(projectcss.all, sty.blog)}
            >
              <Stack__
                as={"div"}
                data-plasmic-name={"content25"}
                data-plasmic-override={overrides.content25}
                hasGap={true}
                className={classNames(projectcss.all, sty.content25)}
              >
                <Stack__
                  as={"div"}
                  data-plasmic-name={"sections2"}
                  data-plasmic-override={overrides.sections2}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.sections2)}
                >
                  <div
                    data-plasmic-name={"categories2"}
                    data-plasmic-override={overrides.categories2}
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.categories2
                    )}
                  >
                    {"Blog"}
                  </div>
                  <Stack__
                    as={"div"}
                    data-plasmic-name={"icon9"}
                    data-plasmic-override={overrides.icon9}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.icon9)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__fkN4C)}
                    >
                      <div
                        data-plasmic-name={"angleSmall3"}
                        data-plasmic-override={overrides.angleSmall3}
                        className={classNames(projectcss.all, sty.angleSmall3)}
                      >
                        <PfeilIcon
                          className={classNames(
                            projectcss.all,
                            sty.svg___1LNlW
                          )}
                          role={"img"}
                        />
                      </div>
                    </div>
                    <div
                      className={classNames(projectcss.all, sty.freeBox__nbAsV)}
                    >
                      <div
                        data-plasmic-name={"angleSmall4"}
                        data-plasmic-override={overrides.angleSmall4}
                        className={classNames(projectcss.all, sty.angleSmall4)}
                      >
                        <PfeilIcon
                          className={classNames(projectcss.all, sty.svg__xsLim)}
                          role={"img"}
                        />
                      </div>
                    </div>
                  </Stack__>
                </Stack__>
                <Stack__
                  as={"div"}
                  data-plasmic-name={"cardBlog"}
                  data-plasmic-override={overrides.cardBlog}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.cardBlog)}
                >
                  <Stack__
                    as={"div"}
                    data-plasmic-name={"cardBlogLargeHome1"}
                    data-plasmic-override={overrides.cardBlogLargeHome1}
                    hasGap={true}
                    className={classNames(
                      projectcss.all,
                      sty.cardBlogLargeHome1
                    )}
                  >
                    <Stack__
                      as={"div"}
                      data-plasmic-name={"img4"}
                      data-plasmic-override={overrides.img4}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.img4)}
                    >
                      <Stack__
                        as={"div"}
                        data-plasmic-name={"content26"}
                        data-plasmic-override={overrides.content26}
                        hasGap={true}
                        className={classNames(projectcss.all, sty.content26)}
                      >
                        <Stack__
                          as={"div"}
                          data-plasmic-name={"content27"}
                          data-plasmic-override={overrides.content27}
                          hasGap={true}
                          className={classNames(projectcss.all, sty.content27)}
                        >
                          <Stack__
                            as={"div"}
                            data-plasmic-name={"date"}
                            data-plasmic-override={overrides.date}
                            hasGap={true}
                            className={classNames(projectcss.all, sty.date)}
                          >
                            <div
                              data-plasmic-name={"calendar"}
                              data-plasmic-override={overrides.calendar}
                              className={classNames(
                                projectcss.all,
                                sty.calendar
                              )}
                            >
                              <_01AlignCenter10Icon
                                className={classNames(
                                  projectcss.all,
                                  sty.svg___8HDlw
                                )}
                                role={"img"}
                              />
                            </div>
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__uGduG
                              )}
                            >
                              {"05 June 23"}
                            </div>
                          </Stack__>
                        </Stack__>
                        <Stack__
                          as={"div"}
                          data-plasmic-name={"content28"}
                          data-plasmic-override={overrides.content28}
                          hasGap={true}
                          className={classNames(projectcss.all, sty.content28)}
                        >
                          <Stack__
                            as={"div"}
                            data-plasmic-name={"name2"}
                            data-plasmic-override={overrides.name2}
                            hasGap={true}
                            className={classNames(projectcss.all, sty.name2)}
                          >
                            <div
                              data-plasmic-name={"user4"}
                              data-plasmic-override={overrides.user4}
                              className={classNames(projectcss.all, sty.user4)}
                            >
                              <_01AlignCenter11Icon
                                className={classNames(
                                  projectcss.all,
                                  sty.svg___8Jbey
                                )}
                                role={"img"}
                              />
                            </div>
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__xyWyx
                              )}
                            >
                              {"Admin"}
                            </div>
                          </Stack__>
                        </Stack__>
                      </Stack__>
                      <Stack__
                        as={"div"}
                        data-plasmic-name={"content29"}
                        data-plasmic-override={overrides.content29}
                        hasGap={true}
                        className={classNames(projectcss.all, sty.content29)}
                      >
                        <Stack__
                          as={"div"}
                          data-plasmic-name={"content30"}
                          data-plasmic-override={overrides.content30}
                          hasGap={true}
                          className={classNames(projectcss.all, sty.content30)}
                        >
                          <Stack__
                            as={"div"}
                            data-plasmic-name={"like"}
                            data-plasmic-override={overrides.like}
                            hasGap={true}
                            className={classNames(projectcss.all, sty.like)}
                          >
                            <div
                              data-plasmic-name={"like2"}
                              data-plasmic-override={overrides.like2}
                              className={classNames(projectcss.all, sty.like2)}
                            >
                              <_01AlignCenter12Icon
                                className={classNames(
                                  projectcss.all,
                                  sty.svg__x53Bp
                                )}
                                role={"img"}
                              />
                            </div>
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__g5Lan
                              )}
                            >
                              {"24"}
                            </div>
                          </Stack__>
                        </Stack__>
                        <Stack__
                          as={"div"}
                          data-plasmic-name={"content31"}
                          data-plasmic-override={overrides.content31}
                          hasGap={true}
                          className={classNames(projectcss.all, sty.content31)}
                        >
                          <Stack__
                            as={"div"}
                            data-plasmic-name={"view"}
                            data-plasmic-override={overrides.view}
                            hasGap={true}
                            className={classNames(projectcss.all, sty.view)}
                          >
                            <div
                              data-plasmic-name={"eye"}
                              data-plasmic-override={overrides.eye}
                              className={classNames(projectcss.all, sty.eye)}
                            >
                              <_01AlignCenter13Icon
                                className={classNames(
                                  projectcss.all,
                                  sty.svg__kLlrl
                                )}
                                role={"img"}
                              />
                            </div>
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__xJaQa
                              )}
                            >
                              {"121"}
                            </div>
                          </Stack__>
                        </Stack__>
                      </Stack__>
                      <Stack__
                        as={"div"}
                        data-plasmic-name={"button2"}
                        data-plasmic-override={overrides.button2}
                        hasGap={true}
                        className={classNames(projectcss.all, sty.button2)}
                      >
                        <div
                          data-plasmic-name={"readMore"}
                          data-plasmic-override={overrides.readMore}
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.readMore
                          )}
                        >
                          {"WEITERLESEN"}
                        </div>
                        <div
                          data-plasmic-name={"line"}
                          data-plasmic-override={overrides.line}
                          className={classNames(projectcss.all, sty.line)}
                        />
                      </Stack__>
                    </Stack__>
                    <Stack__
                      as={"div"}
                      data-plasmic-name={"content32"}
                      data-plasmic-override={overrides.content32}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.content32)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__xNfjG
                        )}
                      >
                        {"Tips"}
                      </div>
                      <div
                        data-plasmic-name={
                          "refreshYourInteriorArrangementStyleWith3BasicSteps"
                        }
                        data-plasmic-override={
                          overrides.refreshYourInteriorArrangementStyleWith3BasicSteps
                        }
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.refreshYourInteriorArrangementStyleWith3BasicSteps
                        )}
                      >
                        {
                          "Wie Sie die richtige Photovoltaikanlage f\u00fcr Ihr Zuhause ausw\u00e4hlen"
                        }
                      </div>
                    </Stack__>
                  </Stack__>
                  <Stack__
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__oecCj)}
                  >
                    <div
                      data-plasmic-name={"img6"}
                      data-plasmic-override={overrides.img6}
                      className={classNames(projectcss.all, sty.img6)}
                    >
                      <div
                        data-plasmic-name={"img7"}
                        data-plasmic-override={overrides.img7}
                        className={classNames(projectcss.all, sty.img7)}
                      />

                      <Stack__
                        as={"div"}
                        data-plasmic-name={"content33"}
                        data-plasmic-override={overrides.content33}
                        hasGap={true}
                        className={classNames(projectcss.all, sty.content33)}
                      >
                        <Stack__
                          as={"div"}
                          data-plasmic-name={"like3"}
                          data-plasmic-override={overrides.like3}
                          hasGap={true}
                          className={classNames(projectcss.all, sty.like3)}
                        >
                          <div
                            data-plasmic-name={"like4"}
                            data-plasmic-override={overrides.like4}
                            className={classNames(projectcss.all, sty.like4)}
                          >
                            <_01AlignCenter12Icon
                              className={classNames(
                                projectcss.all,
                                sty.svg__yuIPp
                              )}
                              role={"img"}
                            />
                          </div>
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text___9TX9A
                            )}
                          >
                            {"24"}
                          </div>
                        </Stack__>
                        <Stack__
                          as={"div"}
                          data-plasmic-name={"view2"}
                          data-plasmic-override={overrides.view2}
                          hasGap={true}
                          className={classNames(projectcss.all, sty.view2)}
                        >
                          <Stack__
                            as={"div"}
                            data-plasmic-name={"frame10029"}
                            data-plasmic-override={overrides.frame10029}
                            hasGap={true}
                            className={classNames(
                              projectcss.all,
                              sty.frame10029
                            )}
                          >
                            <div
                              data-plasmic-name={"eye2"}
                              data-plasmic-override={overrides.eye2}
                              className={classNames(projectcss.all, sty.eye2)}
                            >
                              <_01AlignCenter13Icon
                                className={classNames(
                                  projectcss.all,
                                  sty.svg__tuXVh
                                )}
                                role={"img"}
                              />
                            </div>
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__rRkgk
                              )}
                            >
                              {"121"}
                            </div>
                          </Stack__>
                        </Stack__>
                      </Stack__>
                      <Stack__
                        as={"div"}
                        data-plasmic-name={"content34"}
                        data-plasmic-override={overrides.content34}
                        hasGap={true}
                        className={classNames(projectcss.all, sty.content34)}
                      >
                        <Stack__
                          as={"div"}
                          data-plasmic-name={"date2"}
                          data-plasmic-override={overrides.date2}
                          hasGap={true}
                          className={classNames(projectcss.all, sty.date2)}
                        >
                          <Stack__
                            as={"div"}
                            data-plasmic-name={"date3"}
                            data-plasmic-override={overrides.date3}
                            hasGap={true}
                            className={classNames(projectcss.all, sty.date3)}
                          >
                            <div
                              data-plasmic-name={"calendar2"}
                              data-plasmic-override={overrides.calendar2}
                              className={classNames(
                                projectcss.all,
                                sty.calendar2
                              )}
                            >
                              <_01AlignCenter10Icon
                                className={classNames(
                                  projectcss.all,
                                  sty.svg__yy0Yn
                                )}
                                role={"img"}
                              />
                            </div>
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text___3OOkf
                              )}
                            >
                              {"05 June 23"}
                            </div>
                          </Stack__>
                        </Stack__>
                        <Stack__
                          as={"div"}
                          data-plasmic-name={"name3"}
                          data-plasmic-override={overrides.name3}
                          hasGap={true}
                          className={classNames(projectcss.all, sty.name3)}
                        >
                          <Stack__
                            as={"div"}
                            data-plasmic-name={"name4"}
                            data-plasmic-override={overrides.name4}
                            hasGap={true}
                            className={classNames(projectcss.all, sty.name4)}
                          >
                            <div
                              data-plasmic-name={"user2"}
                              data-plasmic-override={overrides.user2}
                              className={classNames(projectcss.all, sty.user2)}
                            >
                              <_01AlignCenter11Icon
                                className={classNames(
                                  projectcss.all,
                                  sty.svg__sWf50
                                )}
                                role={"img"}
                              />
                            </div>
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text___2VuRa
                              )}
                            >
                              {"Admin"}
                            </div>
                          </Stack__>
                        </Stack__>
                      </Stack__>
                    </div>
                    <Stack__
                      as={"div"}
                      data-plasmic-name={"content35"}
                      data-plasmic-override={overrides.content35}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.content35)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__ozvAu
                        )}
                      >
                        {"FAQs"}
                      </div>
                      <div
                        data-plasmic-name={
                          "isMinimalistFurnitureReallyCostlyAndMonotonous"
                        }
                        data-plasmic-override={
                          overrides.isMinimalistFurnitureReallyCostlyAndMonotonous
                        }
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.isMinimalistFurnitureReallyCostlyAndMonotonous
                        )}
                      >
                        {"Lorem ipsum dolor sit amet consectetu?"}
                      </div>
                    </Stack__>
                  </Stack__>
                  <Stack__
                    as={"div"}
                    data-plasmic-name={"frame10031"}
                    data-plasmic-override={overrides.frame10031}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.frame10031)}
                  >
                    <div
                      data-plasmic-name={"img8"}
                      data-plasmic-override={overrides.img8}
                      className={classNames(projectcss.all, sty.img8)}
                    >
                      <div
                        data-plasmic-name={"img9"}
                        data-plasmic-override={overrides.img9}
                        className={classNames(projectcss.all, sty.img9)}
                      />

                      <Stack__
                        as={"div"}
                        data-plasmic-name={"content36"}
                        data-plasmic-override={overrides.content36}
                        hasGap={true}
                        className={classNames(projectcss.all, sty.content36)}
                      >
                        <Stack__
                          as={"div"}
                          data-plasmic-name={"like5"}
                          data-plasmic-override={overrides.like5}
                          hasGap={true}
                          className={classNames(projectcss.all, sty.like5)}
                        >
                          <div
                            data-plasmic-name={"like6"}
                            data-plasmic-override={overrides.like6}
                            className={classNames(projectcss.all, sty.like6)}
                          >
                            <_01AlignCenter12Icon
                              className={classNames(
                                projectcss.all,
                                sty.svg__ggSgq
                              )}
                              role={"img"}
                            />
                          </div>
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__auQc8
                            )}
                          >
                            {"24"}
                          </div>
                        </Stack__>
                        <Stack__
                          as={"div"}
                          data-plasmic-name={"view3"}
                          data-plasmic-override={overrides.view3}
                          hasGap={true}
                          className={classNames(projectcss.all, sty.view3)}
                        >
                          <Stack__
                            as={"div"}
                            data-plasmic-name={"frame10030"}
                            data-plasmic-override={overrides.frame10030}
                            hasGap={true}
                            className={classNames(
                              projectcss.all,
                              sty.frame10030
                            )}
                          >
                            <div
                              data-plasmic-name={"eye3"}
                              data-plasmic-override={overrides.eye3}
                              className={classNames(projectcss.all, sty.eye3)}
                            >
                              <_01AlignCenter13Icon
                                className={classNames(
                                  projectcss.all,
                                  sty.svg__pvxuU
                                )}
                                role={"img"}
                              />
                            </div>
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__sresk
                              )}
                            >
                              {"121"}
                            </div>
                          </Stack__>
                        </Stack__>
                      </Stack__>
                      <Stack__
                        as={"div"}
                        data-plasmic-name={"content37"}
                        data-plasmic-override={overrides.content37}
                        hasGap={true}
                        className={classNames(projectcss.all, sty.content37)}
                      >
                        <Stack__
                          as={"div"}
                          data-plasmic-name={"date4"}
                          data-plasmic-override={overrides.date4}
                          hasGap={true}
                          className={classNames(projectcss.all, sty.date4)}
                        >
                          <Stack__
                            as={"div"}
                            data-plasmic-name={"date5"}
                            data-plasmic-override={overrides.date5}
                            hasGap={true}
                            className={classNames(projectcss.all, sty.date5)}
                          >
                            <div
                              data-plasmic-name={"calendar3"}
                              data-plasmic-override={overrides.calendar3}
                              className={classNames(
                                projectcss.all,
                                sty.calendar3
                              )}
                            >
                              <_01AlignCenter10Icon
                                className={classNames(
                                  projectcss.all,
                                  sty.svg___8Kvvd
                                )}
                                role={"img"}
                              />
                            </div>
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__buUWa
                              )}
                            >
                              {"05 June 23"}
                            </div>
                          </Stack__>
                        </Stack__>
                        <Stack__
                          as={"div"}
                          data-plasmic-name={"name5"}
                          data-plasmic-override={overrides.name5}
                          hasGap={true}
                          className={classNames(projectcss.all, sty.name5)}
                        >
                          <Stack__
                            as={"div"}
                            data-plasmic-name={"name6"}
                            data-plasmic-override={overrides.name6}
                            hasGap={true}
                            className={classNames(projectcss.all, sty.name6)}
                          >
                            <div
                              data-plasmic-name={"user3"}
                              data-plasmic-override={overrides.user3}
                              className={classNames(projectcss.all, sty.user3)}
                            >
                              <_01AlignCenter11Icon
                                className={classNames(
                                  projectcss.all,
                                  sty.svg___2JN4K
                                )}
                                role={"img"}
                              />
                            </div>
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__pXbjc
                              )}
                            >
                              {"Admin"}
                            </div>
                          </Stack__>
                        </Stack__>
                      </Stack__>
                    </div>
                    <Stack__
                      as={"div"}
                      data-plasmic-name={"content38"}
                      data-plasmic-override={overrides.content38}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.content38)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__k8La3
                        )}
                      >
                        {"FAQs"}
                      </div>
                      <div
                        data-plasmic-name={
                          "isMinimalistFurnitureReallyCostlyAndMonotonous2"
                        }
                        data-plasmic-override={
                          overrides.isMinimalistFurnitureReallyCostlyAndMonotonous2
                        }
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.isMinimalistFurnitureReallyCostlyAndMonotonous2
                        )}
                      >
                        {"Lorem ipsum dolor sit amet consectetu?"}
                      </div>
                    </Stack__>
                  </Stack__>
                </Stack__>
              </Stack__>
            </div>
            <Footer
              data-plasmic-name={"footer"}
              data-plasmic-override={overrides.footer}
              className={classNames("__wab_instance", sty.footer)}
            />
          </Stack__>
        ) : null}
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "header",
    "sliderCarousel",
    "service",
    "serviceHome1",
    "freeShipping6",
    "shopOnline",
    "everytimeEverywhere",
    "serviceHome2",
    "icon4",
    "freeShipping7",
    "freeShipping3",
    "cappedAt59PerOrder",
    "serviceHome3",
    "freeShipping4",
    "returnPolicy",
    "shopWithConfidence",
    "serviceHome4",
    "icon5",
    "freeShipping5",
    "paymentMethods",
    "convenientSafeFast",
    "kategorienSlider",
    "beliebteProdukteSlider",
    "raumeSlider",
    "angeboteSlider",
    "banner",
    "paketangebot",
    "content43",
    "content46",
    "button3",
    "buttonText",
    "paketangebot2",
    "content48",
    "content49",
    "button4",
    "buttonText2",
    "categories3",
    "content40",
    "content41",
    "content42",
    "content44",
    "avatar4",
    "avatar5",
    "img10",
    "avatar6",
    "img11",
    "avatar7",
    "img12",
    "content45",
    "content47",
    "content50",
    "content57",
    "content51",
    "content52",
    "content53",
    "content54",
    "content55",
    "content56",
    "img13",
    "backgroundColor",
    "content14",
    "categories",
    "content15",
    "content16",
    "cardFeedback",
    "avatar",
    "img",
    "content17",
    "content18",
    "cardFeedback2",
    "loremIpsumDolorSitAmetConsecteturSedLacusConvallisNuncSedNequeTinciduntInTemporNullaUtCommodoFaucibusConsecteturMaurisLoremIpsumDolorSitAmetConsecteturSedLacusConvallisNuncSedNeque",
    "content19",
    "cardFeedback3",
    "loremIpsumDolorSitAmetConsecteturSedLacusConvallisNuncSedNequeTinciduntInTemporNullaUtCommodoFaucibusConsecteturMaurisLoremIpsumDolorSitAmetConsecteturSedLacusConvallisNuncSedNeque2",
    "cardFeedback4",
    "avatar2",
    "img2",
    "content20",
    "content21",
    "annaJean",
    "graphicDesigner",
    "content22",
    "cardFeedback5",
    "avatar3",
    "img3",
    "content23",
    "content24",
    "annaJean2",
    "graphicDesigner2",
    "cardFeedback6",
    "loremIpsumDolorSitAmetConsecteturSedLacusConvallisNuncSedNequeTinciduntInTemporNullaUtCommodoFaucibusConsecteturMaurisLoremIpsumDolorSitAmetConsecteturSedLacusConvallisNuncSedNeque3",
    "blog",
    "content25",
    "sections2",
    "categories2",
    "icon9",
    "angleSmall3",
    "angleSmall4",
    "cardBlog",
    "cardBlogLargeHome1",
    "img4",
    "content26",
    "content27",
    "date",
    "calendar",
    "content28",
    "name2",
    "user4",
    "content29",
    "content30",
    "like",
    "like2",
    "content31",
    "view",
    "eye",
    "button2",
    "readMore",
    "line",
    "content32",
    "refreshYourInteriorArrangementStyleWith3BasicSteps",
    "img6",
    "img7",
    "content33",
    "like3",
    "like4",
    "view2",
    "frame10029",
    "eye2",
    "content34",
    "date2",
    "date3",
    "calendar2",
    "name3",
    "name4",
    "user2",
    "content35",
    "isMinimalistFurnitureReallyCostlyAndMonotonous",
    "frame10031",
    "img8",
    "img9",
    "content36",
    "like5",
    "like6",
    "view3",
    "frame10030",
    "eye3",
    "content37",
    "date4",
    "date5",
    "calendar3",
    "name5",
    "name6",
    "user3",
    "content38",
    "isMinimalistFurnitureReallyCostlyAndMonotonous2",
    "footer"
  ],
  header: ["header"],
  sliderCarousel: ["sliderCarousel"],
  service: [
    "service",
    "serviceHome1",
    "freeShipping6",
    "shopOnline",
    "everytimeEverywhere",
    "serviceHome2",
    "icon4",
    "freeShipping7",
    "freeShipping3",
    "cappedAt59PerOrder",
    "serviceHome3",
    "freeShipping4",
    "returnPolicy",
    "shopWithConfidence",
    "serviceHome4",
    "icon5",
    "freeShipping5",
    "paymentMethods",
    "convenientSafeFast"
  ],
  serviceHome1: [
    "serviceHome1",
    "freeShipping6",
    "shopOnline",
    "everytimeEverywhere"
  ],
  freeShipping6: ["freeShipping6", "shopOnline", "everytimeEverywhere"],
  shopOnline: ["shopOnline"],
  everytimeEverywhere: ["everytimeEverywhere"],
  serviceHome2: [
    "serviceHome2",
    "icon4",
    "freeShipping7",
    "freeShipping3",
    "cappedAt59PerOrder"
  ],
  icon4: ["icon4"],
  freeShipping7: ["freeShipping7", "freeShipping3", "cappedAt59PerOrder"],
  freeShipping3: ["freeShipping3"],
  cappedAt59PerOrder: ["cappedAt59PerOrder"],
  serviceHome3: [
    "serviceHome3",
    "freeShipping4",
    "returnPolicy",
    "shopWithConfidence"
  ],
  freeShipping4: ["freeShipping4", "returnPolicy", "shopWithConfidence"],
  returnPolicy: ["returnPolicy"],
  shopWithConfidence: ["shopWithConfidence"],
  serviceHome4: [
    "serviceHome4",
    "icon5",
    "freeShipping5",
    "paymentMethods",
    "convenientSafeFast"
  ],
  icon5: ["icon5"],
  freeShipping5: ["freeShipping5", "paymentMethods", "convenientSafeFast"],
  paymentMethods: ["paymentMethods"],
  convenientSafeFast: ["convenientSafeFast"],
  kategorienSlider: ["kategorienSlider"],
  beliebteProdukteSlider: ["beliebteProdukteSlider"],
  raumeSlider: ["raumeSlider"],
  angeboteSlider: ["angeboteSlider"],
  banner: [
    "banner",
    "paketangebot",
    "content43",
    "content46",
    "button3",
    "buttonText",
    "paketangebot2",
    "content48",
    "content49",
    "button4",
    "buttonText2"
  ],
  paketangebot: [
    "paketangebot",
    "content43",
    "content46",
    "button3",
    "buttonText"
  ],
  content43: ["content43", "content46"],
  content46: ["content46"],
  button3: ["button3", "buttonText"],
  buttonText: ["buttonText"],
  paketangebot2: [
    "paketangebot2",
    "content48",
    "content49",
    "button4",
    "buttonText2"
  ],
  content48: ["content48", "content49"],
  content49: ["content49"],
  button4: ["button4", "buttonText2"],
  buttonText2: ["buttonText2"],
  categories3: ["categories3"],
  content40: [
    "content40",
    "content41",
    "content42",
    "content44",
    "avatar4",
    "avatar5",
    "img10",
    "avatar6",
    "img11",
    "avatar7",
    "img12",
    "content45",
    "content47",
    "content50",
    "content57",
    "content51",
    "content52",
    "content53",
    "content54",
    "content55",
    "content56",
    "img13"
  ],
  content41: [
    "content41",
    "content42",
    "content44",
    "avatar4",
    "avatar5",
    "img10",
    "avatar6",
    "img11",
    "avatar7",
    "img12",
    "content45",
    "content47",
    "content50",
    "content57",
    "content51",
    "content52",
    "content53",
    "content54",
    "content55",
    "content56"
  ],
  content42: [
    "content42",
    "content44",
    "avatar4",
    "avatar5",
    "img10",
    "avatar6",
    "img11",
    "avatar7",
    "img12",
    "content45",
    "content47",
    "content50",
    "content57"
  ],
  content44: [
    "content44",
    "avatar4",
    "avatar5",
    "img10",
    "avatar6",
    "img11",
    "avatar7",
    "img12",
    "content45"
  ],
  avatar4: [
    "avatar4",
    "avatar5",
    "img10",
    "avatar6",
    "img11",
    "avatar7",
    "img12"
  ],
  avatar5: ["avatar5", "img10"],
  img10: ["img10"],
  avatar6: ["avatar6", "img11"],
  img11: ["img11"],
  avatar7: ["avatar7", "img12"],
  img12: ["img12"],
  content45: ["content45"],
  content47: ["content47"],
  content50: ["content50"],
  content57: ["content57"],
  content51: [
    "content51",
    "content52",
    "content53",
    "content54",
    "content55",
    "content56"
  ],
  content52: ["content52", "content53", "content54", "content55", "content56"],
  content53: ["content53"],
  content54: ["content54"],
  content55: ["content55"],
  content56: ["content56"],
  img13: ["img13"],
  backgroundColor: ["backgroundColor"],
  content14: [
    "content14",
    "categories",
    "content15",
    "content16",
    "cardFeedback",
    "avatar",
    "img",
    "content17",
    "content18",
    "cardFeedback2",
    "loremIpsumDolorSitAmetConsecteturSedLacusConvallisNuncSedNequeTinciduntInTemporNullaUtCommodoFaucibusConsecteturMaurisLoremIpsumDolorSitAmetConsecteturSedLacusConvallisNuncSedNeque",
    "content19",
    "cardFeedback3",
    "loremIpsumDolorSitAmetConsecteturSedLacusConvallisNuncSedNequeTinciduntInTemporNullaUtCommodoFaucibusConsecteturMaurisLoremIpsumDolorSitAmetConsecteturSedLacusConvallisNuncSedNeque2",
    "cardFeedback4",
    "avatar2",
    "img2",
    "content20",
    "content21",
    "annaJean",
    "graphicDesigner",
    "content22",
    "cardFeedback5",
    "avatar3",
    "img3",
    "content23",
    "content24",
    "annaJean2",
    "graphicDesigner2",
    "cardFeedback6",
    "loremIpsumDolorSitAmetConsecteturSedLacusConvallisNuncSedNequeTinciduntInTemporNullaUtCommodoFaucibusConsecteturMaurisLoremIpsumDolorSitAmetConsecteturSedLacusConvallisNuncSedNeque3"
  ],
  categories: ["categories"],
  content15: [
    "content15",
    "content16",
    "cardFeedback",
    "avatar",
    "img",
    "content17",
    "content18",
    "cardFeedback2",
    "loremIpsumDolorSitAmetConsecteturSedLacusConvallisNuncSedNequeTinciduntInTemporNullaUtCommodoFaucibusConsecteturMaurisLoremIpsumDolorSitAmetConsecteturSedLacusConvallisNuncSedNeque",
    "content19",
    "cardFeedback3",
    "loremIpsumDolorSitAmetConsecteturSedLacusConvallisNuncSedNequeTinciduntInTemporNullaUtCommodoFaucibusConsecteturMaurisLoremIpsumDolorSitAmetConsecteturSedLacusConvallisNuncSedNeque2",
    "cardFeedback4",
    "avatar2",
    "img2",
    "content20",
    "content21",
    "annaJean",
    "graphicDesigner",
    "content22",
    "cardFeedback5",
    "avatar3",
    "img3",
    "content23",
    "content24",
    "annaJean2",
    "graphicDesigner2",
    "cardFeedback6",
    "loremIpsumDolorSitAmetConsecteturSedLacusConvallisNuncSedNequeTinciduntInTemporNullaUtCommodoFaucibusConsecteturMaurisLoremIpsumDolorSitAmetConsecteturSedLacusConvallisNuncSedNeque3"
  ],
  content16: [
    "content16",
    "cardFeedback",
    "avatar",
    "img",
    "content17",
    "content18",
    "cardFeedback2",
    "loremIpsumDolorSitAmetConsecteturSedLacusConvallisNuncSedNequeTinciduntInTemporNullaUtCommodoFaucibusConsecteturMaurisLoremIpsumDolorSitAmetConsecteturSedLacusConvallisNuncSedNeque"
  ],
  cardFeedback: ["cardFeedback", "avatar", "img", "content17", "content18"],
  avatar: ["avatar", "img"],
  img: ["img"],
  content17: ["content17", "content18"],
  content18: ["content18"],
  cardFeedback2: [
    "cardFeedback2",
    "loremIpsumDolorSitAmetConsecteturSedLacusConvallisNuncSedNequeTinciduntInTemporNullaUtCommodoFaucibusConsecteturMaurisLoremIpsumDolorSitAmetConsecteturSedLacusConvallisNuncSedNeque"
  ],
  loremIpsumDolorSitAmetConsecteturSedLacusConvallisNuncSedNequeTinciduntInTemporNullaUtCommodoFaucibusConsecteturMaurisLoremIpsumDolorSitAmetConsecteturSedLacusConvallisNuncSedNeque:
    [
      "loremIpsumDolorSitAmetConsecteturSedLacusConvallisNuncSedNequeTinciduntInTemporNullaUtCommodoFaucibusConsecteturMaurisLoremIpsumDolorSitAmetConsecteturSedLacusConvallisNuncSedNeque"
    ],
  content19: [
    "content19",
    "cardFeedback3",
    "loremIpsumDolorSitAmetConsecteturSedLacusConvallisNuncSedNequeTinciduntInTemporNullaUtCommodoFaucibusConsecteturMaurisLoremIpsumDolorSitAmetConsecteturSedLacusConvallisNuncSedNeque2",
    "cardFeedback4",
    "avatar2",
    "img2",
    "content20",
    "content21",
    "annaJean",
    "graphicDesigner"
  ],
  cardFeedback3: [
    "cardFeedback3",
    "loremIpsumDolorSitAmetConsecteturSedLacusConvallisNuncSedNequeTinciduntInTemporNullaUtCommodoFaucibusConsecteturMaurisLoremIpsumDolorSitAmetConsecteturSedLacusConvallisNuncSedNeque2"
  ],
  loremIpsumDolorSitAmetConsecteturSedLacusConvallisNuncSedNequeTinciduntInTemporNullaUtCommodoFaucibusConsecteturMaurisLoremIpsumDolorSitAmetConsecteturSedLacusConvallisNuncSedNeque2:
    [
      "loremIpsumDolorSitAmetConsecteturSedLacusConvallisNuncSedNequeTinciduntInTemporNullaUtCommodoFaucibusConsecteturMaurisLoremIpsumDolorSitAmetConsecteturSedLacusConvallisNuncSedNeque2"
    ],
  cardFeedback4: [
    "cardFeedback4",
    "avatar2",
    "img2",
    "content20",
    "content21",
    "annaJean",
    "graphicDesigner"
  ],
  avatar2: ["avatar2", "img2"],
  img2: ["img2"],
  content20: ["content20", "content21", "annaJean", "graphicDesigner"],
  content21: ["content21", "annaJean", "graphicDesigner"],
  annaJean: ["annaJean"],
  graphicDesigner: ["graphicDesigner"],
  content22: [
    "content22",
    "cardFeedback5",
    "avatar3",
    "img3",
    "content23",
    "content24",
    "annaJean2",
    "graphicDesigner2",
    "cardFeedback6",
    "loremIpsumDolorSitAmetConsecteturSedLacusConvallisNuncSedNequeTinciduntInTemporNullaUtCommodoFaucibusConsecteturMaurisLoremIpsumDolorSitAmetConsecteturSedLacusConvallisNuncSedNeque3"
  ],
  cardFeedback5: [
    "cardFeedback5",
    "avatar3",
    "img3",
    "content23",
    "content24",
    "annaJean2",
    "graphicDesigner2"
  ],
  avatar3: ["avatar3", "img3"],
  img3: ["img3"],
  content23: ["content23", "content24", "annaJean2", "graphicDesigner2"],
  content24: ["content24", "annaJean2", "graphicDesigner2"],
  annaJean2: ["annaJean2"],
  graphicDesigner2: ["graphicDesigner2"],
  cardFeedback6: [
    "cardFeedback6",
    "loremIpsumDolorSitAmetConsecteturSedLacusConvallisNuncSedNequeTinciduntInTemporNullaUtCommodoFaucibusConsecteturMaurisLoremIpsumDolorSitAmetConsecteturSedLacusConvallisNuncSedNeque3"
  ],
  loremIpsumDolorSitAmetConsecteturSedLacusConvallisNuncSedNequeTinciduntInTemporNullaUtCommodoFaucibusConsecteturMaurisLoremIpsumDolorSitAmetConsecteturSedLacusConvallisNuncSedNeque3:
    [
      "loremIpsumDolorSitAmetConsecteturSedLacusConvallisNuncSedNequeTinciduntInTemporNullaUtCommodoFaucibusConsecteturMaurisLoremIpsumDolorSitAmetConsecteturSedLacusConvallisNuncSedNeque3"
    ],
  blog: [
    "blog",
    "content25",
    "sections2",
    "categories2",
    "icon9",
    "angleSmall3",
    "angleSmall4",
    "cardBlog",
    "cardBlogLargeHome1",
    "img4",
    "content26",
    "content27",
    "date",
    "calendar",
    "content28",
    "name2",
    "user4",
    "content29",
    "content30",
    "like",
    "like2",
    "content31",
    "view",
    "eye",
    "button2",
    "readMore",
    "line",
    "content32",
    "refreshYourInteriorArrangementStyleWith3BasicSteps",
    "img6",
    "img7",
    "content33",
    "like3",
    "like4",
    "view2",
    "frame10029",
    "eye2",
    "content34",
    "date2",
    "date3",
    "calendar2",
    "name3",
    "name4",
    "user2",
    "content35",
    "isMinimalistFurnitureReallyCostlyAndMonotonous",
    "frame10031",
    "img8",
    "img9",
    "content36",
    "like5",
    "like6",
    "view3",
    "frame10030",
    "eye3",
    "content37",
    "date4",
    "date5",
    "calendar3",
    "name5",
    "name6",
    "user3",
    "content38",
    "isMinimalistFurnitureReallyCostlyAndMonotonous2"
  ],
  content25: [
    "content25",
    "sections2",
    "categories2",
    "icon9",
    "angleSmall3",
    "angleSmall4",
    "cardBlog",
    "cardBlogLargeHome1",
    "img4",
    "content26",
    "content27",
    "date",
    "calendar",
    "content28",
    "name2",
    "user4",
    "content29",
    "content30",
    "like",
    "like2",
    "content31",
    "view",
    "eye",
    "button2",
    "readMore",
    "line",
    "content32",
    "refreshYourInteriorArrangementStyleWith3BasicSteps",
    "img6",
    "img7",
    "content33",
    "like3",
    "like4",
    "view2",
    "frame10029",
    "eye2",
    "content34",
    "date2",
    "date3",
    "calendar2",
    "name3",
    "name4",
    "user2",
    "content35",
    "isMinimalistFurnitureReallyCostlyAndMonotonous",
    "frame10031",
    "img8",
    "img9",
    "content36",
    "like5",
    "like6",
    "view3",
    "frame10030",
    "eye3",
    "content37",
    "date4",
    "date5",
    "calendar3",
    "name5",
    "name6",
    "user3",
    "content38",
    "isMinimalistFurnitureReallyCostlyAndMonotonous2"
  ],
  sections2: [
    "sections2",
    "categories2",
    "icon9",
    "angleSmall3",
    "angleSmall4"
  ],
  categories2: ["categories2"],
  icon9: ["icon9", "angleSmall3", "angleSmall4"],
  angleSmall3: ["angleSmall3"],
  angleSmall4: ["angleSmall4"],
  cardBlog: [
    "cardBlog",
    "cardBlogLargeHome1",
    "img4",
    "content26",
    "content27",
    "date",
    "calendar",
    "content28",
    "name2",
    "user4",
    "content29",
    "content30",
    "like",
    "like2",
    "content31",
    "view",
    "eye",
    "button2",
    "readMore",
    "line",
    "content32",
    "refreshYourInteriorArrangementStyleWith3BasicSteps",
    "img6",
    "img7",
    "content33",
    "like3",
    "like4",
    "view2",
    "frame10029",
    "eye2",
    "content34",
    "date2",
    "date3",
    "calendar2",
    "name3",
    "name4",
    "user2",
    "content35",
    "isMinimalistFurnitureReallyCostlyAndMonotonous",
    "frame10031",
    "img8",
    "img9",
    "content36",
    "like5",
    "like6",
    "view3",
    "frame10030",
    "eye3",
    "content37",
    "date4",
    "date5",
    "calendar3",
    "name5",
    "name6",
    "user3",
    "content38",
    "isMinimalistFurnitureReallyCostlyAndMonotonous2"
  ],
  cardBlogLargeHome1: [
    "cardBlogLargeHome1",
    "img4",
    "content26",
    "content27",
    "date",
    "calendar",
    "content28",
    "name2",
    "user4",
    "content29",
    "content30",
    "like",
    "like2",
    "content31",
    "view",
    "eye",
    "button2",
    "readMore",
    "line",
    "content32",
    "refreshYourInteriorArrangementStyleWith3BasicSteps"
  ],
  img4: [
    "img4",
    "content26",
    "content27",
    "date",
    "calendar",
    "content28",
    "name2",
    "user4",
    "content29",
    "content30",
    "like",
    "like2",
    "content31",
    "view",
    "eye",
    "button2",
    "readMore",
    "line"
  ],
  content26: [
    "content26",
    "content27",
    "date",
    "calendar",
    "content28",
    "name2",
    "user4"
  ],
  content27: ["content27", "date", "calendar"],
  date: ["date", "calendar"],
  calendar: ["calendar"],
  content28: ["content28", "name2", "user4"],
  name2: ["name2", "user4"],
  user4: ["user4"],
  content29: [
    "content29",
    "content30",
    "like",
    "like2",
    "content31",
    "view",
    "eye"
  ],
  content30: ["content30", "like", "like2"],
  like: ["like", "like2"],
  like2: ["like2"],
  content31: ["content31", "view", "eye"],
  view: ["view", "eye"],
  eye: ["eye"],
  button2: ["button2", "readMore", "line"],
  readMore: ["readMore"],
  line: ["line"],
  content32: [
    "content32",
    "refreshYourInteriorArrangementStyleWith3BasicSteps"
  ],
  refreshYourInteriorArrangementStyleWith3BasicSteps: [
    "refreshYourInteriorArrangementStyleWith3BasicSteps"
  ],
  img6: [
    "img6",
    "img7",
    "content33",
    "like3",
    "like4",
    "view2",
    "frame10029",
    "eye2",
    "content34",
    "date2",
    "date3",
    "calendar2",
    "name3",
    "name4",
    "user2"
  ],
  img7: ["img7"],
  content33: ["content33", "like3", "like4", "view2", "frame10029", "eye2"],
  like3: ["like3", "like4"],
  like4: ["like4"],
  view2: ["view2", "frame10029", "eye2"],
  frame10029: ["frame10029", "eye2"],
  eye2: ["eye2"],
  content34: [
    "content34",
    "date2",
    "date3",
    "calendar2",
    "name3",
    "name4",
    "user2"
  ],
  date2: ["date2", "date3", "calendar2"],
  date3: ["date3", "calendar2"],
  calendar2: ["calendar2"],
  name3: ["name3", "name4", "user2"],
  name4: ["name4", "user2"],
  user2: ["user2"],
  content35: ["content35", "isMinimalistFurnitureReallyCostlyAndMonotonous"],
  isMinimalistFurnitureReallyCostlyAndMonotonous: [
    "isMinimalistFurnitureReallyCostlyAndMonotonous"
  ],
  frame10031: [
    "frame10031",
    "img8",
    "img9",
    "content36",
    "like5",
    "like6",
    "view3",
    "frame10030",
    "eye3",
    "content37",
    "date4",
    "date5",
    "calendar3",
    "name5",
    "name6",
    "user3",
    "content38",
    "isMinimalistFurnitureReallyCostlyAndMonotonous2"
  ],
  img8: [
    "img8",
    "img9",
    "content36",
    "like5",
    "like6",
    "view3",
    "frame10030",
    "eye3",
    "content37",
    "date4",
    "date5",
    "calendar3",
    "name5",
    "name6",
    "user3"
  ],
  img9: ["img9"],
  content36: ["content36", "like5", "like6", "view3", "frame10030", "eye3"],
  like5: ["like5", "like6"],
  like6: ["like6"],
  view3: ["view3", "frame10030", "eye3"],
  frame10030: ["frame10030", "eye3"],
  eye3: ["eye3"],
  content37: [
    "content37",
    "date4",
    "date5",
    "calendar3",
    "name5",
    "name6",
    "user3"
  ],
  date4: ["date4", "date5", "calendar3"],
  date5: ["date5", "calendar3"],
  calendar3: ["calendar3"],
  name5: ["name5", "name6", "user3"],
  name6: ["name6", "user3"],
  user3: ["user3"],
  content38: ["content38", "isMinimalistFurnitureReallyCostlyAndMonotonous2"],
  isMinimalistFurnitureReallyCostlyAndMonotonous2: [
    "isMinimalistFurnitureReallyCostlyAndMonotonous2"
  ],
  footer: ["footer"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  header: typeof Header;
  sliderCarousel: typeof SliderWrapper;
  service: "div";
  serviceHome1: "div";
  freeShipping6: "div";
  shopOnline: "div";
  everytimeEverywhere: "div";
  serviceHome2: "div";
  icon4: "div";
  freeShipping7: "div";
  freeShipping3: "div";
  cappedAt59PerOrder: "div";
  serviceHome3: "div";
  freeShipping4: "div";
  returnPolicy: "div";
  shopWithConfidence: "div";
  serviceHome4: "div";
  icon5: "div";
  freeShipping5: "div";
  paymentMethods: "div";
  convenientSafeFast: "div";
  kategorienSlider: typeof SliderWrapper;
  beliebteProdukteSlider: typeof SliderWrapper;
  raumeSlider: typeof SliderWrapper;
  angeboteSlider: typeof SliderWrapper;
  banner: "div";
  paketangebot: "div";
  content43: "div";
  content46: "div";
  button3: "div";
  buttonText: "div";
  paketangebot2: "div";
  content48: "div";
  content49: "div";
  button4: "div";
  buttonText2: "div";
  categories3: "div";
  content40: "div";
  content41: "div";
  content42: "div";
  content44: "div";
  avatar4: "div";
  avatar5: "div";
  img10: "div";
  avatar6: "div";
  img11: "div";
  avatar7: "div";
  img12: "div";
  content45: "div";
  content47: "div";
  content50: "div";
  content57: "div";
  content51: "div";
  content52: "div";
  content53: "div";
  content54: "div";
  content55: "div";
  content56: "div";
  img13: "div";
  backgroundColor: "div";
  content14: "div";
  categories: "div";
  content15: "div";
  content16: "div";
  cardFeedback: "div";
  avatar: "div";
  img: "div";
  content17: "div";
  content18: "div";
  cardFeedback2: "div";
  loremIpsumDolorSitAmetConsecteturSedLacusConvallisNuncSedNequeTinciduntInTemporNullaUtCommodoFaucibusConsecteturMaurisLoremIpsumDolorSitAmetConsecteturSedLacusConvallisNuncSedNeque: "div";
  content19: "div";
  cardFeedback3: "div";
  loremIpsumDolorSitAmetConsecteturSedLacusConvallisNuncSedNequeTinciduntInTemporNullaUtCommodoFaucibusConsecteturMaurisLoremIpsumDolorSitAmetConsecteturSedLacusConvallisNuncSedNeque2: "div";
  cardFeedback4: "div";
  avatar2: "div";
  img2: "div";
  content20: "div";
  content21: "div";
  annaJean: "div";
  graphicDesigner: "div";
  content22: "div";
  cardFeedback5: "div";
  avatar3: "div";
  img3: "div";
  content23: "div";
  content24: "div";
  annaJean2: "div";
  graphicDesigner2: "div";
  cardFeedback6: "div";
  loremIpsumDolorSitAmetConsecteturSedLacusConvallisNuncSedNequeTinciduntInTemporNullaUtCommodoFaucibusConsecteturMaurisLoremIpsumDolorSitAmetConsecteturSedLacusConvallisNuncSedNeque3: "div";
  blog: "div";
  content25: "div";
  sections2: "div";
  categories2: "div";
  icon9: "div";
  angleSmall3: "div";
  angleSmall4: "div";
  cardBlog: "div";
  cardBlogLargeHome1: "div";
  img4: "div";
  content26: "div";
  content27: "div";
  date: "div";
  calendar: "div";
  content28: "div";
  name2: "div";
  user4: "div";
  content29: "div";
  content30: "div";
  like: "div";
  like2: "div";
  content31: "div";
  view: "div";
  eye: "div";
  button2: "div";
  readMore: "div";
  line: "div";
  content32: "div";
  refreshYourInteriorArrangementStyleWith3BasicSteps: "div";
  img6: "div";
  img7: "div";
  content33: "div";
  like3: "div";
  like4: "div";
  view2: "div";
  frame10029: "div";
  eye2: "div";
  content34: "div";
  date2: "div";
  date3: "div";
  calendar2: "div";
  name3: "div";
  name4: "div";
  user2: "div";
  content35: "div";
  isMinimalistFurnitureReallyCostlyAndMonotonous: "div";
  frame10031: "div";
  img8: "div";
  img9: "div";
  content36: "div";
  like5: "div";
  like6: "div";
  view3: "div";
  frame10030: "div";
  eye3: "div";
  content37: "div";
  date4: "div";
  date5: "div";
  calendar3: "div";
  name5: "div";
  name6: "div";
  user3: "div";
  content38: "div";
  isMinimalistFurnitureReallyCostlyAndMonotonous2: "div";
  footer: typeof Footer;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicHomepage__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicHomepage__VariantsArgs;
    args?: PlasmicHomepage__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicHomepage__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicHomepage__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicHomepage__ArgProps,
          internalVariantPropNames: PlasmicHomepage__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicHomepage__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHomepage";
  } else {
    func.displayName = `PlasmicHomepage.${nodeName}`;
  }
  return func;
}

export const PlasmicHomepage = Object.assign(
  // Top-level PlasmicHomepage renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    header: makeNodeComponent("header"),
    sliderCarousel: makeNodeComponent("sliderCarousel"),
    service: makeNodeComponent("service"),
    serviceHome1: makeNodeComponent("serviceHome1"),
    freeShipping6: makeNodeComponent("freeShipping6"),
    shopOnline: makeNodeComponent("shopOnline"),
    everytimeEverywhere: makeNodeComponent("everytimeEverywhere"),
    serviceHome2: makeNodeComponent("serviceHome2"),
    icon4: makeNodeComponent("icon4"),
    freeShipping7: makeNodeComponent("freeShipping7"),
    freeShipping3: makeNodeComponent("freeShipping3"),
    cappedAt59PerOrder: makeNodeComponent("cappedAt59PerOrder"),
    serviceHome3: makeNodeComponent("serviceHome3"),
    freeShipping4: makeNodeComponent("freeShipping4"),
    returnPolicy: makeNodeComponent("returnPolicy"),
    shopWithConfidence: makeNodeComponent("shopWithConfidence"),
    serviceHome4: makeNodeComponent("serviceHome4"),
    icon5: makeNodeComponent("icon5"),
    freeShipping5: makeNodeComponent("freeShipping5"),
    paymentMethods: makeNodeComponent("paymentMethods"),
    convenientSafeFast: makeNodeComponent("convenientSafeFast"),
    kategorienSlider: makeNodeComponent("kategorienSlider"),
    beliebteProdukteSlider: makeNodeComponent("beliebteProdukteSlider"),
    raumeSlider: makeNodeComponent("raumeSlider"),
    angeboteSlider: makeNodeComponent("angeboteSlider"),
    banner: makeNodeComponent("banner"),
    paketangebot: makeNodeComponent("paketangebot"),
    content43: makeNodeComponent("content43"),
    content46: makeNodeComponent("content46"),
    button3: makeNodeComponent("button3"),
    buttonText: makeNodeComponent("buttonText"),
    paketangebot2: makeNodeComponent("paketangebot2"),
    content48: makeNodeComponent("content48"),
    content49: makeNodeComponent("content49"),
    button4: makeNodeComponent("button4"),
    buttonText2: makeNodeComponent("buttonText2"),
    categories3: makeNodeComponent("categories3"),
    content40: makeNodeComponent("content40"),
    content41: makeNodeComponent("content41"),
    content42: makeNodeComponent("content42"),
    content44: makeNodeComponent("content44"),
    avatar4: makeNodeComponent("avatar4"),
    avatar5: makeNodeComponent("avatar5"),
    img10: makeNodeComponent("img10"),
    avatar6: makeNodeComponent("avatar6"),
    img11: makeNodeComponent("img11"),
    avatar7: makeNodeComponent("avatar7"),
    img12: makeNodeComponent("img12"),
    content45: makeNodeComponent("content45"),
    content47: makeNodeComponent("content47"),
    content50: makeNodeComponent("content50"),
    content57: makeNodeComponent("content57"),
    content51: makeNodeComponent("content51"),
    content52: makeNodeComponent("content52"),
    content53: makeNodeComponent("content53"),
    content54: makeNodeComponent("content54"),
    content55: makeNodeComponent("content55"),
    content56: makeNodeComponent("content56"),
    img13: makeNodeComponent("img13"),
    backgroundColor: makeNodeComponent("backgroundColor"),
    content14: makeNodeComponent("content14"),
    categories: makeNodeComponent("categories"),
    content15: makeNodeComponent("content15"),
    content16: makeNodeComponent("content16"),
    cardFeedback: makeNodeComponent("cardFeedback"),
    avatar: makeNodeComponent("avatar"),
    img: makeNodeComponent("img"),
    content17: makeNodeComponent("content17"),
    content18: makeNodeComponent("content18"),
    cardFeedback2: makeNodeComponent("cardFeedback2"),
    loremIpsumDolorSitAmetConsecteturSedLacusConvallisNuncSedNequeTinciduntInTemporNullaUtCommodoFaucibusConsecteturMaurisLoremIpsumDolorSitAmetConsecteturSedLacusConvallisNuncSedNeque:
      makeNodeComponent(
        "loremIpsumDolorSitAmetConsecteturSedLacusConvallisNuncSedNequeTinciduntInTemporNullaUtCommodoFaucibusConsecteturMaurisLoremIpsumDolorSitAmetConsecteturSedLacusConvallisNuncSedNeque"
      ),
    content19: makeNodeComponent("content19"),
    cardFeedback3: makeNodeComponent("cardFeedback3"),
    loremIpsumDolorSitAmetConsecteturSedLacusConvallisNuncSedNequeTinciduntInTemporNullaUtCommodoFaucibusConsecteturMaurisLoremIpsumDolorSitAmetConsecteturSedLacusConvallisNuncSedNeque2:
      makeNodeComponent(
        "loremIpsumDolorSitAmetConsecteturSedLacusConvallisNuncSedNequeTinciduntInTemporNullaUtCommodoFaucibusConsecteturMaurisLoremIpsumDolorSitAmetConsecteturSedLacusConvallisNuncSedNeque2"
      ),
    cardFeedback4: makeNodeComponent("cardFeedback4"),
    avatar2: makeNodeComponent("avatar2"),
    img2: makeNodeComponent("img2"),
    content20: makeNodeComponent("content20"),
    content21: makeNodeComponent("content21"),
    annaJean: makeNodeComponent("annaJean"),
    graphicDesigner: makeNodeComponent("graphicDesigner"),
    content22: makeNodeComponent("content22"),
    cardFeedback5: makeNodeComponent("cardFeedback5"),
    avatar3: makeNodeComponent("avatar3"),
    img3: makeNodeComponent("img3"),
    content23: makeNodeComponent("content23"),
    content24: makeNodeComponent("content24"),
    annaJean2: makeNodeComponent("annaJean2"),
    graphicDesigner2: makeNodeComponent("graphicDesigner2"),
    cardFeedback6: makeNodeComponent("cardFeedback6"),
    loremIpsumDolorSitAmetConsecteturSedLacusConvallisNuncSedNequeTinciduntInTemporNullaUtCommodoFaucibusConsecteturMaurisLoremIpsumDolorSitAmetConsecteturSedLacusConvallisNuncSedNeque3:
      makeNodeComponent(
        "loremIpsumDolorSitAmetConsecteturSedLacusConvallisNuncSedNequeTinciduntInTemporNullaUtCommodoFaucibusConsecteturMaurisLoremIpsumDolorSitAmetConsecteturSedLacusConvallisNuncSedNeque3"
      ),
    blog: makeNodeComponent("blog"),
    content25: makeNodeComponent("content25"),
    sections2: makeNodeComponent("sections2"),
    categories2: makeNodeComponent("categories2"),
    icon9: makeNodeComponent("icon9"),
    angleSmall3: makeNodeComponent("angleSmall3"),
    angleSmall4: makeNodeComponent("angleSmall4"),
    cardBlog: makeNodeComponent("cardBlog"),
    cardBlogLargeHome1: makeNodeComponent("cardBlogLargeHome1"),
    img4: makeNodeComponent("img4"),
    content26: makeNodeComponent("content26"),
    content27: makeNodeComponent("content27"),
    date: makeNodeComponent("date"),
    calendar: makeNodeComponent("calendar"),
    content28: makeNodeComponent("content28"),
    name2: makeNodeComponent("name2"),
    user4: makeNodeComponent("user4"),
    content29: makeNodeComponent("content29"),
    content30: makeNodeComponent("content30"),
    like: makeNodeComponent("like"),
    like2: makeNodeComponent("like2"),
    content31: makeNodeComponent("content31"),
    view: makeNodeComponent("view"),
    eye: makeNodeComponent("eye"),
    button2: makeNodeComponent("button2"),
    readMore: makeNodeComponent("readMore"),
    line: makeNodeComponent("line"),
    content32: makeNodeComponent("content32"),
    refreshYourInteriorArrangementStyleWith3BasicSteps: makeNodeComponent(
      "refreshYourInteriorArrangementStyleWith3BasicSteps"
    ),
    img6: makeNodeComponent("img6"),
    img7: makeNodeComponent("img7"),
    content33: makeNodeComponent("content33"),
    like3: makeNodeComponent("like3"),
    like4: makeNodeComponent("like4"),
    view2: makeNodeComponent("view2"),
    frame10029: makeNodeComponent("frame10029"),
    eye2: makeNodeComponent("eye2"),
    content34: makeNodeComponent("content34"),
    date2: makeNodeComponent("date2"),
    date3: makeNodeComponent("date3"),
    calendar2: makeNodeComponent("calendar2"),
    name3: makeNodeComponent("name3"),
    name4: makeNodeComponent("name4"),
    user2: makeNodeComponent("user2"),
    content35: makeNodeComponent("content35"),
    isMinimalistFurnitureReallyCostlyAndMonotonous: makeNodeComponent(
      "isMinimalistFurnitureReallyCostlyAndMonotonous"
    ),
    frame10031: makeNodeComponent("frame10031"),
    img8: makeNodeComponent("img8"),
    img9: makeNodeComponent("img9"),
    content36: makeNodeComponent("content36"),
    like5: makeNodeComponent("like5"),
    like6: makeNodeComponent("like6"),
    view3: makeNodeComponent("view3"),
    frame10030: makeNodeComponent("frame10030"),
    eye3: makeNodeComponent("eye3"),
    content37: makeNodeComponent("content37"),
    date4: makeNodeComponent("date4"),
    date5: makeNodeComponent("date5"),
    calendar3: makeNodeComponent("calendar3"),
    name5: makeNodeComponent("name5"),
    name6: makeNodeComponent("name6"),
    user3: makeNodeComponent("user3"),
    content38: makeNodeComponent("content38"),
    isMinimalistFurnitureReallyCostlyAndMonotonous2: makeNodeComponent(
      "isMinimalistFurnitureReallyCostlyAndMonotonous2"
    ),
    footer: makeNodeComponent("footer"),

    // Metadata about props expected for PlasmicHomepage
    internalVariantProps: PlasmicHomepage__VariantProps,
    internalArgProps: PlasmicHomepage__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicHomepage;
/* prettier-ignore-end */
