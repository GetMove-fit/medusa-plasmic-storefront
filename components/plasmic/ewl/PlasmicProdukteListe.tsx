// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: o7C61dL2AAD7uCRtgHRJ1p
// Component: t7czxYlbZr62

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import {
  executePlasmicDataOp,
  usePlasmicDataOp,
  usePlasmicInvalidate
} from "@plasmicapp/react-web/lib/data-sources";

import { ProductsProvider } from "../../ProductsProvider"; // plasmic-import: F8-jFo2zKmAJ/codeComponent
import KategorieFilter from "../../KategorieFilter"; // plasmic-import: BS2N7MBtUEMD/component
import { RangeSlider } from "../../RangeSlider"; // plasmic-import: YgYrKgRKd5_R/codeComponent
import { CompYgYrKgRKd5R as RangeSlider_Helpers } from "../../RangeSlider"; // plasmic-import: YgYrKgRKd5_R/codeComponentHelper
import AttributFilter from "../../AttributFilter"; // plasmic-import: oGtCQIp1hcVy/component
import ProduktKarte from "../../ProduktKarte"; // plasmic-import: kLfmrXKYIGkV/component
import { Fetcher } from "@plasmicapp/react-web/lib/data-sources";

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: o7C61dL2AAD7uCRtgHRJ1p/projectcss
import sty from "./PlasmicProdukteListe.module.css"; // plasmic-import: t7czxYlbZr62/css

createPlasmicElementProxy;

export type PlasmicProdukteListe__VariantMembers = {};
export type PlasmicProdukteListe__VariantsArgs = {};
type VariantPropType = keyof PlasmicProdukteListe__VariantsArgs;
export const PlasmicProdukteListe__VariantProps = new Array<VariantPropType>();

export type PlasmicProdukteListe__ArgsType = {
  onAuswahlChange?: (val: string) => void;
};
type ArgPropType = keyof PlasmicProdukteListe__ArgsType;
export const PlasmicProdukteListe__ArgProps = new Array<ArgPropType>(
  "onAuswahlChange"
);

export type PlasmicProdukteListe__OverridesType = {
  root?: Flex__<typeof ProductsProvider>;
  content?: Flex__<"div">;
  categories?: Flex__<"div">;
  content2?: Flex__<"div">;
  kategorieFilter?: Flex__<typeof KategorieFilter>;
  filterBy?: Flex__<"div">;
  content17?: Flex__<"div">;
  content18?: Flex__<"div">;
  button?: Flex__<"div">;
  content19?: Flex__<"div">;
  rangeSlider?: Flex__<typeof RangeSlider>;
  frame10149?: Flex__<"div">;
  attributFilter?: Flex__<typeof AttributFilter>;
  button2?: Flex__<"button">;
  produktKarte?: Flex__<typeof ProduktKarte>;
};

export interface DefaultProdukteListeProps {
  onAuswahlChange?: (val: string) => void;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicProdukteListe__RenderFunc(props: {
  variants: PlasmicProdukteListe__VariantsArgs;
  args: PlasmicProdukteListe__ArgsType;
  overrides: PlasmicProdukteListe__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  let [$queries, setDollarQueries] = React.useState<
    Record<string, ReturnType<typeof usePlasmicDataOp>>
  >({});
  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "rangeSlider.values",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("values", RangeSlider_Helpers)
      },
      {
        path: "attributFilters",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      },
      {
        path: "queryParams",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $ctx.query;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return {};
              }
              throw e;
            }
          })()
      },
      {
        path: "auswahl",
        type: "readonly",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "",

        onChangeProp: "onAuswahlChange"
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: $queries,
    $refs
  });

  const new$Queries: Record<string, ReturnType<typeof usePlasmicDataOp>> = {
    produkteQuery: usePlasmicDataOp(() => {
      return {
        sourceId: "myV3btqAbPcYeVBRQWDUmc",
        opId: "cff38bbf-8641-4150-9111-0099674065ba",
        userArgs: {
          params: [
            $state.queryParams.suchen,
            JSON.stringify(["attributes.*"]),
            (() => {
              const filters = [];
              if ($ctx.params.kategorie) {
                filters.push("categories.lvl0:" + $ctx.params.kategorie);
              }
              if ($ctx.params.unterkategorie) {
                filters.push("categories.lvl1:" + $ctx.params.unterkategorie);
              }
              const notFacets = [
                "suchen",
                "kategorie",
                "unterkategorie",
                "von",
                "bis"
              ];

              Object.keys($state.queryParams)
                .filter(p => !notFacets.includes(p))
                .forEach(p =>
                  filters.push(`attributes.${p}:${$state.queryParams[p]}`)
                );
              return JSON.stringify(filters);
            })(),
            (() => {
              if (!$ctx.query.von) return "";
              return JSON.stringify([
                "productPricing.priceRange.start.gross >= " + $ctx.query.von,
                "productPricing.priceRange.stop.gross <= " + $ctx.query.bis
              ]);
            })()
          ]
        },
        cacheKey: `plasmic.$.cff38bbf-8641-4150-9111-0099674065ba.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    unfilteredFacets: usePlasmicDataOp(() => {
      return {
        sourceId: "myV3btqAbPcYeVBRQWDUmc",
        opId: "78b88884-8087-49c3-b7bc-21a8ba3a35bd",
        userArgs: {
          params: [
            JSON.stringify([
              "categories.lvl0",
              "categories.lvl1",
              "productPricing.priceRange.start.gross",
              "productPricing.priceRange.stop.gross"
            ])
          ]
        },
        cacheKey: `plasmic.$.78b88884-8087-49c3-b7bc-21a8ba3a35bd.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    })
  };
  if (Object.keys(new$Queries).some(k => new$Queries[k] !== $queries[k])) {
    setDollarQueries(new$Queries);

    $queries = new$Queries;
  }

  return (
    <ProductsProvider
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      attributeParams={(() => {
        try {
          return $ctx.query;
        } catch (e) {
          if (
            e instanceof TypeError ||
            e?.plasmicType === "PlasmicUndefinedDataError"
          ) {
            return undefined;
          }
          throw e;
        }
      })()}
      className={classNames(
        "__wab_instance",
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root
      )}
      kategorie={(() => {
        try {
          return $ctx.params.kategorie[0];
        } catch (e) {
          if (
            e instanceof TypeError ||
            e?.plasmicType === "PlasmicUndefinedDataError"
          ) {
            return undefined;
          }
          throw e;
        }
      })()}
      suchBegriff={(() => {
        try {
          return $ctx.query.suchen;
        } catch (e) {
          if (
            e instanceof TypeError ||
            e?.plasmicType === "PlasmicUndefinedDataError"
          ) {
            return undefined;
          }
          throw e;
        }
      })()}
      unterkategorie={(() => {
        try {
          return $ctx.params.kategorie[1];
        } catch (e) {
          if (
            e instanceof TypeError ||
            e?.plasmicType === "PlasmicUndefinedDataError"
          ) {
            return undefined;
          }
          throw e;
        }
      })()}
    >
      <DataCtxReader__>
        {$ctx => (
          <Stack__
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__kkBeN)}
          >
            <Stack__
              as={"div"}
              data-plasmic-name={"content"}
              data-plasmic-override={overrides.content}
              hasGap={true}
              className={classNames(projectcss.all, sty.content)}
            >
              <Stack__
                as={"div"}
                data-plasmic-name={"categories"}
                data-plasmic-override={overrides.categories}
                hasGap={true}
                className={classNames(projectcss.all, sty.categories)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__hRo0B
                  )}
                >
                  {"Kategorien"}
                </div>
                <Stack__
                  as={"div"}
                  data-plasmic-name={"content2"}
                  data-plasmic-override={overrides.content2}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.content2)}
                >
                  {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
                    (() => {
                      try {
                        return $ctx.suche.kategorien;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return [];
                        }
                        throw e;
                      }
                    })()
                  ).map((__plasmic_item_0, __plasmic_idx_0) => {
                    const kategorie = __plasmic_item_0;
                    const currentIndex = __plasmic_idx_0;
                    return (
                      <KategorieFilter
                        data-plasmic-name={"kategorieFilter"}
                        data-plasmic-override={overrides.kategorieFilter}
                        className={classNames(
                          "__wab_instance",
                          sty.kategorieFilter
                        )}
                        kategorie={(() => {
                          try {
                            return kategorie;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return undefined;
                            }
                            throw e;
                          }
                        })()}
                        key={currentIndex}
                        offen={(() => {
                          try {
                            return kategorie.Name === $ctx.params.kategorie[0];
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return [];
                            }
                            throw e;
                          }
                        })()}
                      />
                    );
                  })}
                </Stack__>
              </Stack__>
              <Stack__
                as={"div"}
                data-plasmic-name={"filterBy"}
                data-plasmic-override={overrides.filterBy}
                hasGap={true}
                className={classNames(projectcss.all, sty.filterBy)}
              >
                <Stack__
                  as={"div"}
                  data-plasmic-name={"content17"}
                  data-plasmic-override={overrides.content17}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.content17)}
                >
                  <Stack__
                    as={"div"}
                    data-plasmic-name={"content18"}
                    data-plasmic-override={overrides.content18}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.content18)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__ybPdv
                      )}
                    >
                      {"Filtern"}
                    </div>
                    <Stack__
                      as={"div"}
                      data-plasmic-name={"button"}
                      data-plasmic-override={overrides.button}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.button)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__vSxiF
                        )}
                      >
                        {"Zur\u00fccksetzen"}
                      </div>
                    </Stack__>
                  </Stack__>
                  <Stack__
                    as={"div"}
                    data-plasmic-name={"content19"}
                    data-plasmic-override={overrides.content19}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.content19)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__pjc6Y
                      )}
                    >
                      {"Preis:"}
                    </div>
                    {(() => {
                      const child$Props = {
                        className: classNames(
                          "__wab_instance",
                          sty.rangeSlider
                        ),
                        initValues: (() => {
                          try {
                            return {
                              von:
                                $ctx.query.von === "" ? null : +$ctx.query.von,
                              bis:
                                $ctx.query.bis === "" ? null : +$ctx.query.bis
                            };
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return undefined;
                            }
                            throw e;
                          }
                        })(),
                        max: (() => {
                          try {
                            return $queries.unfilteredFacets.data.response
                              .facets_stats[
                              "productPricing.priceRange.stop.gross"
                            ].max;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return undefined;
                            }
                            throw e;
                          }
                        })(),
                        min: (() => {
                          try {
                            return $queries.unfilteredFacets.data.response
                              .facets_stats[
                              "productPricing.priceRange.start.gross"
                            ].min;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return undefined;
                            }
                            throw e;
                          }
                        })(),
                        onChange: generateStateOnChangePropForCodeComponents(
                          $state,
                          "values",
                          ["rangeSlider", "values"],
                          RangeSlider_Helpers
                        ),
                        values: generateStateValueProp($state, [
                          "rangeSlider",
                          "values"
                        ])
                      };
                      initializeCodeComponentStates(
                        $state,
                        [
                          {
                            name: "values",
                            plasmicStateName: "rangeSlider.values"
                          }
                        ],
                        [],
                        RangeSlider_Helpers ?? {},
                        child$Props
                      );

                      return (
                        <RangeSlider
                          data-plasmic-name={"rangeSlider"}
                          data-plasmic-override={overrides.rangeSlider}
                          {...child$Props}
                        />
                      );
                    })()}
                    <div
                      data-plasmic-name={"frame10149"}
                      data-plasmic-override={overrides.frame10149}
                      className={classNames(projectcss.all, sty.frame10149)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__h6Jf
                        )}
                      >
                        <React.Fragment>
                          {(() => {
                            try {
                              return $state.rangeSlider.values.von + "\u20AC";
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return "0";
                              }
                              throw e;
                            }
                          })()}
                        </React.Fragment>
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__bS7DS
                        )}
                      >
                        <React.Fragment>
                          {(() => {
                            try {
                              return $state.rangeSlider.values.bis + "\u20AC";
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return "100";
                              }
                              throw e;
                            }
                          })()}
                        </React.Fragment>
                      </div>
                    </div>
                  </Stack__>
                  {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
                    (() => {
                      try {
                        return Object.entries(
                          $queries.produkteQuery.data.response.facets
                        ).map(([Attribut, Optionen]) => ({
                          Attribut: Attribut.split(".")[1],
                          Optionen
                        }));
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return [];
                        }
                        throw e;
                      }
                    })()
                  ).map((__plasmic_item_0, __plasmic_idx_0) => {
                    const currentAttribut = __plasmic_item_0;
                    const currentIndex = __plasmic_idx_0;
                    return (
                      <AttributFilter
                        data-plasmic-name={"attributFilter"}
                        data-plasmic-override={overrides.attributFilter}
                        attribut={(() => {
                          try {
                            return currentAttribut.Attribut;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return undefined;
                            }
                            throw e;
                          }
                        })()}
                        auswahl={(() => {
                          try {
                            return $state.queryParams[currentAttribut.Attribut];
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return undefined;
                            }
                            throw e;
                          }
                        })()}
                        className={classNames(
                          "__wab_instance",
                          sty.attributFilter
                        )}
                        farbe={(() => {
                          try {
                            return currentAttribut.Attribut === "Farbe";
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return [];
                            }
                            throw e;
                          }
                        })()}
                        key={currentIndex}
                        offen={true}
                        onSelectionChanged={async value => {
                          const $steps = {};

                          $steps["updateQueryParams"] = true
                            ? (() => {
                                const actionArgs = {
                                  variable: {
                                    objRoot: $state,
                                    variablePath: ["queryParams"]
                                  },
                                  operation: 0,
                                  value: {
                                    ...$state.queryParams,
                                    [currentAttribut.Attribut]: value
                                  }
                                };
                                return (({
                                  variable,
                                  value,
                                  startIndex,
                                  deleteCount
                                }) => {
                                  if (!variable) {
                                    return;
                                  }
                                  const { objRoot, variablePath } = variable;

                                  $stateSet(objRoot, variablePath, value);
                                  return value;
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["updateQueryParams"] != null &&
                            typeof $steps["updateQueryParams"] === "object" &&
                            typeof $steps["updateQueryParams"].then ===
                              "function"
                          ) {
                            $steps["updateQueryParams"] = await $steps[
                              "updateQueryParams"
                            ];
                          }

                          $steps["runElementAction"] = true
                            ? (() => {
                                const actionArgs = {};
                                return (({ tplRef, action, args }) => {
                                  return $refs?.[tplRef]?.[action]?.(
                                    ...(args ?? [])
                                  );
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["runElementAction"] != null &&
                            typeof $steps["runElementAction"] === "object" &&
                            typeof $steps["runElementAction"].then ===
                              "function"
                          ) {
                            $steps["runElementAction"] = await $steps[
                              "runElementAction"
                            ];
                          }
                        }}
                        optionen={(() => {
                          try {
                            return currentAttribut.Optionen;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return undefined;
                            }
                            throw e;
                          }
                        })()}
                      />
                    );
                  })}
                </Stack__>
                <Stack__
                  as={"button"}
                  data-plasmic-name={"button2"}
                  data-plasmic-override={overrides.button2}
                  hasGap={true}
                  className={classNames(
                    projectcss.all,
                    projectcss.button,
                    sty.button2
                  )}
                  onClick={async event => {
                    const $steps = {};

                    $steps["goToPage"] = true
                      ? (() => {
                          const actionArgs = {
                            destination: (() => {
                              try {
                                return $$.setPageParams($state.attributFilters);
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return undefined;
                                }
                                throw e;
                              }
                            })()
                          };
                          return (({ destination }) => {
                            if (
                              typeof destination === "string" &&
                              destination.startsWith("#")
                            ) {
                              document
                                .getElementById(destination.substr(1))
                                .scrollIntoView({ behavior: "smooth" });
                            } else {
                              __nextRouter?.push(destination);
                            }
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["goToPage"] != null &&
                      typeof $steps["goToPage"] === "object" &&
                      typeof $steps["goToPage"].then === "function"
                    ) {
                      $steps["goToPage"] = await $steps["goToPage"];
                    }
                  }}
                  ref={ref => {
                    $refs["button2"] = ref;
                  }}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__bBtdo
                    )}
                  >
                    {"Anwenden"}
                  </div>
                </Stack__>
              </Stack__>
            </Stack__>
            <div className={classNames(projectcss.all, sty.freeBox__a2Qei)}>
              {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
                (() => {
                  try {
                    return $ctx.suche.results.hits;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return [];
                    }
                    throw e;
                  }
                })()
              ).map((__plasmic_item_0, __plasmic_idx_0) => {
                const produkt = __plasmic_item_0;
                const currentIndex = __plasmic_idx_0;
                return (
                  <ProduktKarte
                    data-plasmic-name={"produktKarte"}
                    data-plasmic-override={overrides.produktKarte}
                    className={classNames("__wab_instance", sty.produktKarte)}
                    key={currentIndex}
                    produkt={(() => {
                      try {
                        return produkt;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return undefined;
                        }
                        throw e;
                      }
                    })()}
                  />
                );
              })}
            </div>
          </Stack__>
        )}
      </DataCtxReader__>
    </ProductsProvider>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "content",
    "categories",
    "content2",
    "kategorieFilter",
    "filterBy",
    "content17",
    "content18",
    "button",
    "content19",
    "rangeSlider",
    "frame10149",
    "attributFilter",
    "button2",
    "produktKarte"
  ],
  content: [
    "content",
    "categories",
    "content2",
    "kategorieFilter",
    "filterBy",
    "content17",
    "content18",
    "button",
    "content19",
    "rangeSlider",
    "frame10149",
    "attributFilter",
    "button2"
  ],
  categories: ["categories", "content2", "kategorieFilter"],
  content2: ["content2", "kategorieFilter"],
  kategorieFilter: ["kategorieFilter"],
  filterBy: [
    "filterBy",
    "content17",
    "content18",
    "button",
    "content19",
    "rangeSlider",
    "frame10149",
    "attributFilter",
    "button2"
  ],
  content17: [
    "content17",
    "content18",
    "button",
    "content19",
    "rangeSlider",
    "frame10149",
    "attributFilter"
  ],
  content18: ["content18", "button"],
  button: ["button"],
  content19: ["content19", "rangeSlider", "frame10149"],
  rangeSlider: ["rangeSlider"],
  frame10149: ["frame10149"],
  attributFilter: ["attributFilter"],
  button2: ["button2"],
  produktKarte: ["produktKarte"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: typeof ProductsProvider;
  content: "div";
  categories: "div";
  content2: "div";
  kategorieFilter: typeof KategorieFilter;
  filterBy: "div";
  content17: "div";
  content18: "div";
  button: "div";
  content19: "div";
  rangeSlider: typeof RangeSlider;
  frame10149: "div";
  attributFilter: typeof AttributFilter;
  button2: "button";
  produktKarte: typeof ProduktKarte;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicProdukteListe__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicProdukteListe__VariantsArgs;
    args?: PlasmicProdukteListe__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicProdukteListe__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicProdukteListe__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicProdukteListe__ArgProps,
          internalVariantPropNames: PlasmicProdukteListe__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicProdukteListe__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicProdukteListe";
  } else {
    func.displayName = `PlasmicProdukteListe.${nodeName}`;
  }
  return func;
}

export const PlasmicProdukteListe = Object.assign(
  // Top-level PlasmicProdukteListe renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    content: makeNodeComponent("content"),
    categories: makeNodeComponent("categories"),
    content2: makeNodeComponent("content2"),
    kategorieFilter: makeNodeComponent("kategorieFilter"),
    filterBy: makeNodeComponent("filterBy"),
    content17: makeNodeComponent("content17"),
    content18: makeNodeComponent("content18"),
    button: makeNodeComponent("button"),
    content19: makeNodeComponent("content19"),
    rangeSlider: makeNodeComponent("rangeSlider"),
    frame10149: makeNodeComponent("frame10149"),
    attributFilter: makeNodeComponent("attributFilter"),
    button2: makeNodeComponent("button2"),
    produktKarte: makeNodeComponent("produktKarte"),

    // Metadata about props expected for PlasmicProdukteListe
    internalVariantProps: PlasmicProdukteListe__VariantProps,
    internalArgProps: PlasmicProdukteListe__ArgProps
  }
);

export default PlasmicProdukteListe;
/* prettier-ignore-end */
