// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: o7C61dL2AAD7uCRtgHRJ1p
// Component: Eo6oqQE8QIOm

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { GraphqlFetcher } from "@plasmicpkgs/plasmic-query";
import { SliderWrapper } from "@plasmicpkgs/react-slick";
import { sliderHelpers as SliderWrapper_Helpers } from "@plasmicpkgs/react-slick";
import KategorieKarte from "../../KategorieKarte"; // plasmic-import: Koc5L53D7S3j/component

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: o7C61dL2AAD7uCRtgHRJ1p/projectcss
import sty from "./PlasmicSliderAbschnitt.module.css"; // plasmic-import: Eo6oqQE8QIOm/css

import PfeilIcon from "./icons/PlasmicIcon__Pfeil"; // plasmic-import: QKSFoWVnjtFs/icon

createPlasmicElementProxy;

export type PlasmicSliderAbschnitt__VariantMembers = {};
export type PlasmicSliderAbschnitt__VariantsArgs = {};
type VariantPropType = keyof PlasmicSliderAbschnitt__VariantsArgs;
export const PlasmicSliderAbschnitt__VariantProps =
  new Array<VariantPropType>();

export type PlasmicSliderAbschnitt__ArgsType = {};
type ArgPropType = keyof PlasmicSliderAbschnitt__ArgsType;
export const PlasmicSliderAbschnitt__ArgProps = new Array<ArgPropType>();

export type PlasmicSliderAbschnitt__OverridesType = {
  root?: Flex__<"section">;
  h2?: Flex__<"h2">;
  graphQlFetcher?: Flex__<typeof GraphqlFetcher>;
  kategorienSlider?: Flex__<typeof SliderWrapper>;
};

export interface DefaultSliderAbschnittProps {
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicSliderAbschnitt__RenderFunc(props: {
  variants: PlasmicSliderAbschnitt__VariantsArgs;
  args: PlasmicSliderAbschnitt__ArgsType;
  overrides: PlasmicSliderAbschnitt__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "kategorienSlider.currentSlide",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 0,

        refName: "kategorienSlider",
        onMutate: generateOnMutateForSpec("currentSlide", SliderWrapper_Helpers)
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  return (
    <Stack__
      as={"section"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root
      )}
    >
      <div className={classNames(projectcss.all, sty.freeBox__uKll6)}>
        <h2
          data-plasmic-name={"h2"}
          data-plasmic-override={overrides.h2}
          className={classNames(
            projectcss.all,
            projectcss.h2,
            projectcss.__wab_text,
            sty.h2
          )}
        >
          {"Beliebte Produkte"}
        </h2>
        <Stack__
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox___1NcGk)}
        >
          <button
            className={classNames(
              projectcss.all,
              projectcss.button,
              sty.button__ubBj
            )}
            onClick={async event => {
              const $steps = {};

              $steps["updateKategorienSlider"] = true
                ? (() => {
                    const actionArgs = {
                      variable: {
                        objRoot: $state,
                        variablePath: ["kategorienSlider"]
                      },
                      operation: 3
                    };
                    return (({ variable, value, startIndex, deleteCount }) => {
                      if (!variable) {
                        return;
                      }
                      const { objRoot, variablePath } = variable;

                      const oldValue = $stateGet(objRoot, variablePath);
                      $stateSet(objRoot, variablePath, oldValue - 1);
                      return oldValue - 1;
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["updateKategorienSlider"] != null &&
                typeof $steps["updateKategorienSlider"] === "object" &&
                typeof $steps["updateKategorienSlider"].then === "function"
              ) {
                $steps["updateKategorienSlider"] = await $steps[
                  "updateKategorienSlider"
                ];
              }
            }}
          >
            <PfeilIcon
              className={classNames(projectcss.all, sty.svg__wcTY)}
              role={"img"}
            />
          </button>
          <button
            className={classNames(
              projectcss.all,
              projectcss.button,
              sty.button___4OOw
            )}
            onClick={async event => {
              const $steps = {};

              $steps["updateKategorienSliderCurrentSlide"] = true
                ? (() => {
                    const actionArgs = {
                      variable: {
                        objRoot: $state,
                        variablePath: ["kategorienSlider", "currentSlide"]
                      },
                      operation: 2
                    };
                    return (({ variable, value, startIndex, deleteCount }) => {
                      if (!variable) {
                        return;
                      }
                      const { objRoot, variablePath } = variable;

                      const oldValue = $stateGet(objRoot, variablePath);
                      $stateSet(objRoot, variablePath, oldValue + 1);
                      return oldValue + 1;
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["updateKategorienSliderCurrentSlide"] != null &&
                typeof $steps["updateKategorienSliderCurrentSlide"] ===
                  "object" &&
                typeof $steps["updateKategorienSliderCurrentSlide"].then ===
                  "function"
              ) {
                $steps["updateKategorienSliderCurrentSlide"] = await $steps[
                  "updateKategorienSliderCurrentSlide"
                ];
              }
            }}
          >
            <PfeilIcon
              className={classNames(projectcss.all, sty.svg__nds9)}
              role={"img"}
            />
          </button>
        </Stack__>
      </div>
      <GraphqlFetcher
        data-plasmic-name={"graphQlFetcher"}
        data-plasmic-override={overrides.graphQlFetcher}
        className={classNames("__wab_instance", sty.graphQlFetcher)}
        dataName={"kategorien"}
        errorDisplay={
          <DataCtxReader__>{$ctx => "Error fetching data"}</DataCtxReader__>
        }
        errorName={"fetchError"}
        loadingDisplay={null}
        method={"POST"}
        noLayout={false}
        query={{
          query:
            'query {\n  categories(first: 100) {\n    edges {\n      node {\n        id\n        name\n        products(channel: "default-channel") {\n          totalCount\n        }\n      }\n    }\n  }\n}',
          variables: {}
        }}
        url={"https://api.ewl.ryze-media.at/graphql/"}
      >
        <DataCtxReader__>
          {$ctx =>
            (() => {
              const child$Props = {
                adaptiveHeight: true,
                arrows: false,
                beforeChange: generateStateOnChangePropForCodeComponents(
                  $state,
                  "currentSlide",
                  ["kategorienSlider", "currentSlide"],
                  SliderWrapper_Helpers
                ),
                className: classNames("__wab_instance", sty.kategorienSlider),
                infinite: false,
                initialSlide: generateStateValueProp($state, [
                  "kategorienSlider",
                  "currentSlide"
                ]),
                ref: ref => {
                  $refs["kategorienSlider"] = ref;
                },
                sliderScopeClassName: sty["kategorienSlider__slider"]
              };
              initializeCodeComponentStates(
                $state,
                [
                  {
                    name: "currentSlide",
                    plasmicStateName: "kategorienSlider.currentSlide"
                  }
                ],
                [],
                SliderWrapper_Helpers ?? {},
                child$Props
              );

              return (
                <SliderWrapper
                  data-plasmic-name={"kategorienSlider"}
                  data-plasmic-override={overrides.kategorienSlider}
                  {...child$Props}
                >
                  <div
                    className={classNames(projectcss.all, sty.freeBox___4Fvpm)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__q0Wwy)}
                    >
                      <KategorieKarte
                        bild={{
                          src: "/plasmic/ewl/images/image4.png",
                          fullWidth: 392,
                          fullHeight: 264,
                          aspectRatio: undefined
                        }}
                        className={classNames(
                          "__wab_instance",
                          sty.kategorieKarte__fMvk
                        )}
                        name={"Heizung"}
                      />

                      <KategorieKarte
                        bild={{
                          src: "/plasmic/ewl/images/img3.png",
                          fullWidth: 1000,
                          fullHeight: 1000,
                          aspectRatio: undefined
                        }}
                        className={classNames(
                          "__wab_instance",
                          sty.kategorieKarte__abcZb
                        )}
                        name={"Solaranlagen"}
                      />

                      <KategorieKarte
                        bild={{
                          src: "/plasmic/ewl/images/img4.png",
                          fullWidth: 485,
                          fullHeight: 432,
                          aspectRatio: undefined
                        }}
                        className={classNames(
                          "__wab_instance",
                          sty.kategorieKarte___77Xf8
                        )}
                        name={"Klimaanlagen"}
                      />

                      <KategorieKarte
                        bild={{
                          src: "/plasmic/ewl/images/img5.png",
                          fullWidth: 1340,
                          fullHeight: 1340,
                          aspectRatio: undefined
                        }}
                        className={classNames(
                          "__wab_instance",
                          sty.kategorieKarte___6HJNi
                        )}
                        name={"Sanit\u00e4reinrichtung"}
                      />

                      <KategorieKarte
                        bild={{
                          src: "/plasmic/ewl/images/img6.png",
                          fullWidth: 1662,
                          fullHeight: 1092,
                          aspectRatio: undefined
                        }}
                        className={classNames(
                          "__wab_instance",
                          sty.kategorieKarte__jkoQ2
                        )}
                        name={"Badewannen"}
                      />

                      <KategorieKarte
                        bild={{
                          src: "/plasmic/ewl/images/img7.png",
                          fullWidth: 430,
                          fullHeight: 359,
                          aspectRatio: undefined
                        }}
                        className={classNames(
                          "__wab_instance",
                          sty.kategorieKarte__i0Mgo
                        )}
                        name={"L\u00fcftungstechnik"}
                      />
                    </div>
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__cauVz)}
                  >
                    <PlasmicImg__
                      alt={""}
                      className={classNames(sty.img___4SxdR)}
                      displayHeight={"auto"}
                      displayMaxHeight={"none"}
                      displayMaxWidth={"100%"}
                      displayMinHeight={"0"}
                      displayMinWidth={"0"}
                      displayWidth={"auto"}
                      src={
                        "https://static1.plasmic.app/components/react-slick/slide2.png"
                      }
                    />
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.freeBox___7NA87)}
                  >
                    <PlasmicImg__
                      alt={""}
                      className={classNames(sty.img__okfWn)}
                      displayHeight={"auto"}
                      displayMaxHeight={"none"}
                      displayMaxWidth={"100%"}
                      displayMinHeight={"0"}
                      displayMinWidth={"0"}
                      displayWidth={"auto"}
                      src={
                        "https://static1.plasmic.app/components/react-slick/slide3.png"
                      }
                    />
                  </div>
                </SliderWrapper>
              );
            })()
          }
        </DataCtxReader__>
      </GraphqlFetcher>
    </Stack__>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "h2", "graphQlFetcher", "kategorienSlider"],
  h2: ["h2"],
  graphQlFetcher: ["graphQlFetcher", "kategorienSlider"],
  kategorienSlider: ["kategorienSlider"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "section";
  h2: "h2";
  graphQlFetcher: typeof GraphqlFetcher;
  kategorienSlider: typeof SliderWrapper;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicSliderAbschnitt__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicSliderAbschnitt__VariantsArgs;
    args?: PlasmicSliderAbschnitt__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicSliderAbschnitt__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicSliderAbschnitt__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicSliderAbschnitt__ArgProps,
          internalVariantPropNames: PlasmicSliderAbschnitt__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicSliderAbschnitt__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicSliderAbschnitt";
  } else {
    func.displayName = `PlasmicSliderAbschnitt.${nodeName}`;
  }
  return func;
}

export const PlasmicSliderAbschnitt = Object.assign(
  // Top-level PlasmicSliderAbschnitt renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    h2: makeNodeComponent("h2"),
    graphQlFetcher: makeNodeComponent("graphQlFetcher"),
    kategorienSlider: makeNodeComponent("kategorienSlider"),

    // Metadata about props expected for PlasmicSliderAbschnitt
    internalVariantProps: PlasmicSliderAbschnitt__VariantProps,
    internalArgProps: PlasmicSliderAbschnitt__ArgProps
  }
);

export default PlasmicSliderAbschnitt;
/* prettier-ignore-end */
