// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: o7C61dL2AAD7uCRtgHRJ1p
// Component: 3U1jufZMReo6

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { DataFetcher } from "@plasmicpkgs/plasmic-query";

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: o7C61dL2AAD7uCRtgHRJ1p/projectcss
import sty from "./PlasmicBewertungen.module.css"; // plasmic-import: 3U1jufZMReo6/css

import StarIcon from "./icons/PlasmicIcon__Star"; // plasmic-import: zg-7U098KuTO/icon
import _01AlignCenter20Icon from "./icons/PlasmicIcon___01AlignCenter20"; // plasmic-import: YaTD69kJG-Ek/icon
import PlayIcon from "./icons/PlasmicIcon__Play"; // plasmic-import: ZpiSx0aYh5J1/icon
import _01AlignCenter12Icon from "./icons/PlasmicIcon___01AlignCenter12"; // plasmic-import: 2IoNue-HF4cl/icon
import _01AlignCenter17Icon from "./icons/PlasmicIcon___01AlignCenter17"; // plasmic-import: sKlPPttdXYuZ/icon

createPlasmicElementProxy;

export type PlasmicBewertungen__VariantMembers = {};
export type PlasmicBewertungen__VariantsArgs = {};
type VariantPropType = keyof PlasmicBewertungen__VariantsArgs;
export const PlasmicBewertungen__VariantProps = new Array<VariantPropType>();

export type PlasmicBewertungen__ArgsType = {
  produkt?: any;
};
type ArgPropType = keyof PlasmicBewertungen__ArgsType;
export const PlasmicBewertungen__ArgProps = new Array<ArgPropType>("produkt");

export type PlasmicBewertungen__OverridesType = {
  root?: Flex__<typeof DataFetcher>;
  content?: Flex__<"div">;
  content2?: Flex__<"div">;
  rating?: Flex__<"div">;
  content3?: Flex__<"div">;
  frame10218?: Flex__<"div">;
  frame9864?: Flex__<"div">;
  frame10217?: Flex__<"div">;
  _5?: Flex__<"div">;
  group5385?: Flex__<"div">;
  rectangle1886?: Flex__<"div">;
  rectangle1891?: Flex__<"div">;
  frame10339?: Flex__<"div">;
  frame9878?: Flex__<"div">;
  frame5475?: Flex__<"div">;
  frame5477?: Flex__<"div">;
  frame9872?: Flex__<"div">;
  frame9877?: Flex__<"div">;
  frame9873?: Flex__<"div">;
  frame9876?: Flex__<"div">;
  frame9875?: Flex__<"div">;
  frame10338?: Flex__<"div">;
  frame5311?: Flex__<"div">;
  frame5476?: Flex__<"div">;
  addAReview?: Flex__<"div">;
  content4?: Flex__<"div">;
  content5?: Flex__<"div">;
  content6?: Flex__<"div">;
  content7?: Flex__<"div">;
  frame16?: Flex__<"div">;
  component67?: Flex__<"div">;
  placeholder?: Flex__<"div">;
  frame17?: Flex__<"div">;
  component68?: Flex__<"div">;
  placeholder2?: Flex__<"div">;
  frame18?: Flex__<"div">;
  component69?: Flex__<"div">;
  placeholder3?: Flex__<"div">;
  frame9899?: Flex__<"div">;
  frame9898?: Flex__<"div">;
  plusLarge?: Flex__<"div">;
  buttonNoIcon?: Flex__<"div">;
  button?: Flex__<"div">;
  comments?: Flex__<"div">;
  content8?: Flex__<"div">;
  comment?: Flex__<"div">;
  commentInfor?: Flex__<"div">;
  content9?: Flex__<"div">;
  content10?: Flex__<"div">;
  loremIpsumDolorSitAmetConsecteturAdipiscingElitSedDoTemporIncididuntUtLaboreEtDoloreMagnaAliquaUtEnimAdMinimVeniamQuisNostrudExercitationLoremIpsumDolorSitAmetConsecteturAdipiscingElitSedDo?: Flex__<"div">;
  content11?: Flex__<"div">;
  content12?: Flex__<"div">;
  img?: Flex__<"div">;
  img2?: Flex__<"div">;
  img3?: Flex__<"div">;
  img4?: Flex__<"div">;
  img5?: Flex__<"div">;
  img6?: Flex__<"div">;
  button2?: Flex__<"div">;
  button3?: Flex__<"div">;
  like?: Flex__<"div">;
  button4?: Flex__<"div">;
  button5?: Flex__<"div">;
  angleSmall?: Flex__<"div">;
  button6?: Flex__<"div">;
  button7?: Flex__<"div">;
  button8?: Flex__<"div">;
  button9?: Flex__<"div">;
  button10?: Flex__<"div">;
  angleSmall2?: Flex__<"div">;
};

export interface DefaultBewertungenProps {
  produkt?: any;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicBewertungen__RenderFunc(props: {
  variants: PlasmicBewertungen__VariantsArgs;
  args: PlasmicBewertungen__ArgsType;
  overrides: PlasmicBewertungen__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {
          produkt: { id: "UHJvZHVjdDoxMzM=" }
        },
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  return (
    <DataFetcher
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        "__wab_instance",
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root
      )}
      dataName={"bewertungen"}
      errorDisplay={
        <DataCtxReader__>{$ctx => "Error fetching data"}</DataCtxReader__>
      }
      errorName={"fetchError"}
      headers={{
        "Content-Type": "application/json",
        Accept: "application/json",
        "x-plasmic-api-cms-tokens":
          "mXqr7sAFECV76gxNMx9ceZ:f4QxtF8fHjyTReybb96MedXxRav3p3VpSRyqpnBt9kxaZui7IplpKSxqeTOBnBQKORZYWdN6wwtvafgIUlcw"
      }}
      loadingDisplay={<DataCtxReader__>{$ctx => "Loading..."}</DataCtxReader__>}
      method={"GET"}
      noLayout={false}
      url={(() => {
        try {
          return (() => {
            const q = { where: { produktId: $props.produkt.id } };
            return (
              "https://data.plasmic.app/api/v1/cms/databases/mXqr7sAFECV76gxNMx9ceZ/tables/bewertungen/query?q=" +
              JSON.stringify(q)
            );
          })();
        } catch (e) {
          if (
            e instanceof TypeError ||
            e?.plasmicType === "PlasmicUndefinedDataError"
          ) {
            return undefined;
          }
          throw e;
        }
      })()}
    >
      <DataCtxReader__>
        {$ctx => (
          <Stack__
            as={"div"}
            data-plasmic-name={"content"}
            data-plasmic-override={overrides.content}
            hasGap={true}
            className={classNames(projectcss.all, sty.content)}
          >
            <Stack__
              as={"div"}
              data-plasmic-name={"content2"}
              data-plasmic-override={overrides.content2}
              hasGap={true}
              className={classNames(projectcss.all, sty.content2)}
            >
              <div
                data-plasmic-name={"rating"}
                data-plasmic-override={overrides.rating}
                className={classNames(projectcss.all, sty.rating)}
              >
                <Stack__
                  as={"div"}
                  data-plasmic-name={"content3"}
                  data-plasmic-override={overrides.content3}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.content3)}
                >
                  <Stack__
                    as={"div"}
                    data-plasmic-name={"frame10218"}
                    data-plasmic-override={overrides.frame10218}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.frame10218)}
                  >
                    <Stack__
                      as={"div"}
                      data-plasmic-name={"frame9864"}
                      data-plasmic-override={overrides.frame9864}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.frame9864)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text___6BiRi
                        )}
                      >
                        <React.Fragment>
                          {(() => {
                            try {
                              return $props.produkt.rating;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return "4.8";
                              }
                              throw e;
                            }
                          })()}
                        </React.Fragment>
                      </div>
                    </Stack__>
                    <Stack__
                      as={"div"}
                      data-plasmic-name={"frame10217"}
                      data-plasmic-override={overrides.frame10217}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.frame10217)}
                    >
                      {(_par =>
                        !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                        (() => {
                          try {
                            return [5, 4, 3, 2, 1];
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return [];
                            }
                            throw e;
                          }
                        })()
                      ).map((__plasmic_item_0, __plasmic_idx_0) => {
                        const currentRating = __plasmic_item_0;
                        const currentIndex = __plasmic_idx_0;
                        return (
                          <Stack__
                            as={"div"}
                            hasGap={true}
                            className={classNames(
                              projectcss.all,
                              sty.freeBox___5NfX
                            )}
                            key={currentIndex}
                          >
                            <div
                              data-plasmic-name={"_5"}
                              data-plasmic-override={overrides._5}
                              className={classNames(projectcss.all, sty._5)}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__qHj7Q
                                )}
                              >
                                <React.Fragment>
                                  {(() => {
                                    try {
                                      return currentRating;
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return "5";
                                      }
                                      throw e;
                                    }
                                  })()}
                                </React.Fragment>
                              </div>
                            </div>
                            <div
                              data-plasmic-name={"group5385"}
                              data-plasmic-override={overrides.group5385}
                              className={classNames(
                                projectcss.all,
                                sty.group5385
                              )}
                            >
                              <div
                                data-plasmic-name={"rectangle1886"}
                                data-plasmic-override={overrides.rectangle1886}
                                className={classNames(
                                  projectcss.all,
                                  sty.rectangle1886
                                )}
                              />

                              <div
                                data-plasmic-name={"rectangle1891"}
                                data-plasmic-override={overrides.rectangle1891}
                                className={classNames(
                                  projectcss.all,
                                  sty.rectangle1891
                                )}
                                style={(() => {
                                  try {
                                    return (() => {
                                      const totalRatings =
                                        $ctx.bewertungen.rows.length;
                                      const matchingRatings =
                                        $ctx.bewertungen.rows.filter(
                                          b =>
                                            b.data.bewertung === currentRating
                                        ).length;
                                      return totalRatings === 0 ||
                                        matchingRatings === 0
                                        ? {}
                                        : {
                                            width:
                                              (totalRatings / matchingRatings) *
                                                100 +
                                              "%"
                                          };
                                    })();
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return undefined;
                                    }
                                    throw e;
                                  }
                                })()}
                              />
                            </div>
                          </Stack__>
                        );
                      })}
                    </Stack__>
                  </Stack__>
                  <Stack__
                    as={"div"}
                    data-plasmic-name={"frame10339"}
                    data-plasmic-override={overrides.frame10339}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.frame10339)}
                  >
                    <Stack__
                      as={"div"}
                      data-plasmic-name={"frame9878"}
                      data-plasmic-override={overrides.frame9878}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.frame9878)}
                    >
                      <Stack__
                        as={"div"}
                        data-plasmic-name={"frame5475"}
                        data-plasmic-override={overrides.frame5475}
                        hasGap={true}
                        className={classNames(projectcss.all, sty.frame5475)}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__oBiRh
                          )}
                        >
                          {"All"}
                        </div>
                      </Stack__>
                      <Stack__
                        as={"div"}
                        data-plasmic-name={"frame5477"}
                        data-plasmic-override={overrides.frame5477}
                        hasGap={true}
                        className={classNames(projectcss.all, sty.frame5477)}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__nyKRo
                          )}
                        >
                          {"5"}
                        </div>
                        <StarIcon
                          className={classNames(projectcss.all, sty.svg__tSsUm)}
                          role={"img"}
                        />
                      </Stack__>
                      <Stack__
                        as={"div"}
                        data-plasmic-name={"frame9872"}
                        data-plasmic-override={overrides.frame9872}
                        hasGap={true}
                        className={classNames(projectcss.all, sty.frame9872)}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__dIo2F
                          )}
                        >
                          {"4"}
                        </div>
                        <StarIcon
                          className={classNames(projectcss.all, sty.svg__kNo5Y)}
                          role={"img"}
                        />
                      </Stack__>
                    </Stack__>
                    <Stack__
                      as={"div"}
                      data-plasmic-name={"frame9877"}
                      data-plasmic-override={overrides.frame9877}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.frame9877)}
                    >
                      <Stack__
                        as={"div"}
                        data-plasmic-name={"frame9873"}
                        data-plasmic-override={overrides.frame9873}
                        hasGap={true}
                        className={classNames(projectcss.all, sty.frame9873)}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__zwvos
                          )}
                        >
                          {"3"}
                        </div>
                        <StarIcon
                          className={classNames(projectcss.all, sty.svg__hbJg2)}
                          role={"img"}
                        />
                      </Stack__>
                      <Stack__
                        as={"div"}
                        data-plasmic-name={"frame9876"}
                        data-plasmic-override={overrides.frame9876}
                        hasGap={true}
                        className={classNames(projectcss.all, sty.frame9876)}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__dzJNz
                          )}
                        >
                          {"2"}
                        </div>
                        <StarIcon
                          className={classNames(projectcss.all, sty.svg__ijINe)}
                          role={"img"}
                        />
                      </Stack__>
                      <Stack__
                        as={"div"}
                        data-plasmic-name={"frame9875"}
                        data-plasmic-override={overrides.frame9875}
                        hasGap={true}
                        className={classNames(projectcss.all, sty.frame9875)}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__fdQjD
                          )}
                        >
                          {"1"}
                        </div>
                        <StarIcon
                          className={classNames(projectcss.all, sty.svg__ldQh1)}
                          role={"img"}
                        />
                      </Stack__>
                    </Stack__>
                    <Stack__
                      as={"div"}
                      data-plasmic-name={"frame10338"}
                      data-plasmic-override={overrides.frame10338}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.frame10338)}
                    >
                      <Stack__
                        as={"div"}
                        data-plasmic-name={"frame5311"}
                        data-plasmic-override={overrides.frame5311}
                        hasGap={true}
                        className={classNames(projectcss.all, sty.frame5311)}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__nzAdx
                          )}
                        >
                          {"Pictures/Videos"}
                        </div>
                      </Stack__>
                      <Stack__
                        as={"div"}
                        data-plasmic-name={"frame5476"}
                        data-plasmic-override={overrides.frame5476}
                        hasGap={true}
                        className={classNames(projectcss.all, sty.frame5476)}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text___6VYea
                          )}
                        >
                          {"Latest"}
                        </div>
                      </Stack__>
                    </Stack__>
                  </Stack__>
                </Stack__>
              </div>
              <div
                data-plasmic-name={"addAReview"}
                data-plasmic-override={overrides.addAReview}
                className={classNames(projectcss.all, sty.addAReview)}
              >
                <Stack__
                  as={"div"}
                  data-plasmic-name={"content4"}
                  data-plasmic-override={overrides.content4}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.content4)}
                >
                  <Stack__
                    as={"div"}
                    data-plasmic-name={"content5"}
                    data-plasmic-override={overrides.content5}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.content5)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__aCw8I
                      )}
                    >
                      {"Add A Review"}
                    </div>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___8RCx4
                      )}
                    >
                      {
                        "Your email address will not be published.\nRequired fields are marked"
                      }
                    </div>
                  </Stack__>
                  <Stack__
                    as={"div"}
                    data-plasmic-name={"content6"}
                    data-plasmic-override={overrides.content6}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.content6)}
                  >
                    <Stack__
                      as={"div"}
                      data-plasmic-name={"content7"}
                      data-plasmic-override={overrides.content7}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.content7)}
                    >
                      <Stack__
                        as={"div"}
                        data-plasmic-name={"frame16"}
                        data-plasmic-override={overrides.frame16}
                        hasGap={true}
                        className={classNames(projectcss.all, sty.frame16)}
                      >
                        <div
                          data-plasmic-name={"component67"}
                          data-plasmic-override={overrides.component67}
                          className={classNames(
                            projectcss.all,
                            sty.component67
                          )}
                        >
                          <div
                            data-plasmic-name={"placeholder"}
                            data-plasmic-override={overrides.placeholder}
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.placeholder
                            )}
                          >
                            {"Email*"}
                          </div>
                        </div>
                      </Stack__>
                      <Stack__
                        as={"div"}
                        data-plasmic-name={"frame17"}
                        data-plasmic-override={overrides.frame17}
                        hasGap={true}
                        className={classNames(projectcss.all, sty.frame17)}
                      >
                        <div
                          data-plasmic-name={"component68"}
                          data-plasmic-override={overrides.component68}
                          className={classNames(
                            projectcss.all,
                            sty.component68
                          )}
                        >
                          <div
                            data-plasmic-name={"placeholder2"}
                            data-plasmic-override={overrides.placeholder2}
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.placeholder2
                            )}
                          >
                            {"Name*"}
                          </div>
                        </div>
                      </Stack__>
                      <Stack__
                        as={"div"}
                        data-plasmic-name={"frame18"}
                        data-plasmic-override={overrides.frame18}
                        hasGap={true}
                        className={classNames(projectcss.all, sty.frame18)}
                      >
                        <div
                          data-plasmic-name={"component69"}
                          data-plasmic-override={overrides.component69}
                          className={classNames(
                            projectcss.all,
                            sty.component69
                          )}
                        >
                          <div
                            data-plasmic-name={"placeholder3"}
                            data-plasmic-override={overrides.placeholder3}
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.placeholder3
                            )}
                          >
                            {"Your comment*"}
                          </div>
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__gptby
                          )}
                        >
                          {"0/3000"}
                        </div>
                      </Stack__>
                      <Stack__
                        as={"div"}
                        data-plasmic-name={"frame9899"}
                        data-plasmic-override={overrides.frame9899}
                        hasGap={true}
                        className={classNames(projectcss.all, sty.frame9899)}
                      >
                        <div
                          data-plasmic-name={"frame9898"}
                          data-plasmic-override={overrides.frame9898}
                          className={classNames(projectcss.all, sty.frame9898)}
                        >
                          <div
                            data-plasmic-name={"plusLarge"}
                            data-plasmic-override={overrides.plusLarge}
                            className={classNames(
                              projectcss.all,
                              sty.plusLarge
                            )}
                          >
                            <_01AlignCenter20Icon
                              className={classNames(
                                projectcss.all,
                                sty.svg__kj1P
                              )}
                              role={"img"}
                            />
                          </div>
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__mcmRz
                          )}
                        >
                          {
                            "Up to 4 photos & 1 video\n(max 20MB) can be uploaded"
                          }
                        </div>
                      </Stack__>
                    </Stack__>
                    <Stack__
                      as={"div"}
                      data-plasmic-name={"buttonNoIcon"}
                      data-plasmic-override={overrides.buttonNoIcon}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.buttonNoIcon)}
                    >
                      <div
                        data-plasmic-name={"button"}
                        data-plasmic-override={overrides.button}
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.button
                        )}
                      >
                        {"Submit"}
                      </div>
                    </Stack__>
                  </Stack__>
                </Stack__>
              </div>
            </Stack__>
            <Stack__
              as={"div"}
              data-plasmic-name={"comments"}
              data-plasmic-override={overrides.comments}
              hasGap={true}
              className={classNames(projectcss.all, sty.comments)}
            >
              <Stack__
                as={"div"}
                data-plasmic-name={"content8"}
                data-plasmic-override={overrides.content8}
                hasGap={true}
                className={classNames(projectcss.all, sty.content8)}
              >
                {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
                  (() => {
                    try {
                      return $ctx.bewertungen.rows;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return [];
                      }
                      throw e;
                    }
                  })()
                ).map((__plasmic_item_0, __plasmic_idx_0) => {
                  const bewertung = __plasmic_item_0;
                  const currentIndex = __plasmic_idx_0;
                  return (
                    <Stack__
                      as={"div"}
                      data-plasmic-name={"comment"}
                      data-plasmic-override={overrides.comment}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.comment)}
                      key={currentIndex}
                    >
                      <Stack__
                        as={"div"}
                        data-plasmic-name={"commentInfor"}
                        data-plasmic-override={overrides.commentInfor}
                        hasGap={true}
                        className={classNames(projectcss.all, sty.commentInfor)}
                      >
                        <Stack__
                          as={"div"}
                          data-plasmic-name={"content9"}
                          data-plasmic-override={overrides.content9}
                          hasGap={true}
                          className={classNames(projectcss.all, sty.content9)}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__afb6N
                            )}
                          >
                            <React.Fragment>
                              {(() => {
                                try {
                                  return bewertung.data.name;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "Name";
                                  }
                                  throw e;
                                }
                              })()}
                            </React.Fragment>
                          </div>
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__twetN
                            )}
                          >
                            <React.Fragment>
                              {(() => {
                                try {
                                  return (() => {
                                    const date = new Date(
                                      "2024-08-19T21:41:13.756Z"
                                    );
                                    const day = String(
                                      date.getUTCDate()
                                    ).padStart(2, "0");
                                    const month = String(
                                      date.getUTCMonth() + 1
                                    ).padStart(2, "0");
                                    const year = date.getUTCFullYear();
                                    return `${day}.${month}.${year}`;
                                  })();
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "2022-12-08";
                                  }
                                  throw e;
                                }
                              })()}
                            </React.Fragment>
                          </div>
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__kol9J
                            )}
                          >
                            {"25 likes"}
                          </div>
                        </Stack__>
                      </Stack__>
                      <Stack__
                        as={"div"}
                        data-plasmic-name={"content10"}
                        data-plasmic-override={overrides.content10}
                        hasGap={true}
                        className={classNames(projectcss.all, sty.content10)}
                      >
                        <div
                          data-plasmic-name={
                            "loremIpsumDolorSitAmetConsecteturAdipiscingElitSedDoTemporIncididuntUtLaboreEtDoloreMagnaAliquaUtEnimAdMinimVeniamQuisNostrudExercitationLoremIpsumDolorSitAmetConsecteturAdipiscingElitSedDo"
                          }
                          data-plasmic-override={
                            overrides.loremIpsumDolorSitAmetConsecteturAdipiscingElitSedDoTemporIncididuntUtLaboreEtDoloreMagnaAliquaUtEnimAdMinimVeniamQuisNostrudExercitationLoremIpsumDolorSitAmetConsecteturAdipiscingElitSedDo
                          }
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.loremIpsumDolorSitAmetConsecteturAdipiscingElitSedDoTemporIncididuntUtLaboreEtDoloreMagnaAliquaUtEnimAdMinimVeniamQuisNostrudExercitationLoremIpsumDolorSitAmetConsecteturAdipiscingElitSedDo
                          )}
                        >
                          <React.Fragment>
                            {(() => {
                              try {
                                return bewertung.data.rezension;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation. Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do. Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do.";
                                }
                                throw e;
                              }
                            })()}
                          </React.Fragment>
                        </div>
                        <Stack__
                          as={"div"}
                          data-plasmic-name={"content11"}
                          data-plasmic-override={overrides.content11}
                          hasGap={true}
                          className={classNames(projectcss.all, sty.content11)}
                        >
                          <Stack__
                            as={"div"}
                            data-plasmic-name={"content12"}
                            data-plasmic-override={overrides.content12}
                            hasGap={true}
                            className={classNames(
                              projectcss.all,
                              sty.content12
                            )}
                          >
                            <div
                              data-plasmic-name={"img"}
                              data-plasmic-override={overrides.img}
                              className={classNames(projectcss.all, sty.img)}
                            >
                              <div
                                data-plasmic-name={"img2"}
                                data-plasmic-override={overrides.img2}
                                className={classNames(projectcss.all, sty.img2)}
                              />
                            </div>
                            <div
                              data-plasmic-name={"img3"}
                              data-plasmic-override={overrides.img3}
                              className={classNames(projectcss.all, sty.img3)}
                            >
                              <div
                                data-plasmic-name={"img4"}
                                data-plasmic-override={overrides.img4}
                                className={classNames(projectcss.all, sty.img4)}
                              />
                            </div>
                            {false ? (
                              <div
                                data-plasmic-name={"img5"}
                                data-plasmic-override={overrides.img5}
                                className={classNames(projectcss.all, sty.img5)}
                              >
                                <div
                                  data-plasmic-name={"img6"}
                                  data-plasmic-override={overrides.img6}
                                  className={classNames(
                                    projectcss.all,
                                    sty.img6
                                  )}
                                />

                                <PlayIcon
                                  className={classNames(
                                    projectcss.all,
                                    sty.svg__j34Og
                                  )}
                                  role={"img"}
                                />
                              </div>
                            ) : null}
                          </Stack__>
                          {false ? (
                            <Stack__
                              as={"div"}
                              data-plasmic-name={"button2"}
                              data-plasmic-override={overrides.button2}
                              hasGap={true}
                              className={classNames(
                                projectcss.all,
                                sty.button2
                              )}
                            >
                              <Stack__
                                as={"div"}
                                data-plasmic-name={"button3"}
                                data-plasmic-override={overrides.button3}
                                hasGap={true}
                                className={classNames(
                                  projectcss.all,
                                  sty.button3
                                )}
                              >
                                <div
                                  data-plasmic-name={"like"}
                                  data-plasmic-override={overrides.like}
                                  className={classNames(
                                    projectcss.all,
                                    sty.like
                                  )}
                                >
                                  <_01AlignCenter12Icon
                                    className={classNames(
                                      projectcss.all,
                                      sty.svg___13Brm
                                    )}
                                    role={"img"}
                                  />
                                </div>
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text___1M6Rk
                                  )}
                                >
                                  {"Like"}
                                </div>
                              </Stack__>
                              <Stack__
                                as={"div"}
                                data-plasmic-name={"button4"}
                                data-plasmic-override={overrides.button4}
                                hasGap={true}
                                className={classNames(
                                  projectcss.all,
                                  sty.button4
                                )}
                              >
                                <PlasmicImg__
                                  alt={""}
                                  className={classNames(sty.img__t3Xhx)}
                                  displayHeight={"16px"}
                                  displayMaxHeight={"none"}
                                  displayMaxWidth={"100%"}
                                  displayMinHeight={"0"}
                                  displayMinWidth={"0"}
                                  displayWidth={"16px"}
                                  loading={"lazy"}
                                  src={{
                                    src: "/plasmic/ewl/images/comments.svg",
                                    fullWidth: 16,
                                    fullHeight: 16,
                                    aspectRatio: 1
                                  }}
                                />

                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__qxHiu
                                  )}
                                >
                                  {"Reply"}
                                </div>
                              </Stack__>
                            </Stack__>
                          ) : null}
                        </Stack__>
                      </Stack__>
                    </Stack__>
                  );
                })}
              </Stack__>
              <Stack__
                as={"div"}
                data-plasmic-name={"button5"}
                data-plasmic-override={overrides.button5}
                hasGap={true}
                className={classNames(projectcss.all, sty.button5)}
              >
                <div className={classNames(projectcss.all, sty.freeBox__nKuki)}>
                  <div
                    data-plasmic-name={"angleSmall"}
                    data-plasmic-override={overrides.angleSmall}
                    className={classNames(projectcss.all, sty.angleSmall)}
                  >
                    <_01AlignCenter17Icon
                      className={classNames(projectcss.all, sty.svg__tTY)}
                      role={"img"}
                    />
                  </div>
                </div>
                <Stack__
                  as={"div"}
                  data-plasmic-name={"button6"}
                  data-plasmic-override={overrides.button6}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.button6)}
                >
                  <Stack__
                    as={"div"}
                    data-plasmic-name={"button7"}
                    data-plasmic-override={overrides.button7}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.button7)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__ku7CT
                      )}
                    >
                      {"1"}
                    </div>
                  </Stack__>
                  <Stack__
                    as={"div"}
                    data-plasmic-name={"button8"}
                    data-plasmic-override={overrides.button8}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.button8)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__cCwmg
                      )}
                    >
                      {"2"}
                    </div>
                  </Stack__>
                  <Stack__
                    as={"div"}
                    data-plasmic-name={"button9"}
                    data-plasmic-override={overrides.button9}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.button9)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__f0Ie
                      )}
                    >
                      {"3"}
                    </div>
                  </Stack__>
                  <Stack__
                    as={"div"}
                    data-plasmic-name={"button10"}
                    data-plasmic-override={overrides.button10}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.button10)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__aXvyx
                      )}
                    >
                      {"4"}
                    </div>
                  </Stack__>
                </Stack__>
                <div className={classNames(projectcss.all, sty.freeBox__uxR)}>
                  <div
                    data-plasmic-name={"angleSmall2"}
                    data-plasmic-override={overrides.angleSmall2}
                    className={classNames(projectcss.all, sty.angleSmall2)}
                  >
                    <_01AlignCenter17Icon
                      className={classNames(projectcss.all, sty.svg__pZkLh)}
                      role={"img"}
                    />
                  </div>
                </div>
              </Stack__>
            </Stack__>
          </Stack__>
        )}
      </DataCtxReader__>
    </DataFetcher>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "content",
    "content2",
    "rating",
    "content3",
    "frame10218",
    "frame9864",
    "frame10217",
    "_5",
    "group5385",
    "rectangle1886",
    "rectangle1891",
    "frame10339",
    "frame9878",
    "frame5475",
    "frame5477",
    "frame9872",
    "frame9877",
    "frame9873",
    "frame9876",
    "frame9875",
    "frame10338",
    "frame5311",
    "frame5476",
    "addAReview",
    "content4",
    "content5",
    "content6",
    "content7",
    "frame16",
    "component67",
    "placeholder",
    "frame17",
    "component68",
    "placeholder2",
    "frame18",
    "component69",
    "placeholder3",
    "frame9899",
    "frame9898",
    "plusLarge",
    "buttonNoIcon",
    "button",
    "comments",
    "content8",
    "comment",
    "commentInfor",
    "content9",
    "content10",
    "loremIpsumDolorSitAmetConsecteturAdipiscingElitSedDoTemporIncididuntUtLaboreEtDoloreMagnaAliquaUtEnimAdMinimVeniamQuisNostrudExercitationLoremIpsumDolorSitAmetConsecteturAdipiscingElitSedDo",
    "content11",
    "content12",
    "img",
    "img2",
    "img3",
    "img4",
    "img5",
    "img6",
    "button2",
    "button3",
    "like",
    "button4",
    "button5",
    "angleSmall",
    "button6",
    "button7",
    "button8",
    "button9",
    "button10",
    "angleSmall2"
  ],
  content: [
    "content",
    "content2",
    "rating",
    "content3",
    "frame10218",
    "frame9864",
    "frame10217",
    "_5",
    "group5385",
    "rectangle1886",
    "rectangle1891",
    "frame10339",
    "frame9878",
    "frame5475",
    "frame5477",
    "frame9872",
    "frame9877",
    "frame9873",
    "frame9876",
    "frame9875",
    "frame10338",
    "frame5311",
    "frame5476",
    "addAReview",
    "content4",
    "content5",
    "content6",
    "content7",
    "frame16",
    "component67",
    "placeholder",
    "frame17",
    "component68",
    "placeholder2",
    "frame18",
    "component69",
    "placeholder3",
    "frame9899",
    "frame9898",
    "plusLarge",
    "buttonNoIcon",
    "button",
    "comments",
    "content8",
    "comment",
    "commentInfor",
    "content9",
    "content10",
    "loremIpsumDolorSitAmetConsecteturAdipiscingElitSedDoTemporIncididuntUtLaboreEtDoloreMagnaAliquaUtEnimAdMinimVeniamQuisNostrudExercitationLoremIpsumDolorSitAmetConsecteturAdipiscingElitSedDo",
    "content11",
    "content12",
    "img",
    "img2",
    "img3",
    "img4",
    "img5",
    "img6",
    "button2",
    "button3",
    "like",
    "button4",
    "button5",
    "angleSmall",
    "button6",
    "button7",
    "button8",
    "button9",
    "button10",
    "angleSmall2"
  ],
  content2: [
    "content2",
    "rating",
    "content3",
    "frame10218",
    "frame9864",
    "frame10217",
    "_5",
    "group5385",
    "rectangle1886",
    "rectangle1891",
    "frame10339",
    "frame9878",
    "frame5475",
    "frame5477",
    "frame9872",
    "frame9877",
    "frame9873",
    "frame9876",
    "frame9875",
    "frame10338",
    "frame5311",
    "frame5476",
    "addAReview",
    "content4",
    "content5",
    "content6",
    "content7",
    "frame16",
    "component67",
    "placeholder",
    "frame17",
    "component68",
    "placeholder2",
    "frame18",
    "component69",
    "placeholder3",
    "frame9899",
    "frame9898",
    "plusLarge",
    "buttonNoIcon",
    "button"
  ],
  rating: [
    "rating",
    "content3",
    "frame10218",
    "frame9864",
    "frame10217",
    "_5",
    "group5385",
    "rectangle1886",
    "rectangle1891",
    "frame10339",
    "frame9878",
    "frame5475",
    "frame5477",
    "frame9872",
    "frame9877",
    "frame9873",
    "frame9876",
    "frame9875",
    "frame10338",
    "frame5311",
    "frame5476"
  ],
  content3: [
    "content3",
    "frame10218",
    "frame9864",
    "frame10217",
    "_5",
    "group5385",
    "rectangle1886",
    "rectangle1891",
    "frame10339",
    "frame9878",
    "frame5475",
    "frame5477",
    "frame9872",
    "frame9877",
    "frame9873",
    "frame9876",
    "frame9875",
    "frame10338",
    "frame5311",
    "frame5476"
  ],
  frame10218: [
    "frame10218",
    "frame9864",
    "frame10217",
    "_5",
    "group5385",
    "rectangle1886",
    "rectangle1891"
  ],
  frame9864: ["frame9864"],
  frame10217: [
    "frame10217",
    "_5",
    "group5385",
    "rectangle1886",
    "rectangle1891"
  ],
  _5: ["_5"],
  group5385: ["group5385", "rectangle1886", "rectangle1891"],
  rectangle1886: ["rectangle1886"],
  rectangle1891: ["rectangle1891"],
  frame10339: [
    "frame10339",
    "frame9878",
    "frame5475",
    "frame5477",
    "frame9872",
    "frame9877",
    "frame9873",
    "frame9876",
    "frame9875",
    "frame10338",
    "frame5311",
    "frame5476"
  ],
  frame9878: ["frame9878", "frame5475", "frame5477", "frame9872"],
  frame5475: ["frame5475"],
  frame5477: ["frame5477"],
  frame9872: ["frame9872"],
  frame9877: ["frame9877", "frame9873", "frame9876", "frame9875"],
  frame9873: ["frame9873"],
  frame9876: ["frame9876"],
  frame9875: ["frame9875"],
  frame10338: ["frame10338", "frame5311", "frame5476"],
  frame5311: ["frame5311"],
  frame5476: ["frame5476"],
  addAReview: [
    "addAReview",
    "content4",
    "content5",
    "content6",
    "content7",
    "frame16",
    "component67",
    "placeholder",
    "frame17",
    "component68",
    "placeholder2",
    "frame18",
    "component69",
    "placeholder3",
    "frame9899",
    "frame9898",
    "plusLarge",
    "buttonNoIcon",
    "button"
  ],
  content4: [
    "content4",
    "content5",
    "content6",
    "content7",
    "frame16",
    "component67",
    "placeholder",
    "frame17",
    "component68",
    "placeholder2",
    "frame18",
    "component69",
    "placeholder3",
    "frame9899",
    "frame9898",
    "plusLarge",
    "buttonNoIcon",
    "button"
  ],
  content5: ["content5"],
  content6: [
    "content6",
    "content7",
    "frame16",
    "component67",
    "placeholder",
    "frame17",
    "component68",
    "placeholder2",
    "frame18",
    "component69",
    "placeholder3",
    "frame9899",
    "frame9898",
    "plusLarge",
    "buttonNoIcon",
    "button"
  ],
  content7: [
    "content7",
    "frame16",
    "component67",
    "placeholder",
    "frame17",
    "component68",
    "placeholder2",
    "frame18",
    "component69",
    "placeholder3",
    "frame9899",
    "frame9898",
    "plusLarge"
  ],
  frame16: ["frame16", "component67", "placeholder"],
  component67: ["component67", "placeholder"],
  placeholder: ["placeholder"],
  frame17: ["frame17", "component68", "placeholder2"],
  component68: ["component68", "placeholder2"],
  placeholder2: ["placeholder2"],
  frame18: ["frame18", "component69", "placeholder3"],
  component69: ["component69", "placeholder3"],
  placeholder3: ["placeholder3"],
  frame9899: ["frame9899", "frame9898", "plusLarge"],
  frame9898: ["frame9898", "plusLarge"],
  plusLarge: ["plusLarge"],
  buttonNoIcon: ["buttonNoIcon", "button"],
  button: ["button"],
  comments: [
    "comments",
    "content8",
    "comment",
    "commentInfor",
    "content9",
    "content10",
    "loremIpsumDolorSitAmetConsecteturAdipiscingElitSedDoTemporIncididuntUtLaboreEtDoloreMagnaAliquaUtEnimAdMinimVeniamQuisNostrudExercitationLoremIpsumDolorSitAmetConsecteturAdipiscingElitSedDo",
    "content11",
    "content12",
    "img",
    "img2",
    "img3",
    "img4",
    "img5",
    "img6",
    "button2",
    "button3",
    "like",
    "button4",
    "button5",
    "angleSmall",
    "button6",
    "button7",
    "button8",
    "button9",
    "button10",
    "angleSmall2"
  ],
  content8: [
    "content8",
    "comment",
    "commentInfor",
    "content9",
    "content10",
    "loremIpsumDolorSitAmetConsecteturAdipiscingElitSedDoTemporIncididuntUtLaboreEtDoloreMagnaAliquaUtEnimAdMinimVeniamQuisNostrudExercitationLoremIpsumDolorSitAmetConsecteturAdipiscingElitSedDo",
    "content11",
    "content12",
    "img",
    "img2",
    "img3",
    "img4",
    "img5",
    "img6",
    "button2",
    "button3",
    "like",
    "button4"
  ],
  comment: [
    "comment",
    "commentInfor",
    "content9",
    "content10",
    "loremIpsumDolorSitAmetConsecteturAdipiscingElitSedDoTemporIncididuntUtLaboreEtDoloreMagnaAliquaUtEnimAdMinimVeniamQuisNostrudExercitationLoremIpsumDolorSitAmetConsecteturAdipiscingElitSedDo",
    "content11",
    "content12",
    "img",
    "img2",
    "img3",
    "img4",
    "img5",
    "img6",
    "button2",
    "button3",
    "like",
    "button4"
  ],
  commentInfor: ["commentInfor", "content9"],
  content9: ["content9"],
  content10: [
    "content10",
    "loremIpsumDolorSitAmetConsecteturAdipiscingElitSedDoTemporIncididuntUtLaboreEtDoloreMagnaAliquaUtEnimAdMinimVeniamQuisNostrudExercitationLoremIpsumDolorSitAmetConsecteturAdipiscingElitSedDo",
    "content11",
    "content12",
    "img",
    "img2",
    "img3",
    "img4",
    "img5",
    "img6",
    "button2",
    "button3",
    "like",
    "button4"
  ],
  loremIpsumDolorSitAmetConsecteturAdipiscingElitSedDoTemporIncididuntUtLaboreEtDoloreMagnaAliquaUtEnimAdMinimVeniamQuisNostrudExercitationLoremIpsumDolorSitAmetConsecteturAdipiscingElitSedDo:
    [
      "loremIpsumDolorSitAmetConsecteturAdipiscingElitSedDoTemporIncididuntUtLaboreEtDoloreMagnaAliquaUtEnimAdMinimVeniamQuisNostrudExercitationLoremIpsumDolorSitAmetConsecteturAdipiscingElitSedDo"
    ],
  content11: [
    "content11",
    "content12",
    "img",
    "img2",
    "img3",
    "img4",
    "img5",
    "img6",
    "button2",
    "button3",
    "like",
    "button4"
  ],
  content12: ["content12", "img", "img2", "img3", "img4", "img5", "img6"],
  img: ["img", "img2"],
  img2: ["img2"],
  img3: ["img3", "img4"],
  img4: ["img4"],
  img5: ["img5", "img6"],
  img6: ["img6"],
  button2: ["button2", "button3", "like", "button4"],
  button3: ["button3", "like"],
  like: ["like"],
  button4: ["button4"],
  button5: [
    "button5",
    "angleSmall",
    "button6",
    "button7",
    "button8",
    "button9",
    "button10",
    "angleSmall2"
  ],
  angleSmall: ["angleSmall"],
  button6: ["button6", "button7", "button8", "button9", "button10"],
  button7: ["button7"],
  button8: ["button8"],
  button9: ["button9"],
  button10: ["button10"],
  angleSmall2: ["angleSmall2"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: typeof DataFetcher;
  content: "div";
  content2: "div";
  rating: "div";
  content3: "div";
  frame10218: "div";
  frame9864: "div";
  frame10217: "div";
  _5: "div";
  group5385: "div";
  rectangle1886: "div";
  rectangle1891: "div";
  frame10339: "div";
  frame9878: "div";
  frame5475: "div";
  frame5477: "div";
  frame9872: "div";
  frame9877: "div";
  frame9873: "div";
  frame9876: "div";
  frame9875: "div";
  frame10338: "div";
  frame5311: "div";
  frame5476: "div";
  addAReview: "div";
  content4: "div";
  content5: "div";
  content6: "div";
  content7: "div";
  frame16: "div";
  component67: "div";
  placeholder: "div";
  frame17: "div";
  component68: "div";
  placeholder2: "div";
  frame18: "div";
  component69: "div";
  placeholder3: "div";
  frame9899: "div";
  frame9898: "div";
  plusLarge: "div";
  buttonNoIcon: "div";
  button: "div";
  comments: "div";
  content8: "div";
  comment: "div";
  commentInfor: "div";
  content9: "div";
  content10: "div";
  loremIpsumDolorSitAmetConsecteturAdipiscingElitSedDoTemporIncididuntUtLaboreEtDoloreMagnaAliquaUtEnimAdMinimVeniamQuisNostrudExercitationLoremIpsumDolorSitAmetConsecteturAdipiscingElitSedDo: "div";
  content11: "div";
  content12: "div";
  img: "div";
  img2: "div";
  img3: "div";
  img4: "div";
  img5: "div";
  img6: "div";
  button2: "div";
  button3: "div";
  like: "div";
  button4: "div";
  button5: "div";
  angleSmall: "div";
  button6: "div";
  button7: "div";
  button8: "div";
  button9: "div";
  button10: "div";
  angleSmall2: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicBewertungen__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicBewertungen__VariantsArgs;
    args?: PlasmicBewertungen__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicBewertungen__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicBewertungen__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicBewertungen__ArgProps,
          internalVariantPropNames: PlasmicBewertungen__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicBewertungen__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicBewertungen";
  } else {
    func.displayName = `PlasmicBewertungen.${nodeName}`;
  }
  return func;
}

export const PlasmicBewertungen = Object.assign(
  // Top-level PlasmicBewertungen renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    content: makeNodeComponent("content"),
    content2: makeNodeComponent("content2"),
    rating: makeNodeComponent("rating"),
    content3: makeNodeComponent("content3"),
    frame10218: makeNodeComponent("frame10218"),
    frame9864: makeNodeComponent("frame9864"),
    frame10217: makeNodeComponent("frame10217"),
    _5: makeNodeComponent("_5"),
    group5385: makeNodeComponent("group5385"),
    rectangle1886: makeNodeComponent("rectangle1886"),
    rectangle1891: makeNodeComponent("rectangle1891"),
    frame10339: makeNodeComponent("frame10339"),
    frame9878: makeNodeComponent("frame9878"),
    frame5475: makeNodeComponent("frame5475"),
    frame5477: makeNodeComponent("frame5477"),
    frame9872: makeNodeComponent("frame9872"),
    frame9877: makeNodeComponent("frame9877"),
    frame9873: makeNodeComponent("frame9873"),
    frame9876: makeNodeComponent("frame9876"),
    frame9875: makeNodeComponent("frame9875"),
    frame10338: makeNodeComponent("frame10338"),
    frame5311: makeNodeComponent("frame5311"),
    frame5476: makeNodeComponent("frame5476"),
    addAReview: makeNodeComponent("addAReview"),
    content4: makeNodeComponent("content4"),
    content5: makeNodeComponent("content5"),
    content6: makeNodeComponent("content6"),
    content7: makeNodeComponent("content7"),
    frame16: makeNodeComponent("frame16"),
    component67: makeNodeComponent("component67"),
    placeholder: makeNodeComponent("placeholder"),
    frame17: makeNodeComponent("frame17"),
    component68: makeNodeComponent("component68"),
    placeholder2: makeNodeComponent("placeholder2"),
    frame18: makeNodeComponent("frame18"),
    component69: makeNodeComponent("component69"),
    placeholder3: makeNodeComponent("placeholder3"),
    frame9899: makeNodeComponent("frame9899"),
    frame9898: makeNodeComponent("frame9898"),
    plusLarge: makeNodeComponent("plusLarge"),
    buttonNoIcon: makeNodeComponent("buttonNoIcon"),
    button: makeNodeComponent("button"),
    comments: makeNodeComponent("comments"),
    content8: makeNodeComponent("content8"),
    comment: makeNodeComponent("comment"),
    commentInfor: makeNodeComponent("commentInfor"),
    content9: makeNodeComponent("content9"),
    content10: makeNodeComponent("content10"),
    loremIpsumDolorSitAmetConsecteturAdipiscingElitSedDoTemporIncididuntUtLaboreEtDoloreMagnaAliquaUtEnimAdMinimVeniamQuisNostrudExercitationLoremIpsumDolorSitAmetConsecteturAdipiscingElitSedDo:
      makeNodeComponent(
        "loremIpsumDolorSitAmetConsecteturAdipiscingElitSedDoTemporIncididuntUtLaboreEtDoloreMagnaAliquaUtEnimAdMinimVeniamQuisNostrudExercitationLoremIpsumDolorSitAmetConsecteturAdipiscingElitSedDo"
      ),
    content11: makeNodeComponent("content11"),
    content12: makeNodeComponent("content12"),
    img: makeNodeComponent("img"),
    img2: makeNodeComponent("img2"),
    img3: makeNodeComponent("img3"),
    img4: makeNodeComponent("img4"),
    img5: makeNodeComponent("img5"),
    img6: makeNodeComponent("img6"),
    button2: makeNodeComponent("button2"),
    button3: makeNodeComponent("button3"),
    like: makeNodeComponent("like"),
    button4: makeNodeComponent("button4"),
    button5: makeNodeComponent("button5"),
    angleSmall: makeNodeComponent("angleSmall"),
    button6: makeNodeComponent("button6"),
    button7: makeNodeComponent("button7"),
    button8: makeNodeComponent("button8"),
    button9: makeNodeComponent("button9"),
    button10: makeNodeComponent("button10"),
    angleSmall2: makeNodeComponent("angleSmall2"),

    // Metadata about props expected for PlasmicBewertungen
    internalVariantProps: PlasmicBewertungen__VariantProps,
    internalArgProps: PlasmicBewertungen__ArgProps
  }
);

export default PlasmicBewertungen;
/* prettier-ignore-end */
