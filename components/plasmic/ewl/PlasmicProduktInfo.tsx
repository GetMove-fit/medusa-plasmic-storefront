// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: o7C61dL2AAD7uCRtgHRJ1p
// Component: KeJX5RODlqVN

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import Bewertungen from "../../Bewertungen"; // plasmic-import: 3U1jufZMReo6/component

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: o7C61dL2AAD7uCRtgHRJ1p/projectcss
import sty from "./PlasmicProduktInfo.module.css"; // plasmic-import: KeJX5RODlqVN/css

createPlasmicElementProxy;

export type PlasmicProduktInfo__VariantMembers = {
  bewertungen: "bewertungen";
};
export type PlasmicProduktInfo__VariantsArgs = {
  bewertungen?: SingleBooleanChoiceArg<"bewertungen">;
};
type VariantPropType = keyof PlasmicProduktInfo__VariantsArgs;
export const PlasmicProduktInfo__VariantProps = new Array<VariantPropType>(
  "bewertungen"
);

export type PlasmicProduktInfo__ArgsType = {
  selectedVariant?: any;
  produkt?: any;
};
type ArgPropType = keyof PlasmicProduktInfo__ArgsType;
export const PlasmicProduktInfo__ArgProps = new Array<ArgPropType>(
  "selectedVariant",
  "produkt"
);

export type PlasmicProduktInfo__OverridesType = {
  root?: Flex__<"div">;
  content18?: Flex__<"div">;
  content21?: Flex__<"div">;
  content22?: Flex__<"div">;
  content23?: Flex__<"div">;
  content24?: Flex__<"div">;
  content25?: Flex__<"div">;
  content26?: Flex__<"div">;
  content27?: Flex__<"div">;
  bewertungen?: Flex__<typeof Bewertungen>;
};

export interface DefaultProduktInfoProps {
  selectedVariant?: any;
  produkt?: any;
  bewertungen?: SingleBooleanChoiceArg<"bewertungen">;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicProduktInfo__RenderFunc(props: {
  variants: PlasmicProduktInfo__VariantsArgs;
  args: PlasmicProduktInfo__ArgsType;
  overrides: PlasmicProduktInfo__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "bewertungen",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.bewertungen
      },
      {
        path: "bewertungenSeite",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 1
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  return (
    <Stack__
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root,
        {
          [sty.rootbewertungen]: hasVariant(
            $state,
            "bewertungen",
            "bewertungen"
          )
        }
      )}
    >
      <Stack__
        as={"div"}
        data-plasmic-name={"content18"}
        data-plasmic-override={overrides.content18}
        hasGap={true}
        className={classNames(projectcss.all, sty.content18, {
          [sty.content18bewertungen]: hasVariant(
            $state,
            "bewertungen",
            "bewertungen"
          )
        })}
      >
        <button
          className={classNames(
            projectcss.all,
            projectcss.button,
            projectcss.__wab_text,
            sty.button__bbo6C,
            {
              [sty.buttonbewertungen__bbo6C0UWRo]: hasVariant(
                $state,
                "bewertungen",
                "bewertungen"
              )
            }
          )}
          onClick={async event => {
            const $steps = {};

            $steps["updateBewertungen"] = true
              ? (() => {
                  const actionArgs = {
                    vgroup: "bewertungen",
                    operation: 6,
                    value: "bewertungen"
                  };
                  return (({ vgroup, value }) => {
                    if (typeof value === "string") {
                      value = [value];
                    }

                    $stateSet($state, vgroup, false);
                    return false;
                  })?.apply(null, [actionArgs]);
                })()
              : undefined;
            if (
              $steps["updateBewertungen"] != null &&
              typeof $steps["updateBewertungen"] === "object" &&
              typeof $steps["updateBewertungen"].then === "function"
            ) {
              $steps["updateBewertungen"] = await $steps["updateBewertungen"];
            }
          }}
        >
          {"Beschreibung"}
        </button>
        <button
          className={classNames(
            projectcss.all,
            projectcss.button,
            projectcss.__wab_text,
            sty.button__cNqN,
            {
              [sty.buttonbewertungen__cNqN0UWRo]: hasVariant(
                $state,
                "bewertungen",
                "bewertungen"
              )
            }
          )}
          onClick={async event => {
            const $steps = {};

            $steps["updateBewertungen"] = true
              ? (() => {
                  const actionArgs = {
                    vgroup: "bewertungen",
                    operation: 4,
                    value: "bewertungen"
                  };
                  return (({ vgroup, value }) => {
                    if (typeof value === "string") {
                      value = [value];
                    }

                    $stateSet($state, vgroup, true);
                    return true;
                  })?.apply(null, [actionArgs]);
                })()
              : undefined;
            if (
              $steps["updateBewertungen"] != null &&
              typeof $steps["updateBewertungen"] === "object" &&
              typeof $steps["updateBewertungen"].then === "function"
            ) {
              $steps["updateBewertungen"] = await $steps["updateBewertungen"];
            }
          }}
        >
          {"Bewertungen"}
        </button>
      </Stack__>
      <Stack__
        as={"div"}
        data-plasmic-name={"content21"}
        data-plasmic-override={overrides.content21}
        hasGap={true}
        className={classNames(projectcss.all, sty.content21)}
      >
        <Stack__
          as={"div"}
          data-plasmic-name={"content22"}
          data-plasmic-override={overrides.content22}
          hasGap={true}
          className={classNames(projectcss.all, sty.content22, {
            [sty.content22bewertungen]: hasVariant(
              $state,
              "bewertungen",
              "bewertungen"
            )
          })}
        >
          <Stack__
            as={"div"}
            data-plasmic-name={"content23"}
            data-plasmic-override={overrides.content23}
            hasGap={true}
            className={classNames(projectcss.all, sty.content23)}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__nqiKb
              )}
            >
              <div
                className={projectcss.__wab_expr_html_text}
                dangerouslySetInnerHTML={{
                  __html: (() => {
                    try {
                      return JSON.parse($props.produkt.description)
                        .blocks.slice(1)
                        .map(b => b.data.text)
                        .join("<br>");
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return " Keine Beschreibung";
                      }
                      throw e;
                    }
                  })()
                }}
              />
            </div>
          </Stack__>
          <Stack__
            as={"div"}
            data-plasmic-name={"content24"}
            data-plasmic-override={overrides.content24}
            hasGap={true}
            className={classNames(projectcss.all, sty.content24)}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__v2PGm
              )}
            >
              {"Weitere Informationen:"}
            </div>
            <Stack__
              as={"div"}
              data-plasmic-name={"content25"}
              data-plasmic-override={overrides.content25}
              hasGap={true}
              className={classNames(projectcss.all, sty.content25)}
            >
              <Stack__
                as={"div"}
                data-plasmic-name={"content26"}
                data-plasmic-override={overrides.content26}
                hasGap={true}
                className={classNames(projectcss.all, sty.content26)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__nXlf
                  )}
                >
                  {"Gewicht"}
                </div>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__lmtaf
                  )}
                >
                  {"Farbe"}
                </div>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__z6SV
                  )}
                >
                  {"Masse"}
                </div>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__zlNod
                  )}
                >
                  {"Material"}
                </div>
              </Stack__>
              <Stack__
                as={"div"}
                data-plasmic-name={"content27"}
                data-plasmic-override={overrides.content27}
                hasGap={true}
                className={classNames(projectcss.all, sty.content27)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__aGw6H
                  )}
                >
                  <React.Fragment>
                    {(() => {
                      try {
                        return (
                          $props.selectedVariant.weight.value +
                          $props.selectedVariant.weight.unit.toLowerCase()
                        );
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return "15kg";
                        }
                        throw e;
                      }
                    })()}
                  </React.Fragment>
                </div>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___48AGv
                  )}
                >
                  <React.Fragment>
                    {(() => {
                      try {
                        return $props.selectedVariant.attributes
                          .find(v => v.attribute.inputType === "SWATCH")
                          .values.map(v => v.name)
                          .join(", ");
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return "Yellow, Green";
                        }
                        throw e;
                      }
                    })()}
                  </React.Fragment>
                </div>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__cttPx
                  )}
                >
                  {"Length 46cm x Width 75cm x Height 82cm"}
                </div>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__bMRb
                  )}
                >
                  {"Wood"}
                </div>
              </Stack__>
            </Stack__>
          </Stack__>
        </Stack__>
      </Stack__>
      <Bewertungen
        data-plasmic-name={"bewertungen"}
        data-plasmic-override={overrides.bewertungen}
        className={classNames("__wab_instance", sty.bewertungen, {
          [sty.bewertungenbewertungen]: hasVariant(
            $state,
            "bewertungen",
            "bewertungen"
          )
        })}
        produkt={args.produkt}
      />
    </Stack__>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "content18",
    "content21",
    "content22",
    "content23",
    "content24",
    "content25",
    "content26",
    "content27",
    "bewertungen"
  ],
  content18: ["content18"],
  content21: [
    "content21",
    "content22",
    "content23",
    "content24",
    "content25",
    "content26",
    "content27"
  ],
  content22: [
    "content22",
    "content23",
    "content24",
    "content25",
    "content26",
    "content27"
  ],
  content23: ["content23"],
  content24: ["content24", "content25", "content26", "content27"],
  content25: ["content25", "content26", "content27"],
  content26: ["content26"],
  content27: ["content27"],
  bewertungen: ["bewertungen"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  content18: "div";
  content21: "div";
  content22: "div";
  content23: "div";
  content24: "div";
  content25: "div";
  content26: "div";
  content27: "div";
  bewertungen: typeof Bewertungen;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicProduktInfo__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicProduktInfo__VariantsArgs;
    args?: PlasmicProduktInfo__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicProduktInfo__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicProduktInfo__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicProduktInfo__ArgProps,
          internalVariantPropNames: PlasmicProduktInfo__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicProduktInfo__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicProduktInfo";
  } else {
    func.displayName = `PlasmicProduktInfo.${nodeName}`;
  }
  return func;
}

export const PlasmicProduktInfo = Object.assign(
  // Top-level PlasmicProduktInfo renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    content18: makeNodeComponent("content18"),
    content21: makeNodeComponent("content21"),
    content22: makeNodeComponent("content22"),
    content23: makeNodeComponent("content23"),
    content24: makeNodeComponent("content24"),
    content25: makeNodeComponent("content25"),
    content26: makeNodeComponent("content26"),
    content27: makeNodeComponent("content27"),
    bewertungen: makeNodeComponent("bewertungen"),

    // Metadata about props expected for PlasmicProduktInfo
    internalVariantProps: PlasmicProduktInfo__VariantProps,
    internalArgProps: PlasmicProduktInfo__ArgProps
  }
);

export default PlasmicProduktInfo;
/* prettier-ignore-end */
