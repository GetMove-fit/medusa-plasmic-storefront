// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: o7C61dL2AAD7uCRtgHRJ1p
// Component: T11kSpSq58ua

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: o7C61dL2AAD7uCRtgHRJ1p/projectcss
import sty from "./PlasmicPfeilButton.module.css"; // plasmic-import: T11kSpSq58ua/css

import PfeilIcon from "./icons/PlasmicIcon__Pfeil"; // plasmic-import: QKSFoWVnjtFs/icon

createPlasmicElementProxy;

export type PlasmicPfeilButton__VariantMembers = {
  zuruck: "zuruck";
  light: "light";
};
export type PlasmicPfeilButton__VariantsArgs = {
  zuruck?: SingleBooleanChoiceArg<"zuruck">;
  light?: SingleBooleanChoiceArg<"light">;
};
type VariantPropType = keyof PlasmicPfeilButton__VariantsArgs;
export const PlasmicPfeilButton__VariantProps = new Array<VariantPropType>(
  "zuruck",
  "light"
);

export type PlasmicPfeilButton__ArgsType = {
  disabled?: boolean;
  changeSlide?: () => void;
};
type ArgPropType = keyof PlasmicPfeilButton__ArgsType;
export const PlasmicPfeilButton__ArgProps = new Array<ArgPropType>(
  "disabled",
  "changeSlide"
);

export type PlasmicPfeilButton__OverridesType = {
  root?: Flex__<"button">;
  svg?: Flex__<"svg">;
};

export interface DefaultPfeilButtonProps {
  disabled?: boolean;
  changeSlide?: () => void;
  zuruck?: SingleBooleanChoiceArg<"zuruck">;
  light?: SingleBooleanChoiceArg<"light">;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicPfeilButton__RenderFunc(props: {
  variants: PlasmicPfeilButton__VariantsArgs;
  args: PlasmicPfeilButton__ArgsType;
  overrides: PlasmicPfeilButton__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {
          disabled: false
        },
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "zuruck",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.zuruck
      },
      {
        path: "light",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.light
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  return (
    <button
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.button,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root,
        {
          [sty.rootlight]: hasVariant($state, "light", "light"),
          [sty.rootzuruck]: hasVariant($state, "zuruck", "zuruck"),
          [sty.rootzuruck_light]:
            hasVariant($state, "zuruck", "zuruck") &&
            hasVariant($state, "light", "light")
        }
      )}
      disabled={(() => {
        try {
          return $props.disabled;
        } catch (e) {
          if (
            e instanceof TypeError ||
            e?.plasmicType === "PlasmicUndefinedDataError"
          ) {
            return false;
          }
          throw e;
        }
      })()}
      onClick={async event => {
        const $steps = {};

        $steps["runChangeSlide"] = true
          ? (() => {
              const actionArgs = { eventRef: $props["changeSlide"] };
              return (({ eventRef, args }) => {
                return eventRef?.(...(args ?? []));
              })?.apply(null, [actionArgs]);
            })()
          : undefined;
        if (
          $steps["runChangeSlide"] != null &&
          typeof $steps["runChangeSlide"] === "object" &&
          typeof $steps["runChangeSlide"].then === "function"
        ) {
          $steps["runChangeSlide"] = await $steps["runChangeSlide"];
        }
      }}
    >
      <PfeilIcon
        data-plasmic-name={"svg"}
        data-plasmic-override={overrides.svg}
        className={classNames(projectcss.all, sty.svg, {
          [sty.svglight]: hasVariant($state, "light", "light"),
          [sty.svgzuruck]: hasVariant($state, "zuruck", "zuruck"),
          [sty.svgzuruck_light]:
            hasVariant($state, "zuruck", "zuruck") &&
            hasVariant($state, "light", "light")
        })}
        role={"img"}
        style={(() => {
          try {
            return {
              color:
                $state.beliebteProdukteSlider.currentSlide === 0
                  ? "#2E2E2E"
                  : "white"
            };
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return undefined;
            }
            throw e;
          }
        })()}
      />
    </button>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "svg"],
  svg: ["svg"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "button";
  svg: "svg";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicPfeilButton__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicPfeilButton__VariantsArgs;
    args?: PlasmicPfeilButton__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicPfeilButton__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicPfeilButton__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicPfeilButton__ArgProps,
          internalVariantPropNames: PlasmicPfeilButton__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicPfeilButton__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicPfeilButton";
  } else {
    func.displayName = `PlasmicPfeilButton.${nodeName}`;
  }
  return func;
}

export const PlasmicPfeilButton = Object.assign(
  // Top-level PlasmicPfeilButton renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    svg: makeNodeComponent("svg"),

    // Metadata about props expected for PlasmicPfeilButton
    internalVariantProps: PlasmicPfeilButton__VariantProps,
    internalArgProps: PlasmicPfeilButton__ArgProps
  }
);

export default PlasmicPfeilButton;
/* prettier-ignore-end */
