// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: o7C61dL2AAD7uCRtgHRJ1p
// Component: oGtCQIp1hcVy

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import VariantKarte from "../../VariantKarte"; // plasmic-import: DDHEaM0ZdLCe/component
import { GraphqlFetcher } from "@plasmicpkgs/plasmic-query";
import FilterZeile from "../../FilterZeile"; // plasmic-import: Pd7_9MA2ajnP/component

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: o7C61dL2AAD7uCRtgHRJ1p/projectcss
import sty from "./PlasmicAttributFilter.module.css"; // plasmic-import: oGtCQIp1hcVy/css

import PfeilIcon from "./icons/PlasmicIcon__Pfeil"; // plasmic-import: QKSFoWVnjtFs/icon

createPlasmicElementProxy;

export type PlasmicAttributFilter__VariantMembers = {
  farbe: "farbe";
  offen: "offen";
};
export type PlasmicAttributFilter__VariantsArgs = {
  farbe?: SingleBooleanChoiceArg<"farbe">;
  offen?: SingleBooleanChoiceArg<"offen">;
};
type VariantPropType = keyof PlasmicAttributFilter__VariantsArgs;
export const PlasmicAttributFilter__VariantProps = new Array<VariantPropType>(
  "farbe",
  "offen"
);

export type PlasmicAttributFilter__ArgsType = {
  attribut?: string;
  auswahl?: string;
  optionen?: any;
  onSelectionChanged?: (value: string) => void;
};
type ArgPropType = keyof PlasmicAttributFilter__ArgsType;
export const PlasmicAttributFilter__ArgProps = new Array<ArgPropType>(
  "attribut",
  "auswahl",
  "optionen",
  "onSelectionChanged"
);

export type PlasmicAttributFilter__OverridesType = {
  root?: Flex__<"div">;
  button?: Flex__<"button">;
  svg?: Flex__<"svg">;
  graphQlFetcher?: Flex__<typeof GraphqlFetcher>;
  content24?: Flex__<"div">;
  filterZeile?: Flex__<typeof FilterZeile>;
};

export interface DefaultAttributFilterProps {
  attribut?: string;
  auswahl?: string;
  optionen?: any;
  onSelectionChanged?: (value: string) => void;
  farbe?: SingleBooleanChoiceArg<"farbe">;
  offen?: SingleBooleanChoiceArg<"offen">;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicAttributFilter__RenderFunc(props: {
  variants: PlasmicAttributFilter__VariantsArgs;
  args: PlasmicAttributFilter__ArgsType;
  overrides: PlasmicAttributFilter__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {
          attribut: "Attribut",
          optionen: {}
        },
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "farbe",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.farbe
      },
      {
        path: "offen",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.offen
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root,
        { [sty.rootoffen]: hasVariant($state, "offen", "offen") }
      )}
    >
      <button
        data-plasmic-name={"button"}
        data-plasmic-override={overrides.button}
        className={classNames(projectcss.all, projectcss.button, sty.button, {
          [sty.buttonfarbe]: hasVariant($state, "farbe", "farbe"),
          [sty.buttonoffen]: hasVariant($state, "offen", "offen"),
          [sty.buttonoffen_farbe]:
            hasVariant($state, "farbe", "farbe") &&
            hasVariant($state, "offen", "offen")
        })}
        onClick={async event => {
          const $steps = {};

          $steps["updateOffen"] = true
            ? (() => {
                const actionArgs = { vgroup: "offen", operation: 2 };
                return (({ vgroup, value }) => {
                  if (typeof value === "string") {
                    value = [value];
                  }

                  const oldValue = $stateGet($state, vgroup);
                  $stateSet($state, vgroup, !oldValue);
                  return !oldValue;
                })?.apply(null, [actionArgs]);
              })()
            : undefined;
          if (
            $steps["updateOffen"] != null &&
            typeof $steps["updateOffen"] === "object" &&
            typeof $steps["updateOffen"].then === "function"
          ) {
            $steps["updateOffen"] = await $steps["updateOffen"];
          }
        }}
      >
        <Stack__
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox__l91H9, {
            [sty.freeBoxfarbe__l91H9Z75Hx]: hasVariant(
              $state,
              "farbe",
              "farbe"
            ),
            [sty.freeBoxoffen__l91H9TWk88]: hasVariant($state, "offen", "offen")
          })}
        >
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__m85XU
            )}
          >
            <React.Fragment>
              {(() => {
                try {
                  return $props.attribut;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return "Farbe";
                  }
                  throw e;
                }
              })()}
            </React.Fragment>
          </div>
          <VariantKarte
            className={classNames("__wab_instance", sty.variantKarte__wtyRk, {
              [sty.variantKartefarbe__wtyRkz75Hx]: hasVariant(
                $state,
                "farbe",
                "farbe"
              )
            })}
            farbe={true}
          />

          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__irEq0
            )}
          >
            <React.Fragment>{$props.auswahl}</React.Fragment>
          </div>
        </Stack__>
        <PfeilIcon
          data-plasmic-name={"svg"}
          data-plasmic-override={overrides.svg}
          className={classNames(projectcss.all, sty.svg, {
            [sty.svgfarbe]: hasVariant($state, "farbe", "farbe"),
            [sty.svgoffen]: hasVariant($state, "offen", "offen")
          })}
          role={"img"}
        />
      </button>
      <Stack__
        as={"div"}
        hasGap={true}
        className={classNames(projectcss.all, sty.freeBox___8PCdc, {
          [sty.freeBoxfarbe___8PCdcz75Hx]: hasVariant($state, "farbe", "farbe"),
          [sty.freeBoxoffen___8PCdcTWk88]: hasVariant($state, "offen", "offen"),
          [sty.freeBoxoffen_farbe___8PCdcTWk88Z75Hx]:
            hasVariant($state, "farbe", "farbe") &&
            hasVariant($state, "offen", "offen")
        })}
      >
        <GraphqlFetcher
          data-plasmic-name={"graphQlFetcher"}
          data-plasmic-override={overrides.graphQlFetcher}
          className={classNames("__wab_instance", sty.graphQlFetcher, {
            [sty.graphQlFetcherfarbe]: hasVariant($state, "farbe", "farbe")
          })}
          dataName={"fetchedColors"}
          errorDisplay={
            <DataCtxReader__>{$ctx => "Error fetching data"}</DataCtxReader__>
          }
          errorName={"fetchError"}
          loadingDisplay={
            <DataCtxReader__>{$ctx => "Loading..."}</DataCtxReader__>
          }
          method={"POST"}
          noLayout={false}
          query={{
            query:
              'query GetColorValues {\n  attributes(filter: { slugs: ["farbe"] }, first: 1) {\n    edges {\n      node {\n        name\n        choices(first: 100) {\n          edges {\n            node {\n              name\n              value\n            }\n          }\n        }\n      }\n    }\n  }\n}\n',
            variables: {}
          }}
          url={"https://api.ewl.ryze-media.at/graphql/"}
        >
          <DataCtxReader__>
            {$ctx => (
              <Stack__
                as={"div"}
                data-plasmic-name={"content24"}
                data-plasmic-override={overrides.content24}
                hasGap={true}
                className={classNames(projectcss.all, sty.content24, {
                  [sty.content24farbe]: hasVariant($state, "farbe", "farbe")
                })}
              >
                {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
                  (() => {
                    try {
                      return Object.entries($props.optionen);
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return [];
                      }
                      throw e;
                    }
                  })()
                ).map((__plasmic_item_0, __plasmic_idx_0) => {
                  const currentOption = __plasmic_item_0;
                  const currentIndex = __plasmic_idx_0;
                  return (
                    <VariantKarte
                      className={classNames(
                        "__wab_instance",
                        sty.variantKarte__tsBmu,
                        {
                          [sty.variantKartefarbe__tsBmuz75Hx]: hasVariant(
                            $state,
                            "farbe",
                            "farbe"
                          )
                        }
                      )}
                      farbe={true}
                      key={currentIndex}
                      selected={(() => {
                        try {
                          return $props.auswahl === currentOption[0];
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return [];
                          }
                          throw e;
                        }
                      })()}
                      value={(() => {
                        try {
                          return $ctx.fetchedColors.data.attributes.edges[0].node.choices.edges.find(
                            f => f.node.name === currentOption[0]
                          ).node.value;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return undefined;
                          }
                          throw e;
                        }
                      })()}
                    />
                  );
                })}
              </Stack__>
            )}
          </DataCtxReader__>
        </GraphqlFetcher>
        {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
          (() => {
            try {
              return Object.entries($props.optionen);
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return [];
              }
              throw e;
            }
          })()
        ).map((__plasmic_item_0, __plasmic_idx_0) => {
          const currentOption = __plasmic_item_0;
          const currentIndex = __plasmic_idx_0;
          return (
            <FilterZeile
              data-plasmic-name={"filterZeile"}
              data-plasmic-override={overrides.filterZeile}
              className={classNames("__wab_instance", sty.filterZeile, {
                [sty.filterZeileoffen]: hasVariant($state, "offen", "offen"),
                [sty.filterZeileoffen_farbe]:
                  hasVariant($state, "farbe", "farbe") &&
                  hasVariant($state, "offen", "offen")
              })}
              indikator={(() => {
                try {
                  return currentOption[1];
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return undefined;
                  }
                  throw e;
                }
              })()}
              key={currentIndex}
              name={(() => {
                try {
                  return currentOption[0];
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return undefined;
                  }
                  throw e;
                }
              })()}
              onSelected={async () => {
                const $steps = {};

                $steps["runOnSelectionChanged"] = true
                  ? (() => {
                      const actionArgs = {
                        eventRef: $props["onSelectionChanged"],
                        args: [
                          (() => {
                            try {
                              return currentOption[0];
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })()
                        ]
                      };
                      return (({ eventRef, args }) => {
                        return eventRef?.(...(args ?? []));
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["runOnSelectionChanged"] != null &&
                  typeof $steps["runOnSelectionChanged"] === "object" &&
                  typeof $steps["runOnSelectionChanged"].then === "function"
                ) {
                  $steps["runOnSelectionChanged"] = await $steps[
                    "runOnSelectionChanged"
                  ];
                }
              }}
              selected={(() => {
                try {
                  return $props.auswahl === currentOption[0];
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return [];
                  }
                  throw e;
                }
              })()}
            />
          );
        })}
      </Stack__>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "button", "svg", "graphQlFetcher", "content24", "filterZeile"],
  button: ["button", "svg"],
  svg: ["svg"],
  graphQlFetcher: ["graphQlFetcher", "content24"],
  content24: ["content24"],
  filterZeile: ["filterZeile"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  button: "button";
  svg: "svg";
  graphQlFetcher: typeof GraphqlFetcher;
  content24: "div";
  filterZeile: typeof FilterZeile;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicAttributFilter__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicAttributFilter__VariantsArgs;
    args?: PlasmicAttributFilter__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicAttributFilter__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicAttributFilter__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicAttributFilter__ArgProps,
          internalVariantPropNames: PlasmicAttributFilter__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicAttributFilter__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicAttributFilter";
  } else {
    func.displayName = `PlasmicAttributFilter.${nodeName}`;
  }
  return func;
}

export const PlasmicAttributFilter = Object.assign(
  // Top-level PlasmicAttributFilter renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    button: makeNodeComponent("button"),
    svg: makeNodeComponent("svg"),
    graphQlFetcher: makeNodeComponent("graphQlFetcher"),
    content24: makeNodeComponent("content24"),
    filterZeile: makeNodeComponent("filterZeile"),

    // Metadata about props expected for PlasmicAttributFilter
    internalVariantProps: PlasmicAttributFilter__VariantProps,
    internalArgProps: PlasmicAttributFilter__ArgProps
  }
);

export default PlasmicAttributFilter;
/* prettier-ignore-end */
