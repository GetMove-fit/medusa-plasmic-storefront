// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: o7C61dL2AAD7uCRtgHRJ1p
// Component: Koc5L53D7S3j

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: o7C61dL2AAD7uCRtgHRJ1p/projectcss
import sty from "./PlasmicKategorieKarte.module.css"; // plasmic-import: Koc5L53D7S3j/css

createPlasmicElementProxy;

export type PlasmicKategorieKarte__VariantMembers = {};
export type PlasmicKategorieKarte__VariantsArgs = {};
type VariantPropType = keyof PlasmicKategorieKarte__VariantsArgs;
export const PlasmicKategorieKarte__VariantProps = new Array<VariantPropType>();

export type PlasmicKategorieKarte__ArgsType = {
  bild?: React.ComponentProps<typeof PlasmicImg__>["src"];
  name?: string;
};
type ArgPropType = keyof PlasmicKategorieKarte__ArgsType;
export const PlasmicKategorieKarte__ArgProps = new Array<ArgPropType>(
  "bild",
  "name"
);

export type PlasmicKategorieKarte__OverridesType = {
  kategorieKarte?: Flex__<"a"> & Partial<LinkProps>;
  img?: Flex__<typeof PlasmicImg__>;
  content2?: Flex__<"div">;
  kategorie?: Flex__<"div">;
  produkte?: Flex__<"div">;
};

export interface DefaultKategorieKarteProps {
  bild?: React.ComponentProps<typeof PlasmicImg__>["src"];
  name?: string;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicKategorieKarte__RenderFunc(props: {
  variants: PlasmicKategorieKarte__VariantsArgs;
  args: PlasmicKategorieKarte__ArgsType;
  overrides: PlasmicKategorieKarte__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {
          bild: undefined,
          name: "Titel"
        },
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  return (
    <PlasmicLink__
      data-plasmic-name={"kategorieKarte"}
      data-plasmic-override={overrides.kategorieKarte}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.a,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.kategorieKarte
      )}
      component={Link}
      href={(() => {
        try {
          return undefined;
        } catch (e) {
          if (
            e instanceof TypeError ||
            e?.plasmicType === "PlasmicUndefinedDataError"
          ) {
            return undefined;
          }
          throw e;
        }
      })()}
      platform={"nextjs"}
    >
      <PlasmicImg__
        data-plasmic-name={"img"}
        data-plasmic-override={overrides.img}
        alt={""}
        className={classNames(sty.img)}
        displayHeight={"auto"}
        displayMaxHeight={"none"}
        displayMaxWidth={"none"}
        displayMinHeight={"0"}
        displayMinWidth={"0"}
        displayWidth={"auto"}
        loading={"lazy"}
        src={args.bild}
      />

      <Stack__
        as={"div"}
        data-plasmic-name={"content2"}
        data-plasmic-override={overrides.content2}
        hasGap={true}
        className={classNames(projectcss.all, sty.content2)}
      >
        <div
          data-plasmic-name={"kategorie"}
          data-plasmic-override={overrides.kategorie}
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.kategorie
          )}
        >
          <React.Fragment>
            {(() => {
              try {
                return $props.name;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return "Heizung";
                }
                throw e;
              }
            })()}
          </React.Fragment>
        </div>
        <div
          data-plasmic-name={"produkte"}
          data-plasmic-override={overrides.produkte}
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.produkte
          )}
        >
          <React.Fragment>
            {($ctx.kategorien?.data.categories.edges.find(
              kategorie => kategorie.node.name === $props.name
            )?.node.products.totalCount ?? "?") + " Produkte"}
          </React.Fragment>
        </div>
      </Stack__>
    </PlasmicLink__>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  kategorieKarte: [
    "kategorieKarte",
    "img",
    "content2",
    "kategorie",
    "produkte"
  ],
  img: ["img"],
  content2: ["content2", "kategorie", "produkte"],
  kategorie: ["kategorie"],
  produkte: ["produkte"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  kategorieKarte: "a";
  img: typeof PlasmicImg__;
  content2: "div";
  kategorie: "div";
  produkte: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicKategorieKarte__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicKategorieKarte__VariantsArgs;
    args?: PlasmicKategorieKarte__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicKategorieKarte__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicKategorieKarte__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicKategorieKarte__ArgProps,
          internalVariantPropNames: PlasmicKategorieKarte__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicKategorieKarte__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "kategorieKarte") {
    func.displayName = "PlasmicKategorieKarte";
  } else {
    func.displayName = `PlasmicKategorieKarte.${nodeName}`;
  }
  return func;
}

export const PlasmicKategorieKarte = Object.assign(
  // Top-level PlasmicKategorieKarte renders the root element
  makeNodeComponent("kategorieKarte"),
  {
    // Helper components rendering sub-elements
    img: makeNodeComponent("img"),
    content2: makeNodeComponent("content2"),
    kategorie: makeNodeComponent("kategorie"),
    produkte: makeNodeComponent("produkte"),

    // Metadata about props expected for PlasmicKategorieKarte
    internalVariantProps: PlasmicKategorieKarte__VariantProps,
    internalArgProps: PlasmicKategorieKarte__ArgProps
  }
);

export default PlasmicKategorieKarte;
/* prettier-ignore-end */
