// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: o7C61dL2AAD7uCRtgHRJ1p
// Component: NyRhNIONq4Wk

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import {
  executePlasmicDataOp,
  usePlasmicDataOp,
  usePlasmicInvalidate
} from "@plasmicapp/react-web/lib/data-sources";

import Header from "../../Header"; // plasmic-import: flZbWZPtlB4m/component
import { SliderWrapper } from "@plasmicpkgs/react-slick";
import { sliderHelpers as SliderWrapper_Helpers } from "@plasmicpkgs/react-slick";
import VariantKarte from "../../VariantKarte"; // plasmic-import: DDHEaM0ZdLCe/component
import ProduktInfo from "../../ProduktInfo"; // plasmic-import: KeJX5RODlqVN/component
import PfeilButton from "../../PfeilButton"; // plasmic-import: T11kSpSq58ua/component
import { GraphqlFetcher } from "@plasmicpkgs/plasmic-query";
import ProduktKarte from "../../ProduktKarte"; // plasmic-import: kLfmrXKYIGkV/component
import Footer from "../../Footer"; // plasmic-import: xGg6X7hlsmRZ/component
import { Fetcher } from "@plasmicapp/react-web/lib/data-sources";

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: o7C61dL2AAD7uCRtgHRJ1p/projectcss
import sty from "./PlasmicProduktdetails.module.css"; // plasmic-import: NyRhNIONq4Wk/css

import _01AlignCenter17Icon from "./icons/PlasmicIcon___01AlignCenter17"; // plasmic-import: sKlPPttdXYuZ/icon
import RatingIcon from "./icons/PlasmicIcon__Rating"; // plasmic-import: 7QQR5csl6Mwl/icon
import Icon6Icon from "./icons/PlasmicIcon__Icon6"; // plasmic-import: qXan75AwMz9_/icon
import _01AlignCenter18Icon from "./icons/PlasmicIcon___01AlignCenter18"; // plasmic-import: 1ilfmqXCEEUu/icon
import Icon7Icon from "./icons/PlasmicIcon__Icon7"; // plasmic-import: ajYV3iJPzpB4/icon
import _01AlignCenter19Icon from "./icons/PlasmicIcon___01AlignCenter19"; // plasmic-import: fYS5K70ntGr6/icon
import Minus2Icon from "./icons/PlasmicIcon__Minus2"; // plasmic-import: NmNEQmwOedJr/icon
import VectorIcon from "./icons/PlasmicIcon__Vector"; // plasmic-import: VeGvMVpEDUzG/icon

createPlasmicElementProxy;

export type PlasmicProduktdetails__VariantMembers = {};
export type PlasmicProduktdetails__VariantsArgs = {};
type VariantPropType = keyof PlasmicProduktdetails__VariantsArgs;
export const PlasmicProduktdetails__VariantProps = new Array<VariantPropType>();

export type PlasmicProduktdetails__ArgsType = {};
type ArgPropType = keyof PlasmicProduktdetails__ArgsType;
export const PlasmicProduktdetails__ArgProps = new Array<ArgPropType>();

export type PlasmicProduktdetails__OverridesType = {
  root?: Flex__<"div">;
  header?: Flex__<typeof Header>;
  content?: Flex__<"div">;
  breadcrumb?: Flex__<"div">;
  angleSmall?: Flex__<"div">;
  angleSmall2?: Flex__<"div">;
  detailsProduct?: Flex__<"div">;
  content16?: Flex__<"div">;
  sliderCarousel?: Flex__<typeof SliderWrapper>;
  content2?: Flex__<"div">;
  content3?: Flex__<"div">;
  content4?: Flex__<"div">;
  content5?: Flex__<"div">;
  frame9837?: Flex__<"div">;
  cesilMicroVelvetChair?: Flex__<"div">;
  frame9836?: Flex__<"div">;
  reviews?: Flex__<"div">;
  caption?: Flex__<"div">;
  freeDeliveryFrom1000?: Flex__<"div">;
  frame9826?: Flex__<"div">;
  content6?: Flex__<"div">;
  content7?: Flex__<"div">;
  color?: Flex__<"div">;
  color2?: Flex__<"div">;
  variantKarte?: Flex__<typeof VariantKarte>;
  content10?: Flex__<"div">;
  content11?: Flex__<"div">;
  iconButton?: Flex__<"div">;
  icon?: Flex__<"div">;
  fiRsHeart?: Flex__<"div">;
  icon2?: Flex__<"div">;
  icon3?: Flex__<"div">;
  fiRsShare?: Flex__<"div">;
  button?: Flex__<"div">;
  quantity?: Flex__<"div">;
  numberInput?: Flex__<"input">;
  buttonNoIcon?: Flex__<"div">;
  button2?: Flex__<"div">;
  buttonNoIcon2?: Flex__<"div">;
  button3?: Flex__<"div">;
  content12?: Flex__<"div">;
  content13?: Flex__<"div">;
  content14?: Flex__<"div">;
  content15?: Flex__<"div">;
  produktInfo?: Flex__<typeof ProduktInfo>;
  section?: Flex__<"section">;
  h2?: Flex__<"h2">;
  graphQlFetcher?: Flex__<typeof GraphqlFetcher>;
  angeboteSlider?: Flex__<typeof SliderWrapper>;
  produktKarte?: Flex__<typeof ProduktKarte>;
  footer?: Flex__<typeof Footer>;
};

export interface DefaultProduktdetailsProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicProduktdetails__RenderFunc(props: {
  variants: PlasmicProduktdetails__VariantsArgs;
  args: PlasmicProduktdetails__ArgsType;
  overrides: PlasmicProduktdetails__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  let [$queries, setDollarQueries] = React.useState<
    Record<string, ReturnType<typeof usePlasmicDataOp>>
  >({});
  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "sliderCarousel.currentSlide",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 0,

        refName: "sliderCarousel",
        onMutate: generateOnMutateForSpec("currentSlide", SliderWrapper_Helpers)
      },
      {
        path: "angeboteSlider.currentSlide",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 0,

        refName: "angeboteSlider",
        onMutate: generateOnMutateForSpec("currentSlide", SliderWrapper_Helpers)
      },
      {
        path: "selectedVariant",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $queries.produkt.data.response.data.product.variants.find(
                v =>
                  v.id ===
                  $queries.produkt.data.response.data.product.defaultVariant.id
              );
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return {};
              }
              throw e;
            }
          })()
      },
      {
        path: "kaufmenge",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 1
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: $queries,
    $refs
  });

  const new$Queries: Record<string, ReturnType<typeof usePlasmicDataOp>> = {
    produkt: usePlasmicDataOp(() => {
      return {
        sourceId: "oz1JYqc2q825zTHSJyp6bJ",
        opId: "89fe6e6b-5c0a-46ad-a129-9567cd5815ac",
        userArgs: {
          variables: [$ctx.params.slug]
        },
        cacheKey: `plasmic.$.89fe6e6b-5c0a-46ad-a129-9567cd5815ac.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    })
  };
  if (Object.keys(new$Queries).some(k => new$Queries[k] !== $queries[k])) {
    setDollarQueries(new$Queries);

    $queries = new$Queries;
  }

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <Stack__
          as={"div"}
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          hasGap={true}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            sty.root
          )}
        >
          <div className={classNames(projectcss.all, sty.freeBox__s9Eb6)}>
            <Header
              data-plasmic-name={"header"}
              data-plasmic-override={overrides.header}
              className={classNames("__wab_instance", sty.header)}
            />

            <Stack__
              as={"div"}
              data-plasmic-name={"content"}
              data-plasmic-override={overrides.content}
              hasGap={true}
              className={classNames(projectcss.all, sty.content)}
            >
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__pKij)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___3W4Og
                  )}
                >
                  {"Kategorien"}
                </div>
                <Stack__
                  as={"div"}
                  data-plasmic-name={"breadcrumb"}
                  data-plasmic-override={overrides.breadcrumb}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.breadcrumb)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__lgT0
                    )}
                  >
                    {"Home"}
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__hzTs5)}
                  >
                    <div
                      data-plasmic-name={"angleSmall"}
                      data-plasmic-override={overrides.angleSmall}
                      className={classNames(projectcss.all, sty.angleSmall)}
                    >
                      <_01AlignCenter17Icon
                        className={classNames(projectcss.all, sty.svg___58XSm)}
                        role={"img"}
                      />
                    </div>
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__gDc20
                    )}
                  >
                    {"Categories"}
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__x8F4H)}
                  >
                    {false ? (
                      <div
                        data-plasmic-name={"angleSmall2"}
                        data-plasmic-override={overrides.angleSmall2}
                        className={classNames(projectcss.all, sty.angleSmall2)}
                      >
                        <_01AlignCenter17Icon
                          className={classNames(projectcss.all, sty.svg__wQntg)}
                          role={"img"}
                        />
                      </div>
                    ) : null}
                  </div>
                  {false ? (
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___5AkUv
                      )}
                    >
                      {"Categories"}
                    </div>
                  ) : null}
                </Stack__>
              </Stack__>
            </Stack__>
          </div>
          <Stack__
            as={"div"}
            data-plasmic-name={"detailsProduct"}
            data-plasmic-override={overrides.detailsProduct}
            hasGap={true}
            className={classNames(projectcss.all, sty.detailsProduct)}
          >
            <Stack__
              as={"div"}
              data-plasmic-name={"content16"}
              data-plasmic-override={overrides.content16}
              hasGap={true}
              className={classNames(projectcss.all, sty.content16)}
            >
              {(() => {
                const child$Props = {
                  beforeChange: generateStateOnChangePropForCodeComponents(
                    $state,
                    "currentSlide",
                    ["sliderCarousel", "currentSlide"],
                    SliderWrapper_Helpers
                  ),
                  className: classNames("__wab_instance", sty.sliderCarousel),
                  initialSlide: generateStateValueProp($state, [
                    "sliderCarousel",
                    "currentSlide"
                  ]),
                  ref: ref => {
                    $refs["sliderCarousel"] = ref;
                  },
                  sliderScopeClassName: sty["sliderCarousel__slider"]
                };
                initializeCodeComponentStates(
                  $state,
                  [
                    {
                      name: "currentSlide",
                      plasmicStateName: "sliderCarousel.currentSlide"
                    }
                  ],
                  [],
                  SliderWrapper_Helpers ?? {},
                  child$Props
                );

                return (
                  <SliderWrapper
                    data-plasmic-name={"sliderCarousel"}
                    data-plasmic-override={overrides.sliderCarousel}
                    {...child$Props}
                  >
                    {(_par =>
                      !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                      (() => {
                        try {
                          return $state.selectedVariant.media;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return [];
                          }
                          throw e;
                        }
                      })()
                    ).map((__plasmic_item_0, __plasmic_idx_0) => {
                      const currentImage = __plasmic_item_0;
                      const currentIndex = __plasmic_idx_0;
                      return (
                        <PlasmicImg__
                          alt={""}
                          className={classNames(sty.img__epasd)}
                          displayHeight={"auto"}
                          displayMaxHeight={"none"}
                          displayMaxWidth={"100%"}
                          displayMinHeight={"0"}
                          displayMinWidth={"0"}
                          displayWidth={"auto"}
                          height={"586px"}
                          key={currentIndex}
                          src={(() => {
                            try {
                              return currentImage.url;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return "https://static1.plasmic.app/components/react-slick/slide1.png";
                              }
                              throw e;
                            }
                          })()}
                        />
                      );
                    })}
                    <div
                      className={classNames(projectcss.all, sty.freeBox__fnPch)}
                    />

                    <div
                      className={classNames(projectcss.all, sty.freeBox__kbhtf)}
                    >
                      <PlasmicImg__
                        alt={""}
                        className={classNames(sty.img___94Avs)}
                        displayHeight={"auto"}
                        displayMaxHeight={"none"}
                        displayMaxWidth={"100%"}
                        displayMinHeight={"0"}
                        displayMinWidth={"0"}
                        displayWidth={"auto"}
                        src={
                          "https://static1.plasmic.app/components/react-slick/slide2.png"
                        }
                      />
                    </div>
                    <div
                      className={classNames(projectcss.all, sty.freeBox__cazoI)}
                    >
                      <PlasmicImg__
                        alt={""}
                        className={classNames(sty.img__agvcn)}
                        displayHeight={"auto"}
                        displayMaxHeight={"none"}
                        displayMaxWidth={"100%"}
                        displayMinHeight={"0"}
                        displayMinWidth={"0"}
                        displayWidth={"auto"}
                        src={
                          "https://static1.plasmic.app/components/react-slick/slide3.png"
                        }
                      />
                    </div>
                  </SliderWrapper>
                );
              })()}
              <Stack__
                as={"div"}
                data-plasmic-name={"content2"}
                data-plasmic-override={overrides.content2}
                hasGap={true}
                className={classNames(projectcss.all, sty.content2)}
              >
                <Stack__
                  as={"div"}
                  data-plasmic-name={"content3"}
                  data-plasmic-override={overrides.content3}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.content3)}
                >
                  <Stack__
                    as={"div"}
                    data-plasmic-name={"content4"}
                    data-plasmic-override={overrides.content4}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.content4)}
                  >
                    <Stack__
                      as={"div"}
                      data-plasmic-name={"content5"}
                      data-plasmic-override={overrides.content5}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.content5)}
                    >
                      <Stack__
                        as={"div"}
                        data-plasmic-name={"frame9837"}
                        data-plasmic-override={overrides.frame9837}
                        hasGap={true}
                        className={classNames(projectcss.all, sty.frame9837)}
                      >
                        <div
                          data-plasmic-name={"cesilMicroVelvetChair"}
                          data-plasmic-override={
                            overrides.cesilMicroVelvetChair
                          }
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.cesilMicroVelvetChair
                          )}
                        >
                          <React.Fragment>
                            {(() => {
                              try {
                                return $queries.produkt.data.response.data
                                  .product.name;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return "Produktbezeichnung";
                                }
                                throw e;
                              }
                            })()}
                          </React.Fragment>
                        </div>
                        <Stack__
                          as={"div"}
                          data-plasmic-name={"frame9836"}
                          data-plasmic-override={overrides.frame9836}
                          hasGap={true}
                          className={classNames(projectcss.all, sty.frame9836)}
                        >
                          <Stack__
                            as={"div"}
                            data-plasmic-name={"reviews"}
                            data-plasmic-override={overrides.reviews}
                            hasGap={true}
                            className={classNames(projectcss.all, sty.reviews)}
                          >
                            <Stack__
                              as={RatingIcon}
                              hasGap={true}
                              className={classNames(
                                projectcss.all,
                                sty.svg__s6UN8
                              )}
                              role={"img"}
                            />

                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__nmb9D
                              )}
                            >
                              {"45 Reviews"}
                            </div>
                          </Stack__>
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__qiGt
                            )}
                          >
                            {"Sold: 45"}
                          </div>
                          <Stack__
                            as={"div"}
                            data-plasmic-name={"caption"}
                            data-plasmic-override={overrides.caption}
                            hasGap={true}
                            className={classNames(projectcss.all, sty.caption)}
                          >
                            <Icon6Icon
                              className={classNames(
                                projectcss.all,
                                sty.svg__cBqiR
                              )}
                              role={"img"}
                            />

                            <div
                              data-plasmic-name={"freeDeliveryFrom1000"}
                              data-plasmic-override={
                                overrides.freeDeliveryFrom1000
                              }
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.freeDeliveryFrom1000
                              )}
                            >
                              {"Free delivery from $1000"}
                            </div>
                          </Stack__>
                        </Stack__>
                      </Stack__>
                      <Stack__
                        as={"div"}
                        data-plasmic-name={"frame9826"}
                        data-plasmic-override={overrides.frame9826}
                        hasGap={true}
                        className={classNames(projectcss.all, sty.frame9826)}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__k1ETt
                          )}
                        >
                          <React.Fragment>
                            {(() => {
                              try {
                                return (() => {
                                  const { start, stop } =
                                    $queries.produkt.data.response.data.product
                                      .pricing.priceRange;
                                  const startFormatted = start.gross.amount
                                    .toFixed(2)
                                    .replace(".", ",");
                                  if (stop.gross.amount > start.gross.amount) {
                                    return `${startFormatted} € - ${stop.gross.amount
                                      .toFixed(2)
                                      .replace(".", ",")} €`;
                                  }
                                  return `${startFormatted} €`;
                                })();
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return "?,?? \u20ac";
                                }
                                throw e;
                              }
                            })()}
                          </React.Fragment>
                        </div>
                        {(() => {
                          try {
                            return $queries.produkt.data.response.data.product
                              .pricing.onSale;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return false;
                            }
                            throw e;
                          }
                        })() ? (
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__grk1V
                            )}
                          >
                            <React.Fragment>
                              {(() => {
                                try {
                                  return (() => {
                                    const { start, stop } =
                                      $queries.produkt.data.response.data
                                        .product.pricing.priceRangeUndiscounted;
                                    const startFormatted = start.gross.amount
                                      .toFixed(2)
                                      .replace(".", ",");
                                    if (
                                      stop.gross.amount > start.gross.amount
                                    ) {
                                      return `${startFormatted} € - ${stop.gross.amount
                                        .toFixed(2)
                                        .replace(".", ",")} €`;
                                    }
                                    return `${startFormatted} €`;
                                  })();
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "?,?? \u20ac";
                                  }
                                  throw e;
                                }
                              })()}
                            </React.Fragment>
                          </div>
                        ) : null}
                      </Stack__>
                    </Stack__>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__ndLcA
                      )}
                    >
                      <div
                        className={projectcss.__wab_expr_html_text}
                        dangerouslySetInnerHTML={{
                          __html: (() => {
                            try {
                              return JSON.parse(
                                $queries.produkt.data.response.data.product
                                  .description
                              ).blocks[0].data.text;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return "Keine Beschreibung";
                              }
                              throw e;
                            }
                          })()
                        }}
                      />
                    </div>
                  </Stack__>
                  <Stack__
                    as={"div"}
                    data-plasmic-name={"content6"}
                    data-plasmic-override={overrides.content6}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.content6)}
                  >
                    <div
                      data-plasmic-name={"content7"}
                      data-plasmic-override={overrides.content7}
                      className={classNames(projectcss.all, sty.content7)}
                    >
                      {(_par =>
                        !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                        (() => {
                          try {
                            return $queries.produkt.data.response.data.product.variants.reduce(
                              (acc, variant) => {
                                variant.attributes.forEach(({ attribute }) => {
                                  const { slug } = attribute;
                                  let group = acc.find(
                                    group => group.slug === slug
                                  );
                                  if (!group) {
                                    group = {
                                      ...attribute,
                                      variants: []
                                    };
                                    acc.push(group);
                                  }
                                  group.variants.push(variant);
                                });
                                return acc;
                              },
                              []
                            );
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return [];
                            }
                            throw e;
                          }
                        })()
                      ).map((__plasmic_item_0, __plasmic_idx_0) => {
                        const variant = __plasmic_item_0;
                        const currentIndex = __plasmic_idx_0;
                        return (
                          <Stack__
                            as={"div"}
                            hasGap={true}
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__zbAa6
                            )}
                            key={currentIndex}
                          >
                            <div
                              data-plasmic-name={"color"}
                              data-plasmic-override={overrides.color}
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.color
                              )}
                            >
                              <React.Fragment>
                                {(() => {
                                  try {
                                    return variant.name + ":";
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return "Farbe";
                                    }
                                    throw e;
                                  }
                                })()}
                              </React.Fragment>
                            </div>
                            <Stack__
                              as={"div"}
                              data-plasmic-name={"color2"}
                              data-plasmic-override={overrides.color2}
                              hasGap={true}
                              className={classNames(projectcss.all, sty.color2)}
                            >
                              {(_par =>
                                !_par
                                  ? []
                                  : Array.isArray(_par)
                                  ? _par
                                  : [_par])(
                                (() => {
                                  try {
                                    return variant.variants;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return [];
                                    }
                                    throw e;
                                  }
                                })()
                              ).map((__plasmic_item_1, __plasmic_idx_1) => {
                                const currentVariant = __plasmic_item_1;
                                const currentIndex = __plasmic_idx_1;
                                return (
                                  <VariantKarte
                                    data-plasmic-name={"variantKarte"}
                                    data-plasmic-override={
                                      overrides.variantKarte
                                    }
                                    className={classNames(
                                      "__wab_instance",
                                      sty.variantKarte
                                    )}
                                    key={currentIndex}
                                    onSelect={async () => {
                                      const $steps = {};

                                      $steps["updateSelectedVariant"] = true
                                        ? (() => {
                                            const actionArgs = {
                                              variable: {
                                                objRoot: $state,
                                                variablePath: [
                                                  "selectedVariant"
                                                ]
                                              },
                                              operation: 0,
                                              value: currentVariant
                                            };
                                            return (({
                                              variable,
                                              value,
                                              startIndex,
                                              deleteCount
                                            }) => {
                                              if (!variable) {
                                                return;
                                              }
                                              const { objRoot, variablePath } =
                                                variable;

                                              $stateSet(
                                                objRoot,
                                                variablePath,
                                                value
                                              );
                                              return value;
                                            })?.apply(null, [actionArgs]);
                                          })()
                                        : undefined;
                                      if (
                                        $steps["updateSelectedVariant"] !=
                                          null &&
                                        typeof $steps[
                                          "updateSelectedVariant"
                                        ] === "object" &&
                                        typeof $steps["updateSelectedVariant"]
                                          .then === "function"
                                      ) {
                                        $steps["updateSelectedVariant"] =
                                          await $steps["updateSelectedVariant"];
                                      }
                                    }}
                                    selected={(() => {
                                      try {
                                        return (
                                          $state.selectedVariant.id ===
                                          currentVariant.id
                                        );
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return [];
                                        }
                                        throw e;
                                      }
                                    })()}
                                  />
                                );
                              })}
                            </Stack__>
                          </Stack__>
                        );
                      })}
                    </div>
                    <Stack__
                      as={"div"}
                      data-plasmic-name={"content10"}
                      data-plasmic-override={overrides.content10}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.content10)}
                    >
                      <Stack__
                        as={"div"}
                        data-plasmic-name={"content11"}
                        data-plasmic-override={overrides.content11}
                        hasGap={true}
                        className={classNames(projectcss.all, sty.content11)}
                      >
                        <Stack__
                          as={"div"}
                          data-plasmic-name={"iconButton"}
                          data-plasmic-override={overrides.iconButton}
                          hasGap={true}
                          className={classNames(projectcss.all, sty.iconButton)}
                        >
                          <Stack__
                            as={"div"}
                            data-plasmic-name={"icon"}
                            data-plasmic-override={overrides.icon}
                            hasGap={true}
                            className={classNames(projectcss.all, sty.icon)}
                          >
                            <div
                              data-plasmic-name={"fiRsHeart"}
                              data-plasmic-override={overrides.fiRsHeart}
                              className={classNames(
                                projectcss.all,
                                sty.fiRsHeart
                              )}
                            >
                              <_01AlignCenter18Icon
                                className={classNames(
                                  projectcss.all,
                                  sty.svg___60PpY
                                )}
                                role={"img"}
                              />
                            </div>
                          </Stack__>
                          <Stack__
                            as={"div"}
                            data-plasmic-name={"icon2"}
                            data-plasmic-override={overrides.icon2}
                            hasGap={true}
                            className={classNames(projectcss.all, sty.icon2)}
                          >
                            <Icon7Icon
                              className={classNames(
                                projectcss.all,
                                sty.svg__gjbSb
                              )}
                              role={"img"}
                            />
                          </Stack__>
                          <Stack__
                            as={"div"}
                            data-plasmic-name={"icon3"}
                            data-plasmic-override={overrides.icon3}
                            hasGap={true}
                            className={classNames(projectcss.all, sty.icon3)}
                          >
                            <div
                              data-plasmic-name={"fiRsShare"}
                              data-plasmic-override={overrides.fiRsShare}
                              className={classNames(
                                projectcss.all,
                                sty.fiRsShare
                              )}
                            >
                              <_01AlignCenter19Icon
                                className={classNames(
                                  projectcss.all,
                                  sty.svg__fLm0J
                                )}
                                role={"img"}
                              />
                            </div>
                          </Stack__>
                        </Stack__>
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text___2Nq9F
                          )}
                        >
                          <React.Fragment>
                            {(() => {
                              try {
                                return `(${$state.selectedVariant.quantityAvailable} Stück übrig)`;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return "(0 St\u00fcck \u00fcbrig)";
                                }
                                throw e;
                              }
                            })()}
                          </React.Fragment>
                        </div>
                      </Stack__>
                      <Stack__
                        as={"div"}
                        data-plasmic-name={"button"}
                        data-plasmic-override={overrides.button}
                        hasGap={true}
                        className={classNames(projectcss.all, sty.button)}
                      >
                        <div
                          data-plasmic-name={"quantity"}
                          data-plasmic-override={overrides.quantity}
                          className={classNames(projectcss.all, sty.quantity)}
                        >
                          <button
                            className={classNames(
                              projectcss.all,
                              projectcss.button,
                              sty.button__p9Os1
                            )}
                            onClick={async event => {
                              const $steps = {};

                              $steps["updateKaufmenge"] =
                                $state.kaufmenge > 1
                                  ? (() => {
                                      const actionArgs = {
                                        variable: {
                                          objRoot: $state,
                                          variablePath: ["kaufmenge"]
                                        },
                                        operation: 3
                                      };
                                      return (({
                                        variable,
                                        value,
                                        startIndex,
                                        deleteCount
                                      }) => {
                                        if (!variable) {
                                          return;
                                        }
                                        const { objRoot, variablePath } =
                                          variable;

                                        const oldValue = $stateGet(
                                          objRoot,
                                          variablePath
                                        );
                                        $stateSet(
                                          objRoot,
                                          variablePath,
                                          oldValue - 1
                                        );
                                        return oldValue - 1;
                                      })?.apply(null, [actionArgs]);
                                    })()
                                  : undefined;
                              if (
                                $steps["updateKaufmenge"] != null &&
                                typeof $steps["updateKaufmenge"] === "object" &&
                                typeof $steps["updateKaufmenge"].then ===
                                  "function"
                              ) {
                                $steps["updateKaufmenge"] = await $steps[
                                  "updateKaufmenge"
                                ];
                              }
                            }}
                          >
                            <Minus2Icon
                              className={classNames(
                                projectcss.all,
                                sty.svg__mItnv
                              )}
                              role={"img"}
                            />
                          </button>
                          <input
                            data-plasmic-name={"numberInput"}
                            data-plasmic-override={overrides.numberInput}
                            className={classNames(
                              projectcss.all,
                              projectcss.input,
                              sty.numberInput
                            )}
                            type={"number"}
                            value={(() => {
                              try {
                                return $state.kaufmenge;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return undefined;
                                }
                                throw e;
                              }
                            })()}
                          />

                          <button
                            className={classNames(
                              projectcss.all,
                              projectcss.button,
                              sty.button__dvtnO
                            )}
                            onClick={async event => {
                              const $steps = {};

                              $steps["updateKaufmenge"] =
                                $state.kaufmenge <
                                $state.selectedVariant.quantityAvailable
                                  ? (() => {
                                      const actionArgs = {
                                        variable: {
                                          objRoot: $state,
                                          variablePath: ["kaufmenge"]
                                        },
                                        operation: 2
                                      };
                                      return (({
                                        variable,
                                        value,
                                        startIndex,
                                        deleteCount
                                      }) => {
                                        if (!variable) {
                                          return;
                                        }
                                        const { objRoot, variablePath } =
                                          variable;

                                        const oldValue = $stateGet(
                                          objRoot,
                                          variablePath
                                        );
                                        $stateSet(
                                          objRoot,
                                          variablePath,
                                          oldValue + 1
                                        );
                                        return oldValue + 1;
                                      })?.apply(null, [actionArgs]);
                                    })()
                                  : undefined;
                              if (
                                $steps["updateKaufmenge"] != null &&
                                typeof $steps["updateKaufmenge"] === "object" &&
                                typeof $steps["updateKaufmenge"].then ===
                                  "function"
                              ) {
                                $steps["updateKaufmenge"] = await $steps[
                                  "updateKaufmenge"
                                ];
                              }
                            }}
                          >
                            <VectorIcon
                              className={classNames(
                                projectcss.all,
                                sty.svg__gHaHp
                              )}
                              role={"img"}
                            />
                          </button>
                        </div>
                        <Stack__
                          as={"div"}
                          data-plasmic-name={"buttonNoIcon"}
                          data-plasmic-override={overrides.buttonNoIcon}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.buttonNoIcon
                          )}
                        >
                          <div
                            data-plasmic-name={"button2"}
                            data-plasmic-override={overrides.button2}
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.button2
                            )}
                          >
                            {"in den warenkorb"}
                          </div>
                        </Stack__>
                        <Stack__
                          as={"div"}
                          data-plasmic-name={"buttonNoIcon2"}
                          data-plasmic-override={overrides.buttonNoIcon2}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.buttonNoIcon2
                          )}
                        >
                          <div
                            data-plasmic-name={"button3"}
                            data-plasmic-override={overrides.button3}
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.button3
                            )}
                          >
                            {"jetzt kaufen"}
                          </div>
                        </Stack__>
                      </Stack__>
                    </Stack__>
                  </Stack__>
                </Stack__>
                <Stack__
                  as={"div"}
                  data-plasmic-name={"content12"}
                  data-plasmic-override={overrides.content12}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.content12)}
                >
                  <Stack__
                    as={"div"}
                    data-plasmic-name={"content13"}
                    data-plasmic-override={overrides.content13}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.content13)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__gjnzk
                      )}
                    >
                      {"Sku:"}
                    </div>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__ynxwT
                      )}
                    >
                      {"0124"}
                    </div>
                  </Stack__>
                  <Stack__
                    as={"div"}
                    data-plasmic-name={"content14"}
                    data-plasmic-override={overrides.content14}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.content14)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__mslrJ
                      )}
                    >
                      {"Category:"}
                    </div>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__gy1Yj
                      )}
                    >
                      {"Sofa"}
                    </div>
                  </Stack__>
                  <Stack__
                    as={"div"}
                    data-plasmic-name={"content15"}
                    data-plasmic-override={overrides.content15}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.content15)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__yX5XR
                      )}
                    >
                      {"Tag:"}
                    </div>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___3Mceq
                      )}
                    >
                      {"Sofa"}
                    </div>
                  </Stack__>
                </Stack__>
              </Stack__>
            </Stack__>
          </Stack__>
          <ProduktInfo
            data-plasmic-name={"produktInfo"}
            data-plasmic-override={overrides.produktInfo}
            bewertungen={true}
            className={classNames("__wab_instance", sty.produktInfo)}
            produkt={$queries.produkt.data.response.data.product}
            selectedVariant={$state.selectedVariant}
          />

          <Stack__
            as={"section"}
            data-plasmic-name={"section"}
            data-plasmic-override={overrides.section}
            hasGap={true}
            className={classNames(projectcss.all, sty.section)}
          >
            <div className={classNames(projectcss.all, sty.freeBox__l23Io)}>
              <h2
                data-plasmic-name={"h2"}
                data-plasmic-override={overrides.h2}
                className={classNames(
                  projectcss.all,
                  projectcss.h2,
                  projectcss.__wab_text,
                  sty.h2
                )}
              >
                {"\u00c4hnliche Produkte"}
              </h2>
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox___3OUp)}
              >
                <PfeilButton
                  changeSlide={async () => {
                    const $steps = {};

                    $steps["runActionOnBeliebteProdukteSlider"] = true
                      ? (() => {
                          const actionArgs = {
                            tplRef: "beliebteProdukteSlider",
                            action: "slickPrev"
                          };
                          return (({ tplRef, action, args }) => {
                            return $refs?.[tplRef]?.[action]?.(...(args ?? []));
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["runActionOnBeliebteProdukteSlider"] != null &&
                      typeof $steps["runActionOnBeliebteProdukteSlider"] ===
                        "object" &&
                      typeof $steps["runActionOnBeliebteProdukteSlider"]
                        .then === "function"
                    ) {
                      $steps["runActionOnBeliebteProdukteSlider"] =
                        await $steps["runActionOnBeliebteProdukteSlider"];
                    }
                  }}
                  className={classNames(
                    "__wab_instance",
                    sty.pfeilButton__e2UVb
                  )}
                  disabled={(() => {
                    try {
                      return $state.angeboteSlider.currentSlide === 0;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return false;
                      }
                      throw e;
                    }
                  })()}
                  zuruck={true}
                />

                <PfeilButton
                  changeSlide={async () => {
                    const $steps = {};

                    $steps["runActionOnBeliebteProdukteSlider"] = true
                      ? (() => {
                          const actionArgs = {
                            tplRef: "beliebteProdukteSlider",
                            action: "slickNext"
                          };
                          return (({ tplRef, action, args }) => {
                            return $refs?.[tplRef]?.[action]?.(...(args ?? []));
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["runActionOnBeliebteProdukteSlider"] != null &&
                      typeof $steps["runActionOnBeliebteProdukteSlider"] ===
                        "object" &&
                      typeof $steps["runActionOnBeliebteProdukteSlider"]
                        .then === "function"
                    ) {
                      $steps["runActionOnBeliebteProdukteSlider"] =
                        await $steps["runActionOnBeliebteProdukteSlider"];
                    }
                  }}
                  className={classNames(
                    "__wab_instance",
                    sty.pfeilButton__qGdkH
                  )}
                  disabled={(() => {
                    try {
                      return $state.angeboteSlider.currentSlide === 4;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return false;
                      }
                      throw e;
                    }
                  })()}
                />
              </Stack__>
            </div>
            <GraphqlFetcher
              data-plasmic-name={"graphQlFetcher"}
              data-plasmic-override={overrides.graphQlFetcher}
              className={classNames("__wab_instance", sty.graphQlFetcher)}
              dataName={"produkte"}
              errorDisplay={
                <DataCtxReader__>
                  {$ctx => "Error fetching data"}
                </DataCtxReader__>
              }
              errorName={"fetchError"}
              loadingDisplay={null}
              method={"POST"}
              noLayout={false}
              query={{
                query:
                  '{\n  products(first: 8, channel: "default-channel") {\n    edges {\n      node {\n        id\n        name\n        created\n        thumbnail(size: 346) {\n          url\n        }\n        rating\n        pricing {\n          onSale\n          discount {\n            gross {\n              amount\n            }\n          }\n          priceRange {\n            start {\n              gross {\n                amount\n              }\n            }\n            stop {\n              gross {\n                amount\n              }\n            }\n          }\n          priceRangeUndiscounted {\n            start {\n              gross {\n                amount\n              }\n            }\n            stop {\n              gross {\n                amount\n              }\n            }\n          }\n        }\n        variants {\n          attributes {\n            attribute {\n              slug\n            }\n            values {\n            \tname\n              value\n            }\n          }\n        }\n      }\n    }\n  }\n}\n',
                variables: {}
              }}
              url={"https://api.ewl.ryze-media.at/graphql/"}
            >
              <DataCtxReader__>
                {$ctx =>
                  (() => {
                    const child$Props = {
                      adaptiveHeight: true,
                      arrows: false,
                      beforeChange: generateStateOnChangePropForCodeComponents(
                        $state,
                        "currentSlide",
                        ["angeboteSlider", "currentSlide"],
                        SliderWrapper_Helpers
                      ),
                      className: classNames(
                        "__wab_instance",
                        sty.angeboteSlider
                      ),
                      infinite: false,
                      initialSlide: generateStateValueProp($state, [
                        "angeboteSlider",
                        "currentSlide"
                      ]),
                      ref: ref => {
                        $refs["angeboteSlider"] = ref;
                      },
                      sliderScopeClassName: sty["angeboteSlider__slider"],
                      slidesToShow: 4
                    };
                    initializeCodeComponentStates(
                      $state,
                      [
                        {
                          name: "currentSlide",
                          plasmicStateName: "angeboteSlider.currentSlide"
                        }
                      ],
                      [],
                      SliderWrapper_Helpers ?? {},
                      child$Props
                    );

                    return (
                      <SliderWrapper
                        data-plasmic-name={"angeboteSlider"}
                        data-plasmic-override={overrides.angeboteSlider}
                        {...child$Props}
                      >
                        {(_par =>
                          !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                          (() => {
                            try {
                              return $ctx.produkte.data.products.edges;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return [];
                              }
                              throw e;
                            }
                          })()
                        ).map((__plasmic_item_0, __plasmic_idx_0) => {
                          const currentItem = __plasmic_item_0;
                          const currentIndex = __plasmic_idx_0;
                          return (
                            <ProduktKarte
                              data-plasmic-name={"produktKarte"}
                              data-plasmic-override={overrides.produktKarte}
                              className={classNames(
                                "__wab_instance",
                                sty.produktKarte
                              )}
                              key={currentIndex}
                              produkt={(() => {
                                try {
                                  return currentItem.node;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return undefined;
                                  }
                                  throw e;
                                }
                              })()}
                            />
                          );
                        })}
                      </SliderWrapper>
                    );
                  })()
                }
              </DataCtxReader__>
            </GraphqlFetcher>
          </Stack__>
          <Footer
            data-plasmic-name={"footer"}
            data-plasmic-override={overrides.footer}
            className={classNames("__wab_instance", sty.footer)}
          />
        </Stack__>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "header",
    "content",
    "breadcrumb",
    "angleSmall",
    "angleSmall2",
    "detailsProduct",
    "content16",
    "sliderCarousel",
    "content2",
    "content3",
    "content4",
    "content5",
    "frame9837",
    "cesilMicroVelvetChair",
    "frame9836",
    "reviews",
    "caption",
    "freeDeliveryFrom1000",
    "frame9826",
    "content6",
    "content7",
    "color",
    "color2",
    "variantKarte",
    "content10",
    "content11",
    "iconButton",
    "icon",
    "fiRsHeart",
    "icon2",
    "icon3",
    "fiRsShare",
    "button",
    "quantity",
    "numberInput",
    "buttonNoIcon",
    "button2",
    "buttonNoIcon2",
    "button3",
    "content12",
    "content13",
    "content14",
    "content15",
    "produktInfo",
    "section",
    "h2",
    "graphQlFetcher",
    "angeboteSlider",
    "produktKarte",
    "footer"
  ],
  header: ["header"],
  content: ["content", "breadcrumb", "angleSmall", "angleSmall2"],
  breadcrumb: ["breadcrumb", "angleSmall", "angleSmall2"],
  angleSmall: ["angleSmall"],
  angleSmall2: ["angleSmall2"],
  detailsProduct: [
    "detailsProduct",
    "content16",
    "sliderCarousel",
    "content2",
    "content3",
    "content4",
    "content5",
    "frame9837",
    "cesilMicroVelvetChair",
    "frame9836",
    "reviews",
    "caption",
    "freeDeliveryFrom1000",
    "frame9826",
    "content6",
    "content7",
    "color",
    "color2",
    "variantKarte",
    "content10",
    "content11",
    "iconButton",
    "icon",
    "fiRsHeart",
    "icon2",
    "icon3",
    "fiRsShare",
    "button",
    "quantity",
    "numberInput",
    "buttonNoIcon",
    "button2",
    "buttonNoIcon2",
    "button3",
    "content12",
    "content13",
    "content14",
    "content15"
  ],
  content16: [
    "content16",
    "sliderCarousel",
    "content2",
    "content3",
    "content4",
    "content5",
    "frame9837",
    "cesilMicroVelvetChair",
    "frame9836",
    "reviews",
    "caption",
    "freeDeliveryFrom1000",
    "frame9826",
    "content6",
    "content7",
    "color",
    "color2",
    "variantKarte",
    "content10",
    "content11",
    "iconButton",
    "icon",
    "fiRsHeart",
    "icon2",
    "icon3",
    "fiRsShare",
    "button",
    "quantity",
    "numberInput",
    "buttonNoIcon",
    "button2",
    "buttonNoIcon2",
    "button3",
    "content12",
    "content13",
    "content14",
    "content15"
  ],
  sliderCarousel: ["sliderCarousel"],
  content2: [
    "content2",
    "content3",
    "content4",
    "content5",
    "frame9837",
    "cesilMicroVelvetChair",
    "frame9836",
    "reviews",
    "caption",
    "freeDeliveryFrom1000",
    "frame9826",
    "content6",
    "content7",
    "color",
    "color2",
    "variantKarte",
    "content10",
    "content11",
    "iconButton",
    "icon",
    "fiRsHeart",
    "icon2",
    "icon3",
    "fiRsShare",
    "button",
    "quantity",
    "numberInput",
    "buttonNoIcon",
    "button2",
    "buttonNoIcon2",
    "button3",
    "content12",
    "content13",
    "content14",
    "content15"
  ],
  content3: [
    "content3",
    "content4",
    "content5",
    "frame9837",
    "cesilMicroVelvetChair",
    "frame9836",
    "reviews",
    "caption",
    "freeDeliveryFrom1000",
    "frame9826",
    "content6",
    "content7",
    "color",
    "color2",
    "variantKarte",
    "content10",
    "content11",
    "iconButton",
    "icon",
    "fiRsHeart",
    "icon2",
    "icon3",
    "fiRsShare",
    "button",
    "quantity",
    "numberInput",
    "buttonNoIcon",
    "button2",
    "buttonNoIcon2",
    "button3"
  ],
  content4: [
    "content4",
    "content5",
    "frame9837",
    "cesilMicroVelvetChair",
    "frame9836",
    "reviews",
    "caption",
    "freeDeliveryFrom1000",
    "frame9826"
  ],
  content5: [
    "content5",
    "frame9837",
    "cesilMicroVelvetChair",
    "frame9836",
    "reviews",
    "caption",
    "freeDeliveryFrom1000",
    "frame9826"
  ],
  frame9837: [
    "frame9837",
    "cesilMicroVelvetChair",
    "frame9836",
    "reviews",
    "caption",
    "freeDeliveryFrom1000"
  ],
  cesilMicroVelvetChair: ["cesilMicroVelvetChair"],
  frame9836: ["frame9836", "reviews", "caption", "freeDeliveryFrom1000"],
  reviews: ["reviews"],
  caption: ["caption", "freeDeliveryFrom1000"],
  freeDeliveryFrom1000: ["freeDeliveryFrom1000"],
  frame9826: ["frame9826"],
  content6: [
    "content6",
    "content7",
    "color",
    "color2",
    "variantKarte",
    "content10",
    "content11",
    "iconButton",
    "icon",
    "fiRsHeart",
    "icon2",
    "icon3",
    "fiRsShare",
    "button",
    "quantity",
    "numberInput",
    "buttonNoIcon",
    "button2",
    "buttonNoIcon2",
    "button3"
  ],
  content7: ["content7", "color", "color2", "variantKarte"],
  color: ["color"],
  color2: ["color2", "variantKarte"],
  variantKarte: ["variantKarte"],
  content10: [
    "content10",
    "content11",
    "iconButton",
    "icon",
    "fiRsHeart",
    "icon2",
    "icon3",
    "fiRsShare",
    "button",
    "quantity",
    "numberInput",
    "buttonNoIcon",
    "button2",
    "buttonNoIcon2",
    "button3"
  ],
  content11: [
    "content11",
    "iconButton",
    "icon",
    "fiRsHeart",
    "icon2",
    "icon3",
    "fiRsShare"
  ],
  iconButton: [
    "iconButton",
    "icon",
    "fiRsHeart",
    "icon2",
    "icon3",
    "fiRsShare"
  ],
  icon: ["icon", "fiRsHeart"],
  fiRsHeart: ["fiRsHeart"],
  icon2: ["icon2"],
  icon3: ["icon3", "fiRsShare"],
  fiRsShare: ["fiRsShare"],
  button: [
    "button",
    "quantity",
    "numberInput",
    "buttonNoIcon",
    "button2",
    "buttonNoIcon2",
    "button3"
  ],
  quantity: ["quantity", "numberInput"],
  numberInput: ["numberInput"],
  buttonNoIcon: ["buttonNoIcon", "button2"],
  button2: ["button2"],
  buttonNoIcon2: ["buttonNoIcon2", "button3"],
  button3: ["button3"],
  content12: ["content12", "content13", "content14", "content15"],
  content13: ["content13"],
  content14: ["content14"],
  content15: ["content15"],
  produktInfo: ["produktInfo"],
  section: [
    "section",
    "h2",
    "graphQlFetcher",
    "angeboteSlider",
    "produktKarte"
  ],
  h2: ["h2"],
  graphQlFetcher: ["graphQlFetcher", "angeboteSlider", "produktKarte"],
  angeboteSlider: ["angeboteSlider", "produktKarte"],
  produktKarte: ["produktKarte"],
  footer: ["footer"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  header: typeof Header;
  content: "div";
  breadcrumb: "div";
  angleSmall: "div";
  angleSmall2: "div";
  detailsProduct: "div";
  content16: "div";
  sliderCarousel: typeof SliderWrapper;
  content2: "div";
  content3: "div";
  content4: "div";
  content5: "div";
  frame9837: "div";
  cesilMicroVelvetChair: "div";
  frame9836: "div";
  reviews: "div";
  caption: "div";
  freeDeliveryFrom1000: "div";
  frame9826: "div";
  content6: "div";
  content7: "div";
  color: "div";
  color2: "div";
  variantKarte: typeof VariantKarte;
  content10: "div";
  content11: "div";
  iconButton: "div";
  icon: "div";
  fiRsHeart: "div";
  icon2: "div";
  icon3: "div";
  fiRsShare: "div";
  button: "div";
  quantity: "div";
  numberInput: "input";
  buttonNoIcon: "div";
  button2: "div";
  buttonNoIcon2: "div";
  button3: "div";
  content12: "div";
  content13: "div";
  content14: "div";
  content15: "div";
  produktInfo: typeof ProduktInfo;
  section: "section";
  h2: "h2";
  graphQlFetcher: typeof GraphqlFetcher;
  angeboteSlider: typeof SliderWrapper;
  produktKarte: typeof ProduktKarte;
  footer: typeof Footer;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicProduktdetails__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicProduktdetails__VariantsArgs;
    args?: PlasmicProduktdetails__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicProduktdetails__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicProduktdetails__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicProduktdetails__ArgProps,
          internalVariantPropNames: PlasmicProduktdetails__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicProduktdetails__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicProduktdetails";
  } else {
    func.displayName = `PlasmicProduktdetails.${nodeName}`;
  }
  return func;
}

export const PlasmicProduktdetails = Object.assign(
  // Top-level PlasmicProduktdetails renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    header: makeNodeComponent("header"),
    content: makeNodeComponent("content"),
    breadcrumb: makeNodeComponent("breadcrumb"),
    angleSmall: makeNodeComponent("angleSmall"),
    angleSmall2: makeNodeComponent("angleSmall2"),
    detailsProduct: makeNodeComponent("detailsProduct"),
    content16: makeNodeComponent("content16"),
    sliderCarousel: makeNodeComponent("sliderCarousel"),
    content2: makeNodeComponent("content2"),
    content3: makeNodeComponent("content3"),
    content4: makeNodeComponent("content4"),
    content5: makeNodeComponent("content5"),
    frame9837: makeNodeComponent("frame9837"),
    cesilMicroVelvetChair: makeNodeComponent("cesilMicroVelvetChair"),
    frame9836: makeNodeComponent("frame9836"),
    reviews: makeNodeComponent("reviews"),
    caption: makeNodeComponent("caption"),
    freeDeliveryFrom1000: makeNodeComponent("freeDeliveryFrom1000"),
    frame9826: makeNodeComponent("frame9826"),
    content6: makeNodeComponent("content6"),
    content7: makeNodeComponent("content7"),
    color: makeNodeComponent("color"),
    color2: makeNodeComponent("color2"),
    variantKarte: makeNodeComponent("variantKarte"),
    content10: makeNodeComponent("content10"),
    content11: makeNodeComponent("content11"),
    iconButton: makeNodeComponent("iconButton"),
    icon: makeNodeComponent("icon"),
    fiRsHeart: makeNodeComponent("fiRsHeart"),
    icon2: makeNodeComponent("icon2"),
    icon3: makeNodeComponent("icon3"),
    fiRsShare: makeNodeComponent("fiRsShare"),
    button: makeNodeComponent("button"),
    quantity: makeNodeComponent("quantity"),
    numberInput: makeNodeComponent("numberInput"),
    buttonNoIcon: makeNodeComponent("buttonNoIcon"),
    button2: makeNodeComponent("button2"),
    buttonNoIcon2: makeNodeComponent("buttonNoIcon2"),
    button3: makeNodeComponent("button3"),
    content12: makeNodeComponent("content12"),
    content13: makeNodeComponent("content13"),
    content14: makeNodeComponent("content14"),
    content15: makeNodeComponent("content15"),
    produktInfo: makeNodeComponent("produktInfo"),
    section: makeNodeComponent("section"),
    h2: makeNodeComponent("h2"),
    graphQlFetcher: makeNodeComponent("graphQlFetcher"),
    angeboteSlider: makeNodeComponent("angeboteSlider"),
    produktKarte: makeNodeComponent("produktKarte"),
    footer: makeNodeComponent("footer"),

    // Metadata about props expected for PlasmicProduktdetails
    internalVariantProps: PlasmicProduktdetails__VariantProps,
    internalArgProps: PlasmicProduktdetails__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicProduktdetails;
/* prettier-ignore-end */
