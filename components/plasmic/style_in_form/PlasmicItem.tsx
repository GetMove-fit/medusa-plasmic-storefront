// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: nhXBd3CNNLYZW2Pj52bSRa
// Component: c7kGNIgxP79N

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import NavBar from "../../NavBar"; // plasmic-import: wZiOh75Di8Ru/component
import { ProductBox } from "../../medusa/ProductBox"; // plasmic-import: OpBk2JF7Jtnp/codeComponent
import Price from "../../Price"; // plasmic-import: CfE03CEaMrMq/component
import Button from "../../Button"; // plasmic-import: cLLEHB2WpU1a/component
import Select from "../../Select"; // plasmic-import: CqAxAwhP2M1V/component
import Select__Option from "../../Select__Option"; // plasmic-import: m-6sa1CBO2zN/component
import Separator from "../../Separator"; // plasmic-import: x7en3PleQHZP/component
import { SideEffect } from "@plasmicpkgs/plasmic-basic-components";
import { ProductCollection } from "../../medusa/ProductCollection"; // plasmic-import: UPdGccaLub2L/codeComponent
import ProductCard from "../../ProductCard"; // plasmic-import: RCpTzrMoBqxV/component
import Rating from "../../Rating"; // plasmic-import: ZSXN98BPTHtM/component
import Footer from "../../Footer"; // plasmic-import: bTETGnQh50Wu/component

import { useScreenVariants as useScreenVariantsw1SoSbmtvmOq } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: W1soSBMTVMOq/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: nhXBd3CNNLYZW2Pj52bSRa/projectcss
import sty from "./PlasmicItem.module.css"; // plasmic-import: c7kGNIgxP79N/css

import MenuIcon from "./icons/PlasmicIcon__Menu"; // plasmic-import: o0fHIWJcK2eJ/icon
import LikeIcon from "./icons/PlasmicIcon__Like"; // plasmic-import: YFEAbC9uwqyr/icon
import RightArrowIcon from "./icons/PlasmicIcon__RightArrow"; // plasmic-import: _tWcHAQiOGu3/icon

import { groupBy as __lib_lodash__groupBy } from "lodash";

createPlasmicElementProxy;

export type PlasmicItem__VariantMembers = {};
export type PlasmicItem__VariantsArgs = {};
type VariantPropType = keyof PlasmicItem__VariantsArgs;
export const PlasmicItem__VariantProps = new Array<VariantPropType>();

export type PlasmicItem__ArgsType = {
  container42?: React.ReactNode;
};
type ArgPropType = keyof PlasmicItem__ArgsType;
export const PlasmicItem__ArgProps = new Array<ArgPropType>("container42");

export type PlasmicItem__OverridesType = {
  root?: Flex__<"div">;
  navBar?: Flex__<typeof NavBar>;
  productBox?: Flex__<typeof ProductBox>;
  columns?: Flex__<"div">;
  price?: Flex__<typeof Price>;
  quantity?: Flex__<typeof Select>;
  likeButton?: Flex__<typeof Button>;
  svg?: Flex__<"svg">;
  addToCartButton?: Flex__<typeof Button>;
  description?: Flex__<"div">;
  details?: Flex__<"div">;
  sideEffect?: Flex__<typeof SideEffect>;
  container42?: Flex__<"div">;
  container5?: Flex__<"div">;
  productCollection?: Flex__<typeof ProductCollection>;
  productCard?: Flex__<typeof ProductCard>;
  footer?: Flex__<typeof Footer>;
};

export interface DefaultItemProps {}

const $$ = {
  lodash: {
    groupBy: __lib_lodash__groupBy
  }
};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicItem__RenderFunc(props: {
  variants: PlasmicItem__VariantsArgs;
  args: PlasmicItem__ArgsType;
  overrides: PlasmicItem__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const $globalActions = useGlobalActions?.();

  const currentUser = useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "quantity.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "1"
      },
      {
        path: "selectedOptions",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => []
      },
      {
        path: "selectedVariant",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsw1SoSbmtvmOq()
  });

  return (
    <React.Fragment>
      <Head>
        <meta name="twitter:card" content="summary" />
        <title key="title">{PlasmicItem.pageMetadata.title}</title>
        <meta
          key="og:title"
          property="og:title"
          content={PlasmicItem.pageMetadata.title}
        />
        <meta
          key="twitter:title"
          name="twitter:title"
          content={PlasmicItem.pageMetadata.title}
        />
        <meta
          key="description"
          name="description"
          content={PlasmicItem.pageMetadata.description}
        />
        <meta
          key="og:description"
          property="og:description"
          content={PlasmicItem.pageMetadata.description}
        />
        <meta
          key="twitter:description"
          name="twitter:description"
          content={PlasmicItem.pageMetadata.description}
        />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            sty.root
          )}
        >
          <NavBar
            data-plasmic-name={"navBar"}
            data-plasmic-override={overrides.navBar}
            className={classNames("__wab_instance", sty.navBar)}
          />

          <ProductBox
            data-plasmic-name={"productBox"}
            data-plasmic-override={overrides.productBox}
            className={classNames("__wab_instance", sty.productBox)}
            emptyMessage={
              <DataCtxReader__>
                {$ctx => (
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__iL06P
                    )}
                  >
                    {"No product found!"}
                  </div>
                )}
              </DataCtxReader__>
            }
            handle={(() => {
              try {
                return $ctx.params.handle;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return undefined;
                }
                throw e;
              }
            })()}
            loadingMessage={
              <DataCtxReader__>
                {$ctx => (
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__vaAbp
                    )}
                  >
                    {"Loading..."}
                  </div>
                )}
              </DataCtxReader__>
            }
          >
            <DataCtxReader__>
              {$ctx => (
                <React.Fragment>
                  <section
                    className={classNames(projectcss.all, sty.section__uu3Pw)}
                  >
                    <Stack__
                      as={"div"}
                      data-plasmic-name={"columns"}
                      data-plasmic-override={overrides.columns}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.columns)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.column___3EEh
                        )}
                      >
                        <Stack__
                          as={"div"}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__sofI2
                          )}
                        >
                          <PlasmicImg__
                            alt={""}
                            className={classNames(sty.img__tDtDi)}
                            displayHeight={"auto"}
                            displayMaxHeight={"none"}
                            displayMaxWidth={"none"}
                            displayMinHeight={"0"}
                            displayMinWidth={"0"}
                            displayWidth={"auto"}
                            src={(() => {
                              try {
                                return $ctx.currentProduct.thumbnail;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return {
                                    src: "/plasmic/style_in_form/images/shoe20.png",
                                    fullWidth: 2000,
                                    fullHeight: 2000,
                                    aspectRatio: undefined
                                  };
                                }
                                throw e;
                              }
                            })()}
                          />

                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__jilt8
                            )}
                          >
                            {(_par =>
                              !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                              (() => {
                                try {
                                  return $ctx.currentProduct.images;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return [];
                                  }
                                  throw e;
                                }
                              })()
                            ).map((__plasmic_item_0, __plasmic_idx_0) => {
                              const currentImage = __plasmic_item_0;
                              const currentIndex = __plasmic_idx_0;
                              return (
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox__beyTo
                                  )}
                                  key={currentIndex}
                                >
                                  <PlasmicImg__
                                    alt={""}
                                    className={classNames(sty.img__yf34H)}
                                    displayHeight={"auto"}
                                    displayMaxHeight={"none"}
                                    displayMaxWidth={"none"}
                                    displayMinHeight={"0"}
                                    displayMinWidth={"0"}
                                    displayWidth={"100%"}
                                    src={(() => {
                                      try {
                                        return currentImage.url;
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return {
                                            src: "/plasmic/style_in_form/images/shoe20.png",
                                            fullWidth: 2000,
                                            fullHeight: 2000,
                                            aspectRatio: undefined
                                          };
                                        }
                                        throw e;
                                      }
                                    })()}
                                  />
                                </div>
                              );
                            })}
                          </div>
                        </Stack__>
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.column___4YzIf
                        )}
                      >
                        <Stack__
                          as={"div"}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__zgmEt
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text___07SUu
                            )}
                          >
                            <React.Fragment>
                              {(() => {
                                try {
                                  return $ctx.currentProduct.title;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "Eternity NITRO Men's Running Shoes";
                                  }
                                  throw e;
                                }
                              })()}
                            </React.Fragment>
                          </div>
                          <Price
                            data-plasmic-name={"price"}
                            data-plasmic-override={overrides.price}
                            className={classNames("__wab_instance", sty.price)}
                            price={
                              $state.selectedVariant?.calculated_price ??
                              $ctx.currentProduct.variants[0].calculated_price
                            }
                          />

                          {(_par =>
                            !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                            (() => {
                              try {
                                return $ctx.currentProduct.options;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return [];
                                }
                                throw e;
                              }
                            })()
                          ).map((__plasmic_item_0, __plasmic_idx_0) => {
                            const currentOption = __plasmic_item_0;
                            const currentOptionIndex = __plasmic_idx_0;
                            return (
                              <Stack__
                                as={"div"}
                                hasGap={true}
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__bzEe2
                                )}
                                key={currentOptionIndex}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__bSr32
                                  )}
                                >
                                  <React.Fragment>
                                    {(() => {
                                      try {
                                        return currentOption.title;
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return "Size";
                                        }
                                        throw e;
                                      }
                                    })()}
                                  </React.Fragment>
                                </div>
                                <Stack__
                                  as={"div"}
                                  hasGap={true}
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox__ujbff
                                  )}
                                >
                                  {(_par =>
                                    !_par
                                      ? []
                                      : Array.isArray(_par)
                                      ? _par
                                      : [_par])(
                                    (() => {
                                      try {
                                        return Object.values(
                                          $$.lodash.groupBy(
                                            currentOption.values,
                                            item => item.value
                                          )
                                        ).map(group => group[0]);
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return [];
                                        }
                                        throw e;
                                      }
                                    })()
                                  ).map((__plasmic_item_1, __plasmic_idx_1) => {
                                    const currentOptionValue = __plasmic_item_1;
                                    const currentOptionValueIndex =
                                      __plasmic_idx_1;
                                    return (
                                      <Button
                                        colors={(() => {
                                          try {
                                            return !$state.selectedVariant
                                              ?.options
                                              ? "lightGray"
                                              : $state.selectedVariant.options.find(
                                                  opt =>
                                                    opt.option_id ===
                                                      currentOption.id &&
                                                    opt.value ===
                                                      currentOptionValue.value
                                                )
                                              ? "black"
                                              : "lightGray";
                                          } catch (e) {
                                            if (
                                              e instanceof TypeError ||
                                              e?.plasmicType ===
                                                "PlasmicUndefinedDataError"
                                            ) {
                                              return "black";
                                            }
                                            throw e;
                                          }
                                        })()}
                                        key={currentOptionValueIndex}
                                        onClick={async event => {
                                          const $steps = {};

                                          $steps["updateSelectedVariant"] = true
                                            ? (() => {
                                                const actionArgs = {
                                                  variable: {
                                                    objRoot: $state,
                                                    variablePath: [
                                                      "selectedVariant"
                                                    ]
                                                  },
                                                  operation: 0,
                                                  value: (() => {
                                                    const options =
                                                      Object.fromEntries(
                                                        $state.selectedVariant.options?.map(
                                                          opt => [
                                                            opt.option_id,
                                                            opt.value
                                                          ]
                                                        ) ?? []
                                                      );
                                                    options[currentOption.id] =
                                                      currentOptionValue.value;
                                                    const newVariant =
                                                      $ctx.currentProduct.variants.find(
                                                        productVariant => {
                                                          return productVariant.options.every(
                                                            opt =>
                                                              options[
                                                                opt.option_id
                                                              ] == opt.value
                                                          );
                                                        }
                                                      );
                                                    return newVariant;
                                                  })()
                                                };
                                                return (({
                                                  variable,
                                                  value,
                                                  startIndex,
                                                  deleteCount
                                                }) => {
                                                  if (!variable) {
                                                    return;
                                                  }
                                                  const {
                                                    objRoot,
                                                    variablePath
                                                  } = variable;

                                                  $stateSet(
                                                    objRoot,
                                                    variablePath,
                                                    value
                                                  );
                                                  return value;
                                                })?.apply(null, [actionArgs]);
                                              })()
                                            : undefined;
                                          if (
                                            $steps["updateSelectedVariant"] !=
                                              null &&
                                            typeof $steps[
                                              "updateSelectedVariant"
                                            ] === "object" &&
                                            typeof $steps[
                                              "updateSelectedVariant"
                                            ].then === "function"
                                          ) {
                                            $steps["updateSelectedVariant"] =
                                              await $steps[
                                                "updateSelectedVariant"
                                              ];
                                          }
                                        }}
                                        submitsForm={true}
                                      >
                                        <div
                                          className={classNames(
                                            projectcss.all,
                                            projectcss.__wab_text,
                                            sty.text__sgev5
                                          )}
                                        >
                                          <React.Fragment>
                                            {currentOptionValue.value}
                                          </React.Fragment>
                                        </div>
                                      </Button>
                                    );
                                  })}
                                </Stack__>
                              </Stack__>
                            );
                          })}
                          <Stack__
                            as={"div"}
                            hasGap={true}
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__rXnE5
                            )}
                          >
                            <Stack__
                              as={"div"}
                              hasGap={true}
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__ry1Bs
                              )}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__y1QaR
                                )}
                              >
                                {"Quantity"}
                              </div>
                              <Stack__
                                as={"div"}
                                hasGap={true}
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__uzoz7
                                )}
                              >
                                <Select
                                  data-plasmic-name={"quantity"}
                                  data-plasmic-override={overrides.quantity}
                                  onChange={(...eventArgs) => {
                                    generateStateOnChangeProp($state, [
                                      "quantity",
                                      "value"
                                    ])(eventArgs[0]);
                                  }}
                                  value={generateStateValueProp($state, [
                                    "quantity",
                                    "value"
                                  ])}
                                >
                                  <Select__Option
                                    className={classNames(
                                      "__wab_instance",
                                      sty.option__fclSc
                                    )}
                                    value={"1"}
                                  >
                                    {"1"}
                                  </Select__Option>
                                  <Select__Option
                                    className={classNames(
                                      "__wab_instance",
                                      sty.option__rVQf9
                                    )}
                                    value={"2"}
                                  >
                                    {"2"}
                                  </Select__Option>
                                  <Select__Option
                                    className={classNames(
                                      "__wab_instance",
                                      sty.option__qliTt
                                    )}
                                    value={"3"}
                                  >
                                    {"3"}
                                  </Select__Option>
                                  <Select__Option
                                    className={classNames(
                                      "__wab_instance",
                                      sty.option__ufkXf
                                    )}
                                    value={"4"}
                                  >
                                    {"4"}
                                  </Select__Option>
                                  <Select__Option
                                    className={classNames(
                                      "__wab_instance",
                                      sty.option__zpx8E
                                    )}
                                    value={"5"}
                                  >
                                    {"5"}
                                  </Select__Option>
                                </Select>
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox__gBzj8
                                  )}
                                />

                                <Button
                                  data-plasmic-name={"likeButton"}
                                  data-plasmic-override={overrides.likeButton}
                                  colors={"lightGrayOutline"}
                                  iconOnly={true}
                                  size={"large"}
                                  startIcon={
                                    <LikeIcon
                                      data-plasmic-name={"svg"}
                                      data-plasmic-override={overrides.svg}
                                      className={classNames(
                                        projectcss.all,
                                        sty.svg
                                      )}
                                      role={"img"}
                                    />
                                  }
                                  submitsForm={true}
                                />

                                <Button
                                  data-plasmic-name={"addToCartButton"}
                                  data-plasmic-override={
                                    overrides.addToCartButton
                                  }
                                  className={classNames(
                                    "__wab_instance",
                                    sty.addToCartButton
                                  )}
                                  colors={"black"}
                                  isDisabled={(() => {
                                    try {
                                      return !$state.selectedVariant.options;
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return [];
                                      }
                                      throw e;
                                    }
                                  })()}
                                  onClick={async event => {
                                    const $steps = {};

                                    $steps["invokeGlobalAction"] = true
                                      ? (() => {
                                          const actionArgs = {
                                            args: [
                                              (() => {
                                                try {
                                                  return $state.selectedVariant
                                                    .id;
                                                } catch (e) {
                                                  if (
                                                    e instanceof TypeError ||
                                                    e?.plasmicType ===
                                                      "PlasmicUndefinedDataError"
                                                  ) {
                                                    return undefined;
                                                  }
                                                  throw e;
                                                }
                                              })(),
                                              (() => {
                                                try {
                                                  return +$state.quantity.value;
                                                } catch (e) {
                                                  if (
                                                    e instanceof TypeError ||
                                                    e?.plasmicType ===
                                                      "PlasmicUndefinedDataError"
                                                  ) {
                                                    return undefined;
                                                  }
                                                  throw e;
                                                }
                                              })()
                                            ]
                                          };
                                          return $globalActions[
                                            "medusa-provider.addItem"
                                          ]?.apply(null, [...actionArgs.args]);
                                        })()
                                      : undefined;
                                    if (
                                      $steps["invokeGlobalAction"] != null &&
                                      typeof $steps["invokeGlobalAction"] ===
                                        "object" &&
                                      typeof $steps["invokeGlobalAction"]
                                        .then === "function"
                                    ) {
                                      $steps["invokeGlobalAction"] =
                                        await $steps["invokeGlobalAction"];
                                    }
                                  }}
                                  rounded={true}
                                  size={"large"}
                                >
                                  {"Add to cart"}
                                </Button>
                              </Stack__>
                            </Stack__>
                          </Stack__>
                          <Separator
                            className={classNames(
                              "__wab_instance",
                              sty.separator__iBudw
                            )}
                          />

                          <Stack__
                            as={"div"}
                            hasGap={true}
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__wwrY
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__qNgah
                              )}
                            >
                              {"Description"}
                            </div>
                            <div
                              data-plasmic-name={"description"}
                              data-plasmic-override={overrides.description}
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.description
                              )}
                            >
                              <React.Fragment>
                                {(() => {
                                  try {
                                    return $ctx.currentProduct.description;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return "Let Eternity NITRO be your guide. The engineered mesh upper integrates the runGUIDE tech, designed to hug your midfoot for an effortless ride. For the midsole, NITRO foam provides superior cushioning, combining with other tech elements to give you support: a TPU heel piece for proprioception, reflectivity, and a durable rubber PUMAGRIP for all-surface traction. You lead the way, Eternity NITRO will keep you in line.";
                                    }
                                    throw e;
                                  }
                                })()}
                              </React.Fragment>
                            </div>
                          </Stack__>
                          <Separator
                            className={classNames(
                              "__wab_instance",
                              sty.separator__yuQkO
                            )}
                          />

                          <Stack__
                            as={"div"}
                            hasGap={true}
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__nXgcm
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__gmOCj
                              )}
                            >
                              {"Meta data"}
                            </div>
                            <div
                              data-plasmic-name={"details"}
                              data-plasmic-override={overrides.details}
                              className={classNames(
                                projectcss.all,
                                sty.details
                              )}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__zxz2S
                                )}
                              >
                                {
                                  "Adaptive fit with midfoot wrap for secure lockdown"
                                }
                              </div>
                              <Separator
                                className={classNames(
                                  "__wab_instance",
                                  sty.separator__mOoa2
                                )}
                              />

                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__fujfi
                                )}
                              >
                                {"Engineered mesh upper for support"}
                              </div>
                              <Separator
                                className={classNames(
                                  "__wab_instance",
                                  sty.separator__kvhVa
                                )}
                              />

                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__rPkQq
                                )}
                              >
                                {"Full lace closure for snug fit"}
                              </div>
                              <Separator
                                className={classNames(
                                  "__wab_instance",
                                  sty.separator___3Weql
                                )}
                              />

                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text___04XHo
                                )}
                              >
                                {
                                  "NITRO FOAM midsole for lightweight, responsive cushioning"
                                }
                              </div>
                            </div>
                          </Stack__>
                        </Stack__>
                      </div>
                    </Stack__>
                  </section>
                  <SideEffect
                    data-plasmic-name={"sideEffect"}
                    data-plasmic-override={overrides.sideEffect}
                    className={classNames("__wab_instance", sty.sideEffect)}
                    deps={(() => {
                      try {
                        return $ctx.currentProduct.id;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return undefined;
                        }
                        throw e;
                      }
                    })()}
                    onMount={async () => {
                      const $steps = {};

                      $steps["updateSelectedOptions"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["selectedOptions"]
                              },
                              operation: 0,
                              value: $ctx.currentProduct.options.map(
                                opt => opt.values[0].value
                              )
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateSelectedOptions"] != null &&
                        typeof $steps["updateSelectedOptions"] === "object" &&
                        typeof $steps["updateSelectedOptions"].then ===
                          "function"
                      ) {
                        $steps["updateSelectedOptions"] = await $steps[
                          "updateSelectedOptions"
                        ];
                      }

                      $steps["updateSelectedVariant"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["selectedVariant"]
                              },
                              operation: 0,
                              value: $ctx.currentProduct.variants[0]
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateSelectedVariant"] != null &&
                        typeof $steps["updateSelectedVariant"] === "object" &&
                        typeof $steps["updateSelectedVariant"].then ===
                          "function"
                      ) {
                        $steps["updateSelectedVariant"] = await $steps[
                          "updateSelectedVariant"
                        ];
                      }
                    }}
                  />
                </React.Fragment>
              )}
            </DataCtxReader__>
          </ProductBox>
          <section className={classNames(projectcss.all, sty.section__lIe9B)}>
            <div
              data-plasmic-name={"container42"}
              data-plasmic-override={overrides.container42}
              className={classNames(projectcss.all, sty.container42)}
            >
              {renderPlasmicSlot({
                defaultContents: (
                  <div
                    className={classNames(projectcss.all, sty.freeBox__yocf7)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__cnoRa
                      )}
                    >
                      {"You may also like"}
                    </div>
                    <Button
                      className={classNames(
                        "__wab_instance",
                        sty.button___0LBjJ
                      )}
                      colors={"link"}
                      endIcon={
                        <RightArrowIcon
                          className={classNames(projectcss.all, sty.svg__wic3J)}
                          role={"img"}
                        />
                      }
                      showEndIcon={true}
                      submitsForm={true}
                    >
                      {"See more"}
                    </Button>
                  </div>
                ),
                value: args.container42
              })}
            </div>
            <div
              data-plasmic-name={"container5"}
              data-plasmic-override={overrides.container5}
              className={classNames(projectcss.all, sty.container5)}
            >
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__wkzvY)}
              >
                <ProductCollection
                  data-plasmic-name={"productCollection"}
                  data-plasmic-override={overrides.productCollection}
                  className={classNames(
                    "__wab_instance",
                    sty.productCollection
                  )}
                  emptyMessage={
                    <DataCtxReader__>
                      {$ctx => (
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__uiInk
                          )}
                        >
                          {"No product found!"}
                        </div>
                      )}
                    </DataCtxReader__>
                  }
                  loadingMessage={
                    <DataCtxReader__>
                      {$ctx => (
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__xo3OL
                          )}
                        >
                          {"Loading..."}
                        </div>
                      )}
                    </DataCtxReader__>
                  }
                  noAutoRepeat={true}
                  noLayout={true}
                >
                  <DataCtxReader__>
                    {$ctx =>
                      (_par =>
                        !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                        (() => {
                          try {
                            return $ctx.products;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return [];
                            }
                            throw e;
                          }
                        })()
                      ).map((__plasmic_item_0, __plasmic_idx_0) => {
                        const currentItem = __plasmic_item_0;
                        const currentIndex = __plasmic_idx_0;
                        return (
                          <ProductCard
                            data-plasmic-name={"productCard"}
                            data-plasmic-override={overrides.productCard}
                            imgUrl={currentItem.thumbnail}
                            key={currentIndex}
                            link={`/product/${(() => {
                              try {
                                return currentItem.handle;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return "";
                                }
                                throw e;
                              }
                            })()}`}
                            price={currentItem.price.calculated_price_amount}
                            tags={
                              <Button
                                colors={"lightGray"}
                                size={"small"}
                                submitsForm={true}
                              >
                                {"New"}
                              </Button>
                            }
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__vAsIv
                              )}
                            >
                              <React.Fragment>
                                {(() => {
                                  try {
                                    return currentItem.title;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return "ADIDAS ULTRABOOST DNA X LEGO\u00ae PLATES SHOES";
                                    }
                                    throw e;
                                  }
                                })()}
                              </React.Fragment>
                            </div>
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__xltir
                              )}
                            >
                              <React.Fragment>
                                {(() => {
                                  try {
                                    return currentItem.description;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return "If you can dream it, you can build it.";
                                    }
                                    throw e;
                                  }
                                })()}
                              </React.Fragment>
                            </div>
                          </ProductCard>
                        );
                      })
                    }
                  </DataCtxReader__>
                </ProductCollection>
              </Stack__>
            </div>
          </section>
          <Footer
            data-plasmic-name={"footer"}
            data-plasmic-override={overrides.footer}
            className={classNames("__wab_instance", sty.footer)}
          />
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "navBar",
    "productBox",
    "columns",
    "price",
    "quantity",
    "likeButton",
    "svg",
    "addToCartButton",
    "description",
    "details",
    "sideEffect",
    "container42",
    "container5",
    "productCollection",
    "productCard",
    "footer"
  ],
  navBar: ["navBar"],
  productBox: [
    "productBox",
    "columns",
    "price",
    "quantity",
    "likeButton",
    "svg",
    "addToCartButton",
    "description",
    "details",
    "sideEffect"
  ],
  columns: [
    "columns",
    "price",
    "quantity",
    "likeButton",
    "svg",
    "addToCartButton",
    "description",
    "details"
  ],
  price: ["price"],
  quantity: ["quantity"],
  likeButton: ["likeButton", "svg"],
  svg: ["svg"],
  addToCartButton: ["addToCartButton"],
  description: ["description"],
  details: ["details"],
  sideEffect: ["sideEffect"],
  container42: ["container42"],
  container5: ["container5", "productCollection", "productCard"],
  productCollection: ["productCollection", "productCard"],
  productCard: ["productCard"],
  footer: ["footer"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  navBar: typeof NavBar;
  productBox: typeof ProductBox;
  columns: "div";
  price: typeof Price;
  quantity: typeof Select;
  likeButton: typeof Button;
  svg: "svg";
  addToCartButton: typeof Button;
  description: "div";
  details: "div";
  sideEffect: typeof SideEffect;
  container42: "div";
  container5: "div";
  productCollection: typeof ProductCollection;
  productCard: typeof ProductCard;
  footer: typeof Footer;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicItem__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicItem__VariantsArgs;
    args?: PlasmicItem__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicItem__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicItem__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicItem__ArgProps,
          internalVariantPropNames: PlasmicItem__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicItem__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicItem";
  } else {
    func.displayName = `PlasmicItem.${nodeName}`;
  }
  return func;
}

export const PlasmicItem = Object.assign(
  // Top-level PlasmicItem renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    navBar: makeNodeComponent("navBar"),
    productBox: makeNodeComponent("productBox"),
    columns: makeNodeComponent("columns"),
    price: makeNodeComponent("price"),
    quantity: makeNodeComponent("quantity"),
    likeButton: makeNodeComponent("likeButton"),
    svg: makeNodeComponent("svg"),
    addToCartButton: makeNodeComponent("addToCartButton"),
    description: makeNodeComponent("description"),
    details: makeNodeComponent("details"),
    sideEffect: makeNodeComponent("sideEffect"),
    container42: makeNodeComponent("container42"),
    container5: makeNodeComponent("container5"),
    productCollection: makeNodeComponent("productCollection"),
    productCard: makeNodeComponent("productCard"),
    footer: makeNodeComponent("footer"),

    // Metadata about props expected for PlasmicItem
    internalVariantProps: PlasmicItem__VariantProps,
    internalArgProps: PlasmicItem__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "Item",
      description:
        "Nunc parturient ultricies condimentum parturient sagittis urna mus conubia himenaeos fermentum leo mus dignissim pulvinar blandit porta eget ad.",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicItem;
/* prettier-ignore-end */
